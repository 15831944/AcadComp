// Created by Microsoft (R) C/C++ Compiler Version 12.00.8447.0 (f4367fbc).
//
// acax16enu.tlh
//
// C++ source equivalent of Win32 type library acax16enu.tlb
// compiler-generated file created 08/17/04 at 19:44:37 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace AutoCAD {

//
// Forward references and typedefs
//

typedef enum AcColor ACAD_COLOR;
typedef BSTR ACAD_LAYER;
typedef BSTR ACAD_LTYPE;
typedef long ACAD_NULL;
typedef double ACAD_DISTANCE;
typedef double ACAD_ANGLE;
typedef enum AcLineWeight ACAD_LWEIGHT;
typedef double ACAD_NOUNITS;
typedef VARIANT ACAD_POINT;
struct __declspec(uuid("b205d354-37a2-4159-af10-04542461582c"))
/* dual interface */ IAcadObject;
struct __declspec(uuid("f4493535-029c-4c51-8b88-7f62b42d9fb3"))
/* dual interface */ IAcadDatabase;
struct __declspec(uuid("eace0252-c787-4fcf-ba77-906667d7b12e"))
/* dual interface */ IAcadModelSpace;
struct __declspec(uuid("d4262ce6-325f-48f0-83b2-ed2a461dfa3f"))
/* dual interface */ IAcadBlock;
struct __declspec(uuid("ed471e71-0ded-490f-a11e-fc857711441a"))
/* dual interface */ IAcadEntity;
struct __declspec(uuid("74adf264-6dd9-4202-b6dd-f632ee145e10"))
/* dual interface */ IAcadAcCmColor;
struct __declspec(uuid("97701be6-4dac-412f-a914-6f2ef110b63f"))
/* dual interface */ IAcadHyperlinks;
struct __declspec(uuid("34e826e8-2285-49a2-bad8-903903a31be8"))
/* dual interface */ IAcadHyperlink;
struct __declspec(uuid("e6dc4387-6a52-4530-ae10-7c77494a5ace"))
/* dual interface */ IAcad3DFace;
struct __declspec(uuid("a8f34134-7efb-41a3-84c7-5c29cbb179a7"))
/* dual interface */ IAcadPolygonMesh;
struct __declspec(uuid("655b8bb0-56e6-48ac-923b-4284072d946d"))
/* dual interface */ IAcad3DPolyline;
struct __declspec(uuid("75ff9fd8-04fa-4d88-8903-2c806543e22e"))
/* dual interface */ IAcadArc;
struct __declspec(uuid("5a401278-dc00-4b1c-9f12-9a4f93c9a623"))
/* dual interface */ IAcadAttribute;
struct __declspec(uuid("8821b222-79ed-43dd-86bf-828311a81087"))
/* dual interface */ IAcad3DSolid;
struct __declspec(uuid("0a7dc97a-45c2-4a83-b0d4-d8a621fa4479"))
/* dual interface */ IAcadRegion;
struct __declspec(uuid("46a82b9e-fa08-484a-85aa-7f847f68a682"))
/* dual interface */ IAcadCircle;
struct __declspec(uuid("a450e3ef-f121-426b-88ca-1a927382c79d"))
/* dual interface */ IAcadDimAligned;
struct __declspec(uuid("aae1e267-581b-4fa8-ad3c-fe8c8a8503c6"))
/* dual interface */ IAcadDimension;
struct __declspec(uuid("ffeccd63-f821-457c-89f7-ef697bd9e7e5"))
/* dual interface */ IAcadDimAngular;
struct __declspec(uuid("5eaaee84-7b80-4902-9ce6-020e6fa1079e"))
/* dual interface */ IAcadDimDiametric;
struct __declspec(uuid("95825190-0f94-4a6e-a550-2bc788cb2a6d"))
/* dual interface */ IAcadDimRotated;
struct __declspec(uuid("ee43d58e-c456-4880-a7c4-8b9e583c2c1f"))
/* dual interface */ IAcadDimOrdinate;
struct __declspec(uuid("1a67dd6d-ea28-4b50-a6b2-10e467668c87"))
/* dual interface */ IAcadDimRadial;
struct __declspec(uuid("227531a4-6450-4a43-8717-ef636fdac1be"))
/* dual interface */ IAcadEllipse;
struct __declspec(uuid("f7426830-9601-411d-86ec-92d865368837"))
/* dual interface */ IAcadLeader;
struct __declspec(uuid("bf56989b-a903-4bd1-bc12-619ccdd67b47"))
/* dual interface */ IAcadMText;
struct __declspec(uuid("35af3ab5-755e-4ac9-8baf-31b532870751"))
/* dual interface */ IAcadPoint;
struct __declspec(uuid("da06170c-db48-4f07-a5fb-df33f9d086e4"))
/* dual interface */ IAcadLWPolyline;
struct __declspec(uuid("4d07b3da-1d65-4d58-967a-e3a02e255ee0"))
/* dual interface */ IAcadPolyline;
struct __declspec(uuid("5b8581a5-35db-4ad5-bb54-7997d2650b85"))
/* dual interface */ IAcadRay;
struct __declspec(uuid("2ae0c4d6-131f-483a-bfbe-2c2ad27bbdd3"))
/* dual interface */ IAcadShape;
struct __declspec(uuid("96757fd8-8159-4ba8-85a9-f37b34433081"))
/* dual interface */ IAcadSolid;
struct __declspec(uuid("975097ab-170f-434e-b6a5-012f28f7749a"))
/* dual interface */ IAcadSpline;
struct __declspec(uuid("e3fd8511-58af-43d4-9b16-c6941f7b245f"))
/* dual interface */ IAcadText;
struct __declspec(uuid("82a7fd1f-1fb7-411a-bca9-7074f9ad99eb"))
/* dual interface */ IAcadTolerance;
struct __declspec(uuid("506fed0c-4ff3-4550-ad8f-61614b334365"))
/* dual interface */ IAcadTrace;
struct __declspec(uuid("5e5bd910-4f2f-4765-a509-1562430c8705"))
/* dual interface */ IAcadXline;
struct __declspec(uuid("d50215e2-500b-4302-9c0e-991399b6c749"))
/* dual interface */ IAcadBlockReference;
struct __declspec(uuid("37e8d218-ce9e-4ad1-a1db-b19a032ebed0"))
/* dual interface */ IAcadHatch;
struct __declspec(uuid("6b8fa01d-b1d5-44c3-8bf3-b955a4964869"))
/* dual interface */ IAcadRasterImage;
struct __declspec(uuid("0fc758cf-cf9c-4e17-b7f8-d550157ce289"))
/* dual interface */ IAcadLine;
struct __declspec(uuid("46fc0058-178d-4c7d-869d-b3c97ba6bd26"))
/* dual interface */ IAcadLayout;
struct __declspec(uuid("719f05e7-6c78-47d0-a6ad-4489771dfea3"))
/* dual interface */ IAcadPlotConfiguration;
struct __declspec(uuid("9229e352-e850-403e-88d1-3333aaec3769"))
/* dual interface */ IAcadMInsertBlock;
struct __declspec(uuid("058b7d06-fcb3-4b36-b39a-f3af39435604"))
/* dual interface */ IAcadPolyfaceMesh;
struct __declspec(uuid("7c0ed309-aa19-4d81-9e92-adbbf964835f"))
/* dual interface */ IAcadMLine;
struct __declspec(uuid("1908be81-e5fd-44ab-b9e0-24df76b198ed"))
/* dual interface */ IAcadDim3PointAngular;
struct __declspec(uuid("2d21020d-78c5-431b-b6a2-3301a4385dea"))
/* dual interface */ IAcadExternalReference;
struct __declspec(uuid("4d4d9c1e-ef26-48b3-8af7-f2d8e6bab9f6"))
/* dual interface */ IAcadPaperSpace;
struct __declspec(uuid("fdf8da1e-dce0-4c2a-86c8-28f472755744"))
/* dual interface */ IAcadPViewport;
struct __declspec(uuid("704eea43-2e4f-4b19-95f7-6ed2a5aeed2d"))
/* dual interface */ IAcadBlocks;
struct __declspec(uuid("cc54aea3-cbeb-4a72-befd-41d2cddd96b3"))
/* dual interface */ IAcadGroups;
struct __declspec(uuid("6e8401d2-0722-4ffa-b1f6-f75d0eaced05"))
/* dual interface */ IAcadGroup;
struct __declspec(uuid("722a6eb9-a6a7-40d5-9db3-4f4b2ba2c6fe"))
/* dual interface */ IAcadDimStyles;
struct __declspec(uuid("df7932cd-4e3a-4de1-b9be-b90a4005db44"))
/* dual interface */ IAcadDimStyle;
struct __declspec(uuid("c347dcbd-d10d-4e35-8509-463a47f6f197"))
/* dual interface */ IAcadLayers;
struct __declspec(uuid("7f210ba8-5ac1-41b1-b3ab-f05c5a261118"))
/* dual interface */ IAcadLayer;
struct __declspec(uuid("96a72a20-a6c9-470b-ac3d-a0ae3813068a"))
/* dual interface */ IAcadLineTypes;
struct __declspec(uuid("09006fdc-9bc1-4ab8-93ff-78b7790dd467"))
/* dual interface */ IAcadLineType;
struct __declspec(uuid("c13c2c5e-671c-4674-a602-ecc41fef21f7"))
/* dual interface */ IAcadDictionaries;
struct __declspec(uuid("1b67bda6-499e-44d5-b839-b60a141d6ccd"))
/* dual interface */ IAcadDictionary;
struct __declspec(uuid("a90a35e1-d3d9-4254-bdb6-4a1dedaf6054"))
/* dual interface */ IAcadXRecord;
struct __declspec(uuid("801cc2fa-39b3-4846-8e23-7d4404426f84"))
/* dual interface */ IAcadRegisteredApplications;
struct __declspec(uuid("55c46ac7-115f-4c53-b569-6a6a033b66a7"))
/* dual interface */ IAcadRegisteredApplication;
struct __declspec(uuid("0d40004a-b71d-40b3-9c87-3c98427b9d39"))
/* dual interface */ IAcadTextStyles;
struct __declspec(uuid("3b272fdc-c510-44fc-b4f5-c2b2751b8daa"))
/* dual interface */ IAcadTextStyle;
struct __declspec(uuid("ba5a4d4d-15a4-4b95-a19f-d00b7d0b54fb"))
/* dual interface */ IAcadUCSs;
struct __declspec(uuid("0dddb5f6-d8da-4f44-81e1-33dbda981ca1"))
/* dual interface */ IAcadUCS;
struct __declspec(uuid("ddec76c4-e07a-46a9-89f2-b1d1954736ca"))
/* dual interface */ IAcadViews;
struct __declspec(uuid("186c8834-89d2-4939-b506-ca0f234279f8"))
/* dual interface */ IAcadView;
struct __declspec(uuid("5ef9cf1c-db3d-4a14-84cd-bab3f372b779"))
/* dual interface */ IAcadViewports;
struct __declspec(uuid("8e05f37a-ccdf-40ec-9afa-824272ad24c4"))
/* dual interface */ IAcadViewport;
struct __declspec(uuid("d0d2dfd9-f8da-4f72-a44d-8c503100a3c2"))
/* dual interface */ IAcadLayouts;
struct __declspec(uuid("e0b3c996-314e-4f29-89e9-ca75c7de9985"))
/* dual interface */ IAcadPlotConfigurations;
struct __declspec(uuid("7c526650-42e8-44c2-b6f6-d113781226bf"))
/* dual interface */ IAcadDatabasePreferences;
struct __declspec(uuid("c8985250-c2a1-47b4-8928-ca81a496eb27"))
/* dual interface */ IAcadFileDependencies;
struct __declspec(uuid("136ebbf4-66f5-41e8-be4f-75bcb08a7401"))
/* dual interface */ IAcadFileDependency;
struct __declspec(uuid("136ebbf5-66f5-41e8-be4f-75bcb08a7401"))
/* dual interface */ IAcadSummaryInfo;
struct /* coclass */ AcadHyperlink;
struct /* coclass */ AcadAcCmColor;
struct __declspec(uuid("848d9ee9-8e07-4699-9424-b8cd7a61af09"))
/* interface */ IAcadObjectEvents;
struct /* coclass */ AcadObject;
struct /* coclass */ AcadXRecord;
struct /* coclass */ AcadDimStyle;
struct /* coclass */ AcadLayer;
struct /* coclass */ AcadLineType;
struct /* coclass */ AcadRegisteredApplication;
struct /* coclass */ AcadTextStyle;
struct /* coclass */ AcadUCS;
struct /* coclass */ AcadView;
struct /* coclass */ AcadViewport;
struct /* coclass */ AcadGroup;
struct /* coclass */ AcadPlotConfiguration;
struct /* coclass */ AcadLayout;
struct __declspec(uuid("3e41a603-2870-4e69-81fc-cc672a41dd5f"))
/* dual interface */ IAcadIdPair;
struct /* coclass */ AcadIdPair;
struct /* coclass */ AcadHyperlinks;
struct /* coclass */ AcadDictionary;
struct /* coclass */ AcadLayers;
struct /* coclass */ AcadDimStyles;
struct /* coclass */ AcadDictionaries;
struct /* coclass */ AcadLineTypes;
struct /* coclass */ AcadTextStyles;
struct /* coclass */ AcadUCSs;
struct /* coclass */ AcadRegisteredApplications;
struct /* coclass */ AcadViews;
struct /* coclass */ AcadViewports;
struct /* coclass */ AcadGroups;
struct /* coclass */ AcadBlocks;
struct /* coclass */ AcadLayouts;
struct /* coclass */ AcadPlotConfigurations;
struct /* coclass */ AcadEntity;
struct /* coclass */ AcadRasterImage;
struct /* coclass */ Acad3DFace;
struct /* coclass */ Acad3DPolyline;
struct /* coclass */ AcadRegion;
struct /* coclass */ Acad3DSolid;
struct /* coclass */ AcadArc;
struct /* coclass */ AcadAttribute;
struct __declspec(uuid("c3141f04-f068-4788-9483-c40d28e9ab9f"))
/* dual interface */ IAcadAttributeReference;
struct /* coclass */ AcadAttributeReference;
struct /* coclass */ AcadBlockReference;
struct /* coclass */ AcadCircle;
struct /* coclass */ AcadEllipse;
struct /* coclass */ AcadHatch;
struct /* coclass */ AcadLeader;
struct /* coclass */ AcadLWPolyline;
struct /* coclass */ AcadLine;
struct /* coclass */ AcadMText;
struct /* coclass */ AcadPoint;
struct /* coclass */ AcadPolyline;
struct /* coclass */ AcadPolygonMesh;
struct /* coclass */ AcadRay;
struct /* coclass */ AcadShape;
struct /* coclass */ AcadSolid;
struct /* coclass */ AcadSpline;
struct /* coclass */ AcadText;
struct /* coclass */ AcadTolerance;
struct /* coclass */ AcadTrace;
struct /* coclass */ AcadXline;
struct /* coclass */ AcadPViewport;
struct /* coclass */ AcadMInsertBlock;
struct /* coclass */ AcadPolyfaceMesh;
struct /* coclass */ AcadMLine;
struct /* coclass */ AcadExternalReference;
struct /* coclass */ AcadDimension;
struct /* coclass */ AcadDimAligned;
struct /* coclass */ AcadDimAngular;
struct /* coclass */ AcadDimDiametric;
struct /* coclass */ AcadDimOrdinate;
struct /* coclass */ AcadDimRadial;
struct /* coclass */ AcadDimRotated;
struct /* coclass */ AcadDim3PointAngular;
struct /* coclass */ AcadBlock;
struct /* coclass */ AcadModelSpace;
struct /* coclass */ AcadPaperSpace;
struct /* coclass */ AcadFileDependency;
struct /* coclass */ AcadFileDependencies;
struct /* coclass */ AcadSummaryInfo;
struct /* coclass */ AcadDatabasePreferences;
struct /* coclass */ AcadDatabase;
struct __declspec(uuid("6917ced6-6655-475c-b62f-370be1148408"))
/* dual interface */ IAcadSecurityParams;
struct /* coclass */ AcadSecurityParams;
struct __declspec(uuid("92999267-e45c-43ba-bab0-7c408bafadc2"))
/* dual interface */ IAcadLayerStateManager;
struct /* coclass */ AcadLayerStateManager;
struct __declspec(uuid("407ebc22-4028-49a9-8d57-7de9de984c1e"))
/* dispinterface */ _DAcadApplicationEvents;
struct __declspec(uuid("3c391d99-2886-4e1a-9855-ee30c9fc5b8a"))
/* dual interface */ IAcadDocument;
struct __declspec(uuid("2fddab78-0943-4450-8ff9-92a2c9daf8f2"))
/* dual interface */ IAcadPlot;
struct __declspec(uuid("93bc4e71-afe7-4aa7-bc07-f80acdb672d5"))
/* dual interface */ IAcadApplication;
struct __declspec(uuid("498902dc-f5f2-4d4c-948c-d19b645f0c7f"))
/* dual interface */ IAcadPreferences;
struct __declspec(uuid("2443685e-ed1d-4753-aa91-963cb86ae095"))
/* dual interface */ IAcadPreferencesFiles;
struct __declspec(uuid("9b13ccd3-1b77-4763-bffe-774ffca0e2a5"))
/* dual interface */ IAcadPreferencesDisplay;
struct __declspec(uuid("055919a3-cf18-4b03-882f-7ada3ac6fcae"))
/* dual interface */ IAcadPreferencesOpenSave;
struct __declspec(uuid("5d995b4a-f970-4e63-90eb-c879ffbceebd"))
/* dual interface */ IAcadPreferencesOutput;
struct __declspec(uuid("7d8fdc74-be13-4aa0-9b96-33f132e1d0af"))
/* dual interface */ IAcadPreferencesSystem;
struct __declspec(uuid("07e8cf44-9e40-47ea-970b-89444bee2866"))
/* dual interface */ IAcadPreferencesUser;
struct __declspec(uuid("5617e4f2-f96f-42fe-8078-84b9ab19f10e"))
/* dual interface */ IAcadPreferencesDrafting;
struct __declspec(uuid("b2601ede-269f-479c-b712-227a71e80065"))
/* dual interface */ IAcadPreferencesSelection;
struct __declspec(uuid("30c8f7e7-97b8-4872-a525-6ea44119a20a"))
/* dual interface */ IAcadPreferencesProfiles;
struct __declspec(uuid("2bd1943d-1f68-4c80-bfa0-3f99bf79a681"))
/* dual interface */ IAcadMenuGroups;
struct __declspec(uuid("8e6cd1df-9d4b-44f4-a6b1-c78949711f5a"))
/* dual interface */ IAcadMenuGroup;
struct __declspec(uuid("c9445c9b-a5ce-4915-8454-bb33b85ee29b"))
/* dual interface */ IAcadPopupMenus;
struct __declspec(uuid("c64cb870-db03-4549-b3f4-4396417ea627"))
/* dual interface */ IAcadPopupMenu;
struct __declspec(uuid("6447e831-f8ba-41cd-af2c-045ad141f97e"))
/* dual interface */ IAcadPopupMenuItem;
struct __declspec(uuid("0b3c9958-a3c0-4523-b2a2-f3d285b62efe"))
/* dual interface */ IAcadToolbars;
struct __declspec(uuid("7ec1c9a4-87eb-48df-8099-5fd511b646df"))
/* dual interface */ IAcadToolbar;
struct __declspec(uuid("0a3454bb-4a39-423c-8568-7e76cebdc727"))
/* dual interface */ IAcadToolbarItem;
struct __declspec(uuid("c53d139b-4341-4d8b-9283-5cac79a5b55f"))
/* dual interface */ IAcadMenuBar;
struct __declspec(uuid("ce3683c2-a49b-4ae7-ac30-e4968cc70ed4"))
/* dual interface */ IAcadDocuments;
struct __declspec(uuid("5e3e247a-4725-47c4-beed-0310f364de35"))
/* dual interface */ IAcadState;
struct __declspec(uuid("6cd414b6-7119-426f-b8a0-000855af8d60"))
/* dual interface */ IAcadSelectionSets;
struct __declspec(uuid("6729d2c8-e1af-4248-914d-f208a0e05e84"))
/* dual interface */ IAcadSelectionSet;
struct __declspec(uuid("a6d2cc96-062c-408f-b879-550ccaa81079"))
/* dual interface */ IAcadUtility;
struct /* coclass */ AcadState;
struct /* coclass */ AcadApplication;
struct /* coclass */ AcadSelectionSet;
struct /* coclass */ AcadSelectionSets;
struct /* coclass */ AcadPlot;
struct /* coclass */ AcadPreferences;
struct /* coclass */ AcadPreferencesDrafting;
struct /* coclass */ AcadPreferencesDisplay;
struct /* coclass */ AcadPreferencesFiles;
struct /* coclass */ AcadPreferencesOpenSave;
struct /* coclass */ AcadPreferencesOutput;
struct /* coclass */ AcadPreferencesProfiles;
struct /* coclass */ AcadPreferencesSelection;
struct /* coclass */ AcadPreferencesSystem;
struct /* coclass */ AcadPreferencesUser;
struct /* coclass */ AcadMenuGroups;
struct /* coclass */ AcadMenuGroup;
struct /* coclass */ AcadMenuBar;
struct /* coclass */ AcadPopupMenus;
struct /* coclass */ AcadPopupMenu;
struct /* coclass */ AcadPopupMenuItem;
struct /* coclass */ AcadUtility;
struct __declspec(uuid("034cec0a-dc29-4bd9-b142-7822a1d26b0f"))
/* dispinterface */ _DAcadDocumentEvents;
struct /* coclass */ AcadDocument;
struct /* coclass */ AcadDocuments;
struct /* coclass */ AcadToolbars;
struct /* coclass */ AcadToolbar;
struct /* coclass */ AcadToolbarItem;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IAcadObject, __uuidof(IAcadObject));
_COM_SMARTPTR_TYPEDEF(IAcadDatabase, __uuidof(IAcadDatabase));
_COM_SMARTPTR_TYPEDEF(IAcadBlock, __uuidof(IAcadBlock));
_COM_SMARTPTR_TYPEDEF(IAcadModelSpace, __uuidof(IAcadModelSpace));
_COM_SMARTPTR_TYPEDEF(IAcadEntity, __uuidof(IAcadEntity));
_COM_SMARTPTR_TYPEDEF(IAcadAcCmColor, __uuidof(IAcadAcCmColor));
_COM_SMARTPTR_TYPEDEF(IAcadHyperlinks, __uuidof(IAcadHyperlinks));
_COM_SMARTPTR_TYPEDEF(IAcadHyperlink, __uuidof(IAcadHyperlink));
_COM_SMARTPTR_TYPEDEF(IAcad3DFace, __uuidof(IAcad3DFace));
_COM_SMARTPTR_TYPEDEF(IAcadPolygonMesh, __uuidof(IAcadPolygonMesh));
_COM_SMARTPTR_TYPEDEF(IAcad3DPolyline, __uuidof(IAcad3DPolyline));
_COM_SMARTPTR_TYPEDEF(IAcadArc, __uuidof(IAcadArc));
_COM_SMARTPTR_TYPEDEF(IAcadAttribute, __uuidof(IAcadAttribute));
_COM_SMARTPTR_TYPEDEF(IAcad3DSolid, __uuidof(IAcad3DSolid));
_COM_SMARTPTR_TYPEDEF(IAcadRegion, __uuidof(IAcadRegion));
_COM_SMARTPTR_TYPEDEF(IAcadCircle, __uuidof(IAcadCircle));
_COM_SMARTPTR_TYPEDEF(IAcadDimension, __uuidof(IAcadDimension));
_COM_SMARTPTR_TYPEDEF(IAcadDimAligned, __uuidof(IAcadDimAligned));
_COM_SMARTPTR_TYPEDEF(IAcadDimAngular, __uuidof(IAcadDimAngular));
_COM_SMARTPTR_TYPEDEF(IAcadDimDiametric, __uuidof(IAcadDimDiametric));
_COM_SMARTPTR_TYPEDEF(IAcadDimRotated, __uuidof(IAcadDimRotated));
_COM_SMARTPTR_TYPEDEF(IAcadDimOrdinate, __uuidof(IAcadDimOrdinate));
_COM_SMARTPTR_TYPEDEF(IAcadDimRadial, __uuidof(IAcadDimRadial));
_COM_SMARTPTR_TYPEDEF(IAcadEllipse, __uuidof(IAcadEllipse));
_COM_SMARTPTR_TYPEDEF(IAcadLeader, __uuidof(IAcadLeader));
_COM_SMARTPTR_TYPEDEF(IAcadMText, __uuidof(IAcadMText));
_COM_SMARTPTR_TYPEDEF(IAcadPoint, __uuidof(IAcadPoint));
_COM_SMARTPTR_TYPEDEF(IAcadLWPolyline, __uuidof(IAcadLWPolyline));
_COM_SMARTPTR_TYPEDEF(IAcadPolyline, __uuidof(IAcadPolyline));
_COM_SMARTPTR_TYPEDEF(IAcadRay, __uuidof(IAcadRay));
_COM_SMARTPTR_TYPEDEF(IAcadShape, __uuidof(IAcadShape));
_COM_SMARTPTR_TYPEDEF(IAcadSolid, __uuidof(IAcadSolid));
_COM_SMARTPTR_TYPEDEF(IAcadSpline, __uuidof(IAcadSpline));
_COM_SMARTPTR_TYPEDEF(IAcadText, __uuidof(IAcadText));
_COM_SMARTPTR_TYPEDEF(IAcadTolerance, __uuidof(IAcadTolerance));
_COM_SMARTPTR_TYPEDEF(IAcadTrace, __uuidof(IAcadTrace));
_COM_SMARTPTR_TYPEDEF(IAcadXline, __uuidof(IAcadXline));
_COM_SMARTPTR_TYPEDEF(IAcadBlockReference, __uuidof(IAcadBlockReference));
_COM_SMARTPTR_TYPEDEF(IAcadHatch, __uuidof(IAcadHatch));
_COM_SMARTPTR_TYPEDEF(IAcadRasterImage, __uuidof(IAcadRasterImage));
_COM_SMARTPTR_TYPEDEF(IAcadLine, __uuidof(IAcadLine));
_COM_SMARTPTR_TYPEDEF(IAcadPlotConfiguration, __uuidof(IAcadPlotConfiguration));
_COM_SMARTPTR_TYPEDEF(IAcadLayout, __uuidof(IAcadLayout));
_COM_SMARTPTR_TYPEDEF(IAcadMInsertBlock, __uuidof(IAcadMInsertBlock));
_COM_SMARTPTR_TYPEDEF(IAcadPolyfaceMesh, __uuidof(IAcadPolyfaceMesh));
_COM_SMARTPTR_TYPEDEF(IAcadMLine, __uuidof(IAcadMLine));
_COM_SMARTPTR_TYPEDEF(IAcadDim3PointAngular, __uuidof(IAcadDim3PointAngular));
_COM_SMARTPTR_TYPEDEF(IAcadExternalReference, __uuidof(IAcadExternalReference));
_COM_SMARTPTR_TYPEDEF(IAcadPaperSpace, __uuidof(IAcadPaperSpace));
_COM_SMARTPTR_TYPEDEF(IAcadPViewport, __uuidof(IAcadPViewport));
_COM_SMARTPTR_TYPEDEF(IAcadBlocks, __uuidof(IAcadBlocks));
_COM_SMARTPTR_TYPEDEF(IAcadGroups, __uuidof(IAcadGroups));
_COM_SMARTPTR_TYPEDEF(IAcadGroup, __uuidof(IAcadGroup));
_COM_SMARTPTR_TYPEDEF(IAcadDimStyles, __uuidof(IAcadDimStyles));
_COM_SMARTPTR_TYPEDEF(IAcadDimStyle, __uuidof(IAcadDimStyle));
_COM_SMARTPTR_TYPEDEF(IAcadLayers, __uuidof(IAcadLayers));
_COM_SMARTPTR_TYPEDEF(IAcadLayer, __uuidof(IAcadLayer));
_COM_SMARTPTR_TYPEDEF(IAcadLineTypes, __uuidof(IAcadLineTypes));
_COM_SMARTPTR_TYPEDEF(IAcadLineType, __uuidof(IAcadLineType));
_COM_SMARTPTR_TYPEDEF(IAcadDictionaries, __uuidof(IAcadDictionaries));
_COM_SMARTPTR_TYPEDEF(IAcadDictionary, __uuidof(IAcadDictionary));
_COM_SMARTPTR_TYPEDEF(IAcadXRecord, __uuidof(IAcadXRecord));
_COM_SMARTPTR_TYPEDEF(IAcadRegisteredApplications, __uuidof(IAcadRegisteredApplications));
_COM_SMARTPTR_TYPEDEF(IAcadRegisteredApplication, __uuidof(IAcadRegisteredApplication));
_COM_SMARTPTR_TYPEDEF(IAcadTextStyles, __uuidof(IAcadTextStyles));
_COM_SMARTPTR_TYPEDEF(IAcadTextStyle, __uuidof(IAcadTextStyle));
_COM_SMARTPTR_TYPEDEF(IAcadUCSs, __uuidof(IAcadUCSs));
_COM_SMARTPTR_TYPEDEF(IAcadUCS, __uuidof(IAcadUCS));
_COM_SMARTPTR_TYPEDEF(IAcadViews, __uuidof(IAcadViews));
_COM_SMARTPTR_TYPEDEF(IAcadView, __uuidof(IAcadView));
_COM_SMARTPTR_TYPEDEF(IAcadViewports, __uuidof(IAcadViewports));
_COM_SMARTPTR_TYPEDEF(IAcadViewport, __uuidof(IAcadViewport));
_COM_SMARTPTR_TYPEDEF(IAcadLayouts, __uuidof(IAcadLayouts));
_COM_SMARTPTR_TYPEDEF(IAcadPlotConfigurations, __uuidof(IAcadPlotConfigurations));
_COM_SMARTPTR_TYPEDEF(IAcadDatabasePreferences, __uuidof(IAcadDatabasePreferences));
_COM_SMARTPTR_TYPEDEF(IAcadFileDependencies, __uuidof(IAcadFileDependencies));
_COM_SMARTPTR_TYPEDEF(IAcadFileDependency, __uuidof(IAcadFileDependency));
_COM_SMARTPTR_TYPEDEF(IAcadSummaryInfo, __uuidof(IAcadSummaryInfo));
_COM_SMARTPTR_TYPEDEF(IAcadObjectEvents, __uuidof(IAcadObjectEvents));
_COM_SMARTPTR_TYPEDEF(IAcadIdPair, __uuidof(IAcadIdPair));
_COM_SMARTPTR_TYPEDEF(IAcadAttributeReference, __uuidof(IAcadAttributeReference));
_COM_SMARTPTR_TYPEDEF(IAcadSecurityParams, __uuidof(IAcadSecurityParams));
_COM_SMARTPTR_TYPEDEF(IAcadLayerStateManager, __uuidof(IAcadLayerStateManager));
_COM_SMARTPTR_TYPEDEF(_DAcadApplicationEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IAcadDocument, __uuidof(IAcadDocument));
_COM_SMARTPTR_TYPEDEF(IAcadPlot, __uuidof(IAcadPlot));
_COM_SMARTPTR_TYPEDEF(IAcadApplication, __uuidof(IAcadApplication));
_COM_SMARTPTR_TYPEDEF(IAcadPreferences, __uuidof(IAcadPreferences));
_COM_SMARTPTR_TYPEDEF(IAcadPreferencesFiles, __uuidof(IAcadPreferencesFiles));
_COM_SMARTPTR_TYPEDEF(IAcadPreferencesDisplay, __uuidof(IAcadPreferencesDisplay));
_COM_SMARTPTR_TYPEDEF(IAcadPreferencesOpenSave, __uuidof(IAcadPreferencesOpenSave));
_COM_SMARTPTR_TYPEDEF(IAcadPreferencesOutput, __uuidof(IAcadPreferencesOutput));
_COM_SMARTPTR_TYPEDEF(IAcadPreferencesSystem, __uuidof(IAcadPreferencesSystem));
_COM_SMARTPTR_TYPEDEF(IAcadPreferencesUser, __uuidof(IAcadPreferencesUser));
_COM_SMARTPTR_TYPEDEF(IAcadPreferencesDrafting, __uuidof(IAcadPreferencesDrafting));
_COM_SMARTPTR_TYPEDEF(IAcadPreferencesSelection, __uuidof(IAcadPreferencesSelection));
_COM_SMARTPTR_TYPEDEF(IAcadPreferencesProfiles, __uuidof(IAcadPreferencesProfiles));
_COM_SMARTPTR_TYPEDEF(IAcadMenuGroups, __uuidof(IAcadMenuGroups));
_COM_SMARTPTR_TYPEDEF(IAcadMenuGroup, __uuidof(IAcadMenuGroup));
_COM_SMARTPTR_TYPEDEF(IAcadPopupMenus, __uuidof(IAcadPopupMenus));
_COM_SMARTPTR_TYPEDEF(IAcadPopupMenu, __uuidof(IAcadPopupMenu));
_COM_SMARTPTR_TYPEDEF(IAcadPopupMenuItem, __uuidof(IAcadPopupMenuItem));
_COM_SMARTPTR_TYPEDEF(IAcadToolbars, __uuidof(IAcadToolbars));
_COM_SMARTPTR_TYPEDEF(IAcadToolbar, __uuidof(IAcadToolbar));
_COM_SMARTPTR_TYPEDEF(IAcadToolbarItem, __uuidof(IAcadToolbarItem));
_COM_SMARTPTR_TYPEDEF(IAcadMenuBar, __uuidof(IAcadMenuBar));
_COM_SMARTPTR_TYPEDEF(IAcadDocuments, __uuidof(IAcadDocuments));
_COM_SMARTPTR_TYPEDEF(IAcadState, __uuidof(IAcadState));
_COM_SMARTPTR_TYPEDEF(IAcadSelectionSets, __uuidof(IAcadSelectionSets));
_COM_SMARTPTR_TYPEDEF(IAcadSelectionSet, __uuidof(IAcadSelectionSet));
_COM_SMARTPTR_TYPEDEF(IAcadUtility, __uuidof(IAcadUtility));
_COM_SMARTPTR_TYPEDEF(_DAcadDocumentEvents, __uuidof(IDispatch));

//
// Type library items
//

enum AcBoolean
{
    acFalse = 0,
    acTrue = 1
};

enum AcOnOff
{
    acOff = 0,
    acOn = 1
};

enum AcEntityName
{
    ac3dFace = 1,
    ac3dPolyline = 2,
    ac3dSolid = 3,
    acArc = 4,
    acAttribute = 5,
    acAttributeReference = 6,
    acBlockReference = 7,
    acCircle = 8,
    acDimAligned = 9,
    acDimAngular = 10,
    acDimDiametric = 12,
    acDimOrdinate = 13,
    acDimRadial = 14,
    acDimRotated = 15,
    acEllipse = 16,
    acHatch = 17,
    acLeader = 18,
    acLine = 19,
    acMtext = 21,
    acPoint = 22,
    acPolyline = 23,
    acPolylineLight = 24,
    acPolymesh = 25,
    acRaster = 26,
    acRay = 27,
    acRegion = 28,
    acShape = 29,
    acSolid = 30,
    acSpline = 31,
    acText = 32,
    acTolerance = 33,
    acTrace = 34,
    acPViewport = 35,
    acXline = 36,
    acGroup = 37,
    acMInsertBlock = 38,
    acPolyfaceMesh = 39,
    acMLine = 40,
    acDim3PointAngular = 41,
    acExternalReference = 42
};

enum AcActiveSpace
{
    acPaperSpace = 0,
    acModelSpace = 1
};

enum AcKeyboardAccelerator
{
    acPreferenceClassic = 0,
    acPreferenceCustom = 1
};

enum AcPlotOrientation
{
    acPlotOrientationPortrait = 0,
    acPlotOrientationLandscape = 1
};

enum AcColor
{
    acByBlock = 0,
    acRed = 1,
    acYellow = 2,
    acGreen = 3,
    acCyan = 4,
    acBlue = 5,
    acMagenta = 6,
    acWhite = 7,
    acByLayer = 256
};

enum AcAttachmentPoint
{
    acAttachmentPointTopLeft = 1,
    acAttachmentPointTopCenter = 2,
    acAttachmentPointTopRight = 3,
    acAttachmentPointMiddleLeft = 4,
    acAttachmentPointMiddleCenter = 5,
    acAttachmentPointMiddleRight = 6,
    acAttachmentPointBottomLeft = 7,
    acAttachmentPointBottomCenter = 8,
    acAttachmentPointBottomRight = 9
};

enum AcDrawingDirection
{
    acLeftToRight = 1,
    acRightToLeft = 2,
    acTopToBottom = 3,
    acBottomToTop = 4,
    acByStyle = 5
};

enum AcLeaderType
{
    acLineNoArrow = 0,
    acSplineNoArrow = 1,
    acLineWithArrow = 2,
    acSplineWithArrow = 3
};

enum AcAttributeMode
{
    acAttributeModeNormal = 0,
    acAttributeModeInvisible = 1,
    acAttributeModeConstant = 2,
    acAttributeModeVerify = 4,
    acAttributeModePreset = 8
};

enum AcHorizontalAlignment
{
    acHorizontalAlignmentLeft = 0,
    acHorizontalAlignmentCenter = 1,
    acHorizontalAlignmentRight = 2,
    acHorizontalAlignmentAligned = 3,
    acHorizontalAlignmentMiddle = 4,
    acHorizontalAlignmentFit = 5
};

enum AcVerticalAlignment
{
    acVerticalAlignmentBaseline = 0,
    acVerticalAlignmentBottom = 1,
    acVerticalAlignmentMiddle = 2,
    acVerticalAlignmentTop = 3
};

enum AcTextGenerationFlag
{
    acTextFlagBackward = 2,
    acTextFlagUpsideDown = 4
};

enum AcSelect
{
    acSelectionSetWindow = 0,
    acSelectionSetCrossing = 1,
    acSelectionSetFence = 2,
    acSelectionSetPrevious = 3,
    acSelectionSetLast = 4,
    acSelectionSetAll = 5,
    acSelectionSetWindowPolygon = 6,
    acSelectionSetCrossingPolygon = 7
};

enum AcPatternType
{
    acHatchPatternTypeUserDefined = 0,
    acHatchPatternTypePreDefined = 1,
    acHatchPatternTypeCustomDefined = 2
};

enum AcLoopType
{
    acHatchLoopTypeDefault = 0,
    acHatchLoopTypeExternal = 1,
    acHatchLoopTypePolyline = 2,
    acHatchLoopTypeDerived = 4,
    acHatchLoopTypeTextbox = 8
};

enum AcHatchStyle
{
    acHatchStyleNormal = 0,
    acHatchStyleOuter = 1,
    acHatchStyleIgnore = 2
};

enum AcPolylineType
{
    acSimplePoly = 0,
    acFitCurvePoly = 1,
    acQuadSplinePoly = 2,
    acCubicSplinePoly = 3
};

enum Ac3DPolylineType
{
    acSimple3DPoly = 0,
    acQuadSpline3DPoly = 1,
    acCubicSpline3DPoly = 2
};

enum AcViewportSplitType
{
    acViewport2Horizontal = 0,
    acViewport2Vertical = 1,
    acViewport3Left = 2,
    acViewport3Right = 3,
    acViewport3Horizontal = 4,
    acViewport3Vertical = 5,
    acViewport3Above = 6,
    acViewport3Below = 7,
    acViewport4 = 8
};

enum AcRegenType
{
    acActiveViewport = 0,
    acAllViewports = 1
};

enum AcBooleanType
{
    acUnion = 0,
    acIntersection = 1,
    acSubtraction = 2
};

enum AcExtendOption
{
    acExtendNone = 0,
    acExtendThisEntity = 1,
    acExtendOtherEntity = 2,
    acExtendBoth = 3
};

enum AcAngleUnits
{
    acDegrees = 0,
    acDegreeMinuteSeconds = 1,
    acGrads = 2,
    acRadians = 3
};

enum AcUnits
{
    acDefaultUnits = -1,
    acScientific = 1,
    acDecimal = 2,
    acEngineering = 3,
    acArchitectural = 4,
    acFractional = 5
};

enum AcCoordinateSystem
{
    acWorld = 0,
    acUCS = 1,
    acDisplayDCS = 2,
    acPaperSpaceDCS = 3,
    acOCS = 4
};

enum AcMeasurementUnits
{
    acEnglish = 0,
    acMetric = 1
};

enum AcXRefDemandLoad
{
    acDemandLoadDisabled = 0,
    acDemandLoadEnabled = 1,
    acDemandLoadEnabledWithCopy = 2
};

enum AcPreviewMode
{
    acPartialPreview = 0,
    acFullPreview = 1
};

enum AcPolymeshType
{
    acSimpleMesh = 0,
    acQuadSurfaceMesh = 5,
    acCubicSurfaceMesh = 6,
    acBezierSurfaceMesh = 8
};

enum AcZoomScaleType
{
    acZoomScaledAbsolute = 0,
    acZoomScaledRelative = 1,
    acZoomScaledRelativePSpace = 2
};

enum AcDragDisplayMode
{
    acDragDoNotDisplay = 0,
    acDragDisplayOnRequest = 1,
    acDragDisplayAutomatically = 2
};

enum AcARXDemandLoad
{
    acDemanLoadDisable = 0,
    acDemandLoadOnObjectDetect = 1,
    acDemandLoadCmdInvoke = 2
};

enum AcTextFontStyle
{
    acFontRegular = 0,
    acFontItalic = 1,
    acFontBold = 2,
    acFontBoldItalic = 3
};

enum AcProxyImage
{
    acProxyNotShow = 0,
    acProxyShow = 1,
    acProxyBoundingBox = 2
};

enum AcKeyboardPriority
{
    acKeyboardRunningObjSnap = 0,
    acKeyboardEntry = 1,
    acKeyboardEntryExceptScripts = 2
};

enum AcMenuGroupType
{
    acBaseMenuGroup = 0,
    acPartialMenuGroup = 1
};

enum AcMenuFileType
{
    acMenuFileCompiled = 0,
    acMenuFileSource = 1
};

enum AcMenuItemType
{
    acMenuItem = 0,
    acMenuSeparator = 1,
    acMenuSubMenu = 2
};

enum AcToolbarItemType
{
    acToolbarButton = 0,
    acToolbarSeparator = 1,
    acToolbarControl = 2,
    acToolbarFlyout = 3
};

enum AcToolbarDockStatus
{
    acToolbarDockTop = 0,
    acToolbarDockBottom = 1,
    acToolbarDockLeft = 2,
    acToolbarDockRight = 3,
    acToolbarFloating = 4
};

enum AcLineWeight
{
    acLnWt000 = 0,
    acLnWt005 = 5,
    acLnWt009 = 9,
    acLnWt013 = 13,
    acLnWt015 = 15,
    acLnWt018 = 18,
    acLnWt020 = 20,
    acLnWt025 = 25,
    acLnWt030 = 30,
    acLnWt035 = 35,
    acLnWt040 = 40,
    acLnWt050 = 50,
    acLnWt053 = 53,
    acLnWt060 = 60,
    acLnWt070 = 70,
    acLnWt080 = 80,
    acLnWt090 = 90,
    acLnWt100 = 100,
    acLnWt106 = 106,
    acLnWt120 = 120,
    acLnWt140 = 140,
    acLnWt158 = 158,
    acLnWt200 = 200,
    acLnWt211 = 211,
    acLnWtByLayer = -1,
    acLnWtByBlock = -2,
    acLnWtByLwDefault = -3
};

enum AcWindowState
{
    acNorm = 1,
    acMin = 2,
    acMax = 3
};

enum AcPlotPaperUnits
{
    acInches = 0,
    acMillimeters = 1,
    acPixels = 2
};

enum AcPlotRotation
{
    ac0degrees = 0,
    ac90degrees = 1,
    ac180degrees = 2,
    ac270degrees = 3
};

enum AcPlotType
{
    acDisplay = 0,
    acExtents = 1,
    acLimits = 2,
    acView = 3,
    acWindow = 4,
    acLayout = 5
};

enum AcPlotScale
{
    acScaleToFit = 0,
    ac1_128in_1ft = 1,
    ac1_64in_1ft = 2,
    ac1_32in_1ft = 3,
    ac1_16in_1ft = 4,
    ac3_32in_1ft = 5,
    ac1_8in_1ft = 6,
    ac3_16in_1ft = 7,
    ac1_4in_1ft = 8,
    ac3_8in_1ft = 9,
    ac1_2in_1ft = 10,
    ac3_4in_1ft = 11,
    ac1in_1ft = 12,
    ac3in_1ft = 13,
    ac6in_1ft = 14,
    ac1ft_1ft = 15,
    ac1_1 = 16,
    ac1_2 = 17,
    ac1_4 = 18,
    ac1_8 = 19,
    ac1_10 = 20,
    ac1_16 = 21,
    ac1_20 = 22,
    ac1_30 = 23,
    ac1_40 = 24,
    ac1_50 = 25,
    ac1_100 = 26,
    ac2_1 = 27,
    ac4_1 = 28,
    ac8_1 = 29,
    ac10_1 = 30,
    ac100_1 = 31
};

enum AcAlignment
{
    acAlignmentLeft = 0,
    acAlignmentCenter = 1,
    acAlignmentRight = 2,
    acAlignmentAligned = 3,
    acAlignmentMiddle = 4,
    acAlignmentFit = 5,
    acAlignmentTopLeft = 6,
    acAlignmentTopCenter = 7,
    acAlignmentTopRight = 8,
    acAlignmentMiddleLeft = 9,
    acAlignmentMiddleCenter = 10,
    acAlignmentMiddleRight = 11,
    acAlignmentBottomLeft = 12,
    acAlignmentBottomCenter = 13,
    acAlignmentBottomRight = 14
};

enum AcLineSpacingStyle
{
    acLineSpacingStyleAtLeast = 1,
    acLineSpacingStyleExactly = 2
};

enum AcDimPrecision
{
    acDimPrecisionZero = 0,
    acDimPrecisionOne = 1,
    acDimPrecisionTwo = 2,
    acDimPrecisionThree = 3,
    acDimPrecisionFour = 4,
    acDimPrecisionFive = 5,
    acDimPrecisionSix = 6,
    acDimPrecisionSeven = 7,
    acDimPrecisionEight = 8
};

enum AcDimUnits
{
    acDimScientific = 1,
    acDimDecimal = 2,
    acDimEngineering = 3,
    acDimArchitecturalStacked = 4,
    acDimFractionalStacked = 5,
    acDimArchitectural = 6,
    acDimFractional = 7,
    acDimWindowsDesktop = 8
};

enum AcDimLUnits
{
    acDimLScientific = 1,
    acDimLDecimal = 2,
    acDimLEngineering = 3,
    acDimLArchitectural = 4,
    acDimLFractional = 5,
    acDimLWindowsDesktop = 6
};

enum AcDimArrowheadType
{
    acArrowDefault = 0,
    acArrowClosedBlank = 1,
    acArrowClosed = 2,
    acArrowDot = 3,
    acArrowArchTick = 4,
    acArrowOblique = 5,
    acArrowOpen = 6,
    acArrowOrigin = 7,
    acArrowOrigin2 = 8,
    acArrowOpen90 = 9,
    acArrowOpen30 = 10,
    acArrowDotSmall = 11,
    acArrowDotBlank = 12,
    acArrowSmall = 13,
    acArrowBoxBlank = 14,
    acArrowBoxFilled = 15,
    acArrowDatumBlank = 16,
    acArrowDatumFilled = 17,
    acArrowIntegral = 18,
    acArrowNone = 19,
    acArrowUserDefined = 20
};

enum AcDimCenterType
{
    acCenterMark = 0,
    acCenterLine = 1,
    acCenterNone = 2
};

enum AcDimFit
{
    acTextAndArrows = 0,
    acArrowsOnly = 1,
    acTextOnly = 2,
    acBestFit = 3
};

enum AcDimFractionType
{
    acHorizontal = 0,
    acDiagonal = 1,
    acNotStacked = 2
};

enum AcDimHorizontalJustification
{
    acHorzCentered = 0,
    acFirstExtensionLine = 1,
    acSecondExtensionLine = 2,
    acOverFirstExtension = 3,
    acOverSecondExtension = 4
};

enum AcDimVerticalJustification
{
    acVertCentered = 0,
    acAbove = 1,
    acOutside = 2,
    acJIS = 3
};

enum AcDimTextMovement
{
    acDimLineWithText = 0,
    acMoveTextAddLeader = 1,
    acMoveTextNoLeader = 2
};

enum AcDimToleranceMethod
{
    acTolNone = 0,
    acTolSymmetrical = 1,
    acTolDeviation = 2,
    acTolLimits = 3,
    acTolBasic = 4
};

enum AcDimToleranceJustify
{
    acTolBottom = 0,
    acTolMiddle = 1,
    acTolTop = 2
};

enum AcViewportScale
{
    acVpScaleToFit = 0,
    acVpCustomScale = 1,
    acVp1_1 = 2,
    acVp1_2 = 3,
    acVp1_4 = 4,
    acVp1_8 = 5,
    acVp1_10 = 6,
    acVp1_16 = 7,
    acVp1_20 = 8,
    acVp1_30 = 9,
    acVp1_40 = 10,
    acVp1_50 = 11,
    acVp1_100 = 12,
    acVp2_1 = 13,
    acVp4_1 = 14,
    acVp8_1 = 15,
    acVp10_1 = 16,
    acVp100_1 = 17,
    acVp1_128in_1ft = 18,
    acVp1_64in_1ft = 19,
    acVp1_32in_1ft = 20,
    acVp1_16in_1ft = 21,
    acVp3_32in_1ft = 22,
    acVp1_8in_1ft = 23,
    acVp3_16in_1ft = 24,
    acVp1_4in_1ft = 25,
    acVp3_8in_1ft = 26,
    acVp1_2in_1ft = 27,
    acVp3_4in_1ft = 28,
    acVp1in_1ft = 29,
    acVp1and1_2in_1ft = 30,
    acVp3in_1ft = 31,
    acVp6in_1ft = 32,
    acVp1ft_1ft = 33
};

enum AcISOPenWidth
{
    acPenWidth013 = 13,
    acPenWidth018 = 18,
    acPenWidth025 = 25,
    acPenWidth035 = 35,
    acPenWidth050 = 50,
    acPenWidth070 = 70,
    acPenWidth100 = 100,
    acPenWidth140 = 140,
    acPenWidth200 = 200,
    acPenWidthUnk = -1
};

enum AcSaveAsType
{
    acUnknown = -1,
    acR12_dxf = 1,
    acR13_dwg = 4,
    acR13_dxf = 5,
    acR14_dwg = 8,
    acR14_dxf = 9,
    ac2000_dwg = 12,
    ac2000_dxf = 13,
    ac2000_Template = 14,
    ac2004_dwg = 24,
    ac2004_dxf = 25,
    ac2004_Template = 26,
    acNative = 24,
    acR15_dwg = 12,
    acR15_dxf = 13,
    acR15_Template = 14,
    acR18_dwg = 24,
    acR18_dxf = 25,
    acR18_Template = 26
};

enum AcPrinterSpoolAlert
{
    acPrinterAlwaysAlert = 0,
    acPrinterAlertOnce = 1,
    acPrinterNeverAlertLogOnce = 2,
    acPrinterNeverAlert = 3
};

enum AcPlotPolicyForNewDwgs
{
    acPolicyNewDefault = 0,
    acPolicyNewLegacy = 1
};

enum AcPlotPolicyForLegacyDwgs
{
    acPolicyLegacyDefault = 0,
    acPolicyLegacyQuery = 1,
    acPolicyLegacyLegacy = 2
};

enum AcOleQuality
{
    acOQLineArt = 0,
    acOQText = 1,
    acOQGraphics = 2,
    acOQPhoto = 3,
    acOQHighPhoto = 4
};

enum AcLoadPalette
{
    acPaletteByDrawing = 0,
    acPaletteBySession = 1
};

enum AcInsertUnits
{
    acInsertUnitsUnitless = 0,
    acInsertUnitsInches = 1,
    acInsertUnitsFeet = 2,
    acInsertUnitsMiles = 3,
    acInsertUnitsMillimeters = 4,
    acInsertUnitsCentimeters = 5,
    acInsertUnitsMeters = 6,
    acInsertUnitsKilometers = 7,
    acInsertUnitsMicroinches = 8,
    acInsertUnitsMils = 9,
    acInsertUnitsYards = 10,
    acInsertUnitsAngstroms = 11,
    acInsertUnitsNanometers = 12,
    acInsertUnitsMicrons = 13,
    acInsertUnitsDecimeters = 14,
    acInsertUnitsDecameters = 15,
    acInsertUnitsHectometers = 16,
    acInsertUnitsGigameters = 17,
    acInsertUnitsAstronomicalUnits = 18,
    acInsertUnitsLightYears = 19,
    acInsertUnitsParsecs = 20
};

enum AcAlignmentPointAcquisition
{
    acAlignPntAcquisitionAutomatic = 0,
    acAlignPntAcquisitionShiftToAcquire = 1
};

enum AcInsertUnitsAction
{
    acInsertUnitsPrompt = 0,
    acInsertUnitsAutoAssign = 1
};

enum AcPlotPolicy
{
    acPolicyNamed = 0,
    acPolicyLegacy = 1
};

enum AcDrawingAreaShortCutMenu
{
    acNoDrawingAreaShortCutMenu = 0,
    acUseDefaultDrawingAreaShortCutMenu = 1
};

enum AcDrawingAreaSCMDefault
{
    acRepeatLastCommand = 0,
    acSCM = 1
};

enum AcDrawingAreaSCMEdit
{
    acEdRepeatLastCommand = 0,
    acEdSCM = 1
};

enum AcDrawingAreaSCMCommand
{
    acEnter = 0,
    acEnableSCMOptions = 1,
    acEnableSCM = 2
};

enum AcLayerStateMask
{
    acLsNone = 0,
    acLsOn = 1,
    acLsFrozen = 2,
    acLsLocked = 4,
    acLsPlot = 8,
    acLsNewViewport = 16,
    acLsColor = 32,
    acLsLineType = 64,
    acLsLineWeight = 128,
    acLsPlotStyle = 256,
    acLsAll = 65535
};

enum AcShadePlot
{
    acShadePlotAsDisplayed = 0,
    acShadePlotWireframe = 1,
    acShadePlotHidden = 2,
    acShadePlotRendered = 3
};

enum AcHatchObjectType
{
    acHatchObject = 0,
    acGradientObject = 1
};

enum AcGradientPatternType
{
    acPreDefinedGradient = 0,
    acUserDefinedGradient = 1
};

struct __declspec(uuid("b205d354-37a2-4159-af10-04542461582c"))
IAcadObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHandle))
    _bstr_t Handle;
    __declspec(property(get=GetObjectName))
    _bstr_t ObjectName;
    __declspec(property(get=GetObjectID))
    long ObjectID;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetDatabase))
    IAcadDatabasePtr Database;
    __declspec(property(get=GetHasExtensionDictionary))
    VARIANT_BOOL HasExtensionDictionary;
    __declspec(property(get=GetOwnerID))
    long OwnerID;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHandle ( );
    _bstr_t GetObjectName ( );
    HRESULT GetXData (
        _bstr_t AppName,
        VARIANT * XDataType,
        VARIANT * XDataValue );
    HRESULT SetXData (
        const _variant_t & XDataType,
        const _variant_t & XDataValue );
    HRESULT Delete ( );
    long GetObjectID ( );
    IDispatchPtr GetApplication ( );
    IAcadDatabasePtr GetDatabase ( );
    VARIANT_BOOL GetHasExtensionDictionary ( );
    IAcadDictionaryPtr GetExtensionDictionary ( );
    long GetOwnerID ( );
    IDispatchPtr GetDocument ( );
    HRESULT Erase ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Handle (
        BSTR * Handle ) = 0;
    virtual HRESULT __stdcall get_ObjectName (
        BSTR * ObjectName ) = 0;
    virtual HRESULT __stdcall raw_GetXData (
        BSTR AppName,
        VARIANT * XDataType,
        VARIANT * XDataValue ) = 0;
    virtual HRESULT __stdcall raw_SetXData (
        VARIANT XDataType,
        VARIANT XDataValue ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_ObjectID (
        long * ObjectID ) = 0;
    virtual HRESULT __stdcall get_Application (
        IDispatch * * ApplicationObject ) = 0;
    virtual HRESULT __stdcall get_Database (
        struct IAcadDatabase * * pDatabase ) = 0;
    virtual HRESULT __stdcall get_HasExtensionDictionary (
        VARIANT_BOOL * bHasDictionary ) = 0;
    virtual HRESULT __stdcall raw_GetExtensionDictionary (
        struct IAcadDictionary * * pExtDictionary ) = 0;
    virtual HRESULT __stdcall get_OwnerID (
        long * OwnerID ) = 0;
    virtual HRESULT __stdcall get_Document (
        IDispatch * * pDocument ) = 0;
    virtual HRESULT __stdcall raw_Erase ( ) = 0;
};

struct __declspec(uuid("f4493535-029c-4c51-8b88-7f62b42d9fb3"))
IAcadDatabase : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModelSpace))
    IAcadModelSpacePtr ModelSpace;
    __declspec(property(get=GetPaperSpace))
    IAcadPaperSpacePtr PaperSpace;
    __declspec(property(get=GetBlocks))
    IAcadBlocksPtr Blocks;
    __declspec(property(get=GetGroups))
    IAcadGroupsPtr Groups;
    __declspec(property(get=GetDimStyles))
    IAcadDimStylesPtr DimStyles;
    __declspec(property(get=GetLayers))
    IAcadLayersPtr Layers;
    __declspec(property(get=GetLinetypes))
    IAcadLineTypesPtr Linetypes;
    __declspec(property(get=GetDictionaries))
    IAcadDictionariesPtr Dictionaries;
    __declspec(property(get=GetRegisteredApplications))
    IAcadRegisteredApplicationsPtr RegisteredApplications;
    __declspec(property(get=GetTextStyles))
    IAcadTextStylesPtr TextStyles;
    __declspec(property(get=GetUserCoordinateSystems))
    IAcadUCSsPtr UserCoordinateSystems;
    __declspec(property(get=GetViews))
    IAcadViewsPtr Views;
    __declspec(property(get=GetViewports))
    IAcadViewportsPtr Viewports;
    __declspec(property(get=GetElevationModelSpace,put=PutElevationModelSpace))
    double ElevationModelSpace;
    __declspec(property(get=GetElevationPaperSpace,put=PutElevationPaperSpace))
    double ElevationPaperSpace;
    __declspec(property(get=GetLimits,put=PutLimits))
    _variant_t Limits;
    __declspec(property(get=GetFileDependencies))
    IAcadFileDependenciesPtr FileDependencies;
    __declspec(property(get=GetSummaryInfo))
    IAcadSummaryInfoPtr SummaryInfo;
    __declspec(property(get=GetLayouts))
    IAcadLayoutsPtr Layouts;
    __declspec(property(get=GetPlotConfigurations))
    IAcadPlotConfigurationsPtr PlotConfigurations;
    __declspec(property(get=GetPreferences))
    IAcadDatabasePreferencesPtr Preferences;

    //
    // Wrapper methods for error-handling
    //

    IAcadModelSpacePtr GetModelSpace ( );
    IAcadPaperSpacePtr GetPaperSpace ( );
    IAcadBlocksPtr GetBlocks ( );
    _variant_t CopyObjects (
        const _variant_t & Objects,
        const _variant_t & Owner,
        VARIANT * IdPairs );
    IAcadGroupsPtr GetGroups ( );
    IAcadDimStylesPtr GetDimStyles ( );
    IAcadLayersPtr GetLayers ( );
    IAcadLineTypesPtr GetLinetypes ( );
    IAcadDictionariesPtr GetDictionaries ( );
    IAcadRegisteredApplicationsPtr GetRegisteredApplications ( );
    IAcadTextStylesPtr GetTextStyles ( );
    IAcadUCSsPtr GetUserCoordinateSystems ( );
    IAcadViewsPtr GetViews ( );
    IAcadViewportsPtr GetViewports ( );
    double GetElevationModelSpace ( );
    void PutElevationModelSpace (
        double Elevation );
    double GetElevationPaperSpace ( );
    void PutElevationPaperSpace (
        double Elevation );
    _variant_t GetLimits ( );
    void PutLimits (
        const _variant_t & Limits );
    IDispatchPtr HandleToObject (
        _bstr_t Handle );
    IDispatchPtr ObjectIdToObject (
        long ObjectID );
    IAcadLayoutsPtr GetLayouts ( );
    IAcadPlotConfigurationsPtr GetPlotConfigurations ( );
    IAcadDatabasePreferencesPtr GetPreferences ( );
    IAcadFileDependenciesPtr GetFileDependencies ( );
    IAcadSummaryInfoPtr GetSummaryInfo ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ModelSpace (
        struct IAcadModelSpace * * pMSpace ) = 0;
    virtual HRESULT __stdcall get_PaperSpace (
        struct IAcadPaperSpace * * pPSpace ) = 0;
    virtual HRESULT __stdcall get_Blocks (
        struct IAcadBlocks * * pBlocks ) = 0;
    virtual HRESULT __stdcall raw_CopyObjects (
        VARIANT Objects,
        VARIANT Owner,
        VARIANT * IdPairs,
        VARIANT * pNewObjects ) = 0;
    virtual HRESULT __stdcall get_Groups (
        struct IAcadGroups * * pGroups ) = 0;
    virtual HRESULT __stdcall get_DimStyles (
        struct IAcadDimStyles * * pDimStyles ) = 0;
    virtual HRESULT __stdcall get_Layers (
        struct IAcadLayers * * pLayers ) = 0;
    virtual HRESULT __stdcall get_Linetypes (
        struct IAcadLineTypes * * pLinetypes ) = 0;
    virtual HRESULT __stdcall get_Dictionaries (
        struct IAcadDictionaries * * pDictionaries ) = 0;
    virtual HRESULT __stdcall get_RegisteredApplications (
        struct IAcadRegisteredApplications * * pRegApps ) = 0;
    virtual HRESULT __stdcall get_TextStyles (
        struct IAcadTextStyles * * pTextStyles ) = 0;
    virtual HRESULT __stdcall get_UserCoordinateSystems (
        struct IAcadUCSs * * pUCSs ) = 0;
    virtual HRESULT __stdcall get_Views (
        struct IAcadViews * * pViews ) = 0;
    virtual HRESULT __stdcall get_Viewports (
        struct IAcadViewports * * pViewports ) = 0;
    virtual HRESULT __stdcall get_ElevationModelSpace (
        double * Elevation ) = 0;
    virtual HRESULT __stdcall put_ElevationModelSpace (
        double Elevation ) = 0;
    virtual HRESULT __stdcall get_ElevationPaperSpace (
        double * Elevation ) = 0;
    virtual HRESULT __stdcall put_ElevationPaperSpace (
        double Elevation ) = 0;
    virtual HRESULT __stdcall get_Limits (
        VARIANT * Limits ) = 0;
    virtual HRESULT __stdcall put_Limits (
        VARIANT Limits ) = 0;
    virtual HRESULT __stdcall raw_HandleToObject (
        BSTR Handle,
        IDispatch * * pObj ) = 0;
    virtual HRESULT __stdcall raw_ObjectIdToObject (
        long ObjectID,
        IDispatch * * pObj ) = 0;
    virtual HRESULT __stdcall get_Layouts (
        struct IAcadLayouts * * pLayouts ) = 0;
    virtual HRESULT __stdcall get_PlotConfigurations (
        struct IAcadPlotConfigurations * * pPlotConfigs ) = 0;
    virtual HRESULT __stdcall get_Preferences (
        struct IAcadDatabasePreferences * * pPref ) = 0;
    virtual HRESULT __stdcall get_FileDependencies (
        struct IAcadFileDependencies * * pFDM ) = 0;
    virtual HRESULT __stdcall get_SummaryInfo (
        struct IAcadSummaryInfo * * pSummaryInfo ) = 0;
};

struct __declspec(uuid("d4262ce6-325f-48f0-83b2-ed2a461dfa3f"))
IAcadBlock : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    _variant_t Origin;
    __declspec(property(get=GetIsLayout))
    VARIANT_BOOL IsLayout;
    __declspec(property(get=GetLayout))
    IAcadLayoutPtr Layout;
    __declspec(property(get=GetIsXRef))
    VARIANT_BOOL IsXRef;
    __declspec(property(get=GetXRefDatabase))
    IAcadDatabasePtr XRefDatabase;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadEntityPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    _variant_t GetOrigin ( );
    void PutOrigin (
        const _variant_t & Origin );
    IDispatchPtr AddCustomObject (
        _bstr_t ClassName );
    IAcad3DFacePtr Add3DFace (
        const _variant_t & Point1,
        const _variant_t & Point2,
        const _variant_t & point3,
        const _variant_t & Point4 );
    IAcadPolygonMeshPtr Add3DMesh (
        int M,
        int N,
        const _variant_t & PointsMatrix );
    IAcad3DPolylinePtr Add3DPoly (
        const _variant_t & PointsArray );
    IAcadArcPtr AddArc (
        const _variant_t & Center,
        double Radius,
        double StartAngle,
        double EndAngle );
    IAcadAttributePtr AddAttribute (
        double Height,
        enum AcAttributeMode Mode,
        _bstr_t Prompt,
        const _variant_t & InsertionPoint,
        _bstr_t Tag,
        _bstr_t Value );
    IAcad3DSolidPtr AddBox (
        const _variant_t & Origin,
        double Length,
        double Width,
        double Height );
    IAcadCirclePtr AddCircle (
        const _variant_t & Center,
        double Radius );
    IAcad3DSolidPtr AddCone (
        const _variant_t & Center,
        double BaseRadius,
        double Height );
    IAcad3DSolidPtr AddCylinder (
        const _variant_t & Center,
        double Radius,
        double Height );
    IAcadDimAlignedPtr AddDimAligned (
        const _variant_t & ExtLine1Point,
        const _variant_t & ExtLine2Point,
        const _variant_t & TextPosition );
    IAcadDimAngularPtr AddDimAngular (
        const _variant_t & AngleVertex,
        const _variant_t & FirstEndPoint,
        const _variant_t & SecondEndPoint,
        const _variant_t & TextPoint );
    IAcadDimDiametricPtr AddDimDiametric (
        const _variant_t & ChordPoint,
        const _variant_t & FarChordPoint,
        double LeaderLength );
    IAcadDimRotatedPtr AddDimRotated (
        const _variant_t & ExtLine1Point,
        const _variant_t & ExtLine2Point,
        const _variant_t & DimLineLocation,
        double RotationAngle );
    IAcadDimOrdinatePtr AddDimOrdinate (
        const _variant_t & DefinitionPoint,
        const _variant_t & LeaderEndPoint,
        int UseXAxis );
    IAcadDimRadialPtr AddDimRadial (
        const _variant_t & Center,
        const _variant_t & ChordPoint,
        double LeaderLength );
    IAcadEllipsePtr AddEllipse (
        const _variant_t & Center,
        const _variant_t & MajorAxis,
        double RadiusRatio );
    IAcad3DSolidPtr AddEllipticalCone (
        const _variant_t & Center,
        double MajorRadius,
        double MinorRadius,
        double Height );
    IAcad3DSolidPtr AddEllipticalCylinder (
        const _variant_t & Center,
        double MajorRadius,
        double MinorRadius,
        double Height );
    IAcad3DSolidPtr AddExtrudedSolid (
        struct IAcadRegion * Profile,
        double Height,
        double TaperAngle );
    IAcad3DSolidPtr AddExtrudedSolidAlongPath (
        struct IAcadRegion * Profile,
        IDispatch * Path );
    IAcadLeaderPtr AddLeader (
        const _variant_t & PointsArray,
        struct IAcadEntity * Annotation,
        enum AcLeaderType Type );
    IAcadMTextPtr AddMText (
        const _variant_t & InsertionPoint,
        double Width,
        _bstr_t Text );
    IAcadPointPtr AddPoint (
        const _variant_t & Point );
    IAcadLWPolylinePtr AddLightWeightPolyline (
        const _variant_t & VerticesList );
    IAcadPolylinePtr AddPolyline (
        const _variant_t & VerticesList );
    IAcadRayPtr AddRay (
        const _variant_t & Point1,
        const _variant_t & Point2 );
    _variant_t AddRegion (
        const _variant_t & ObjectList );
    IAcad3DSolidPtr AddRevolvedSolid (
        struct IAcadRegion * Profile,
        const _variant_t & AxisPoint,
        const _variant_t & AxisDir,
        double Angle );
    IAcadShapePtr AddShape (
        _bstr_t Name,
        const _variant_t & InsertionPoint,
        double ScaleFactor,
        double RotationAngle );
    IAcadSolidPtr AddSolid (
        const _variant_t & Point1,
        const _variant_t & Point2,
        const _variant_t & point3,
        const _variant_t & Point4 );
    IAcad3DSolidPtr AddSphere (
        const _variant_t & Center,
        double Radius );
    IAcadSplinePtr AddSpline (
        const _variant_t & PointsArray,
        const _variant_t & StartTangent,
        const _variant_t & EndTangent );
    IAcadTextPtr AddText (
        _bstr_t TextString,
        const _variant_t & InsertionPoint,
        double Height );
    IAcadTolerancePtr AddTolerance (
        _bstr_t Text,
        const _variant_t & InsertionPoint,
        const _variant_t & Direction );
    IAcad3DSolidPtr AddTorus (
        const _variant_t & Center,
        double TorusRadius,
        double TubeRadius );
    IAcadTracePtr AddTrace (
        const _variant_t & PointsArray );
    IAcad3DSolidPtr AddWedge (
        const _variant_t & Center,
        double Length,
        double Width,
        double Height );
    IAcadXlinePtr AddXline (
        const _variant_t & Point1,
        const _variant_t & Point2 );
    IAcadBlockReferencePtr InsertBlock (
        const _variant_t & InsertionPoint,
        _bstr_t Name,
        double Xscale,
        double Yscale,
        double Zscale,
        double Rotation,
        const _variant_t & Password = vtMissing );
    IAcadHatchPtr AddHatch (
        int PatternType,
        _bstr_t PatternName,
        VARIANT_BOOL Associativity,
        const _variant_t & HatchObjectType = vtMissing );
    IAcadRasterImagePtr AddRaster (
        _bstr_t imageFileName,
        const _variant_t & InsertionPoint,
        double ScaleFactor,
        double RotationAngle );
    IAcadLinePtr AddLine (
        const _variant_t & StartPoint,
        const _variant_t & EndPoint );
    VARIANT_BOOL GetIsLayout ( );
    IAcadLayoutPtr GetLayout ( );
    VARIANT_BOOL GetIsXRef ( );
    IAcadMInsertBlockPtr AddMInsertBlock (
        const _variant_t & InsertionPoint,
        _bstr_t Name,
        double Xscale,
        double Yscale,
        double Zscale,
        double Rotation,
        long NumRows,
        long NumColumns,
        long RowSpacing,
        long ColumnSpacing,
        const _variant_t & Password = vtMissing );
    IAcadPolyfaceMeshPtr AddPolyfaceMesh (
        const _variant_t & VertexList,
        const _variant_t & FaceList );
    IAcadMLinePtr AddMLine (
        const _variant_t & VertexList );
    IAcadDim3PointAngularPtr AddDim3PointAngular (
        const _variant_t & AngleVertex,
        const _variant_t & FirstEndPoint,
        const _variant_t & SecondEndPoint,
        const _variant_t & TextPoint );
    IAcadDatabasePtr GetXRefDatabase ( );
    IAcadExternalReferencePtr AttachExternalReference (
        _bstr_t PathName,
        _bstr_t Name,
        const _variant_t & InsertionPoint,
        double Xscale,
        double Yscale,
        double Zscale,
        double Rotation,
        VARIANT_BOOL bOverlay,
        const _variant_t & Password = vtMissing );
    HRESULT Unload ( );
    HRESULT Reload ( );
    HRESULT Bind (
        VARIANT_BOOL bPrefixName );
    HRESULT Detach ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadEntity * * pItem ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR bstrName ) = 0;
    virtual HRESULT __stdcall get_Origin (
        VARIANT * Origin ) = 0;
    virtual HRESULT __stdcall put_Origin (
        VARIANT Origin ) = 0;
    virtual HRESULT __stdcall raw_AddCustomObject (
        BSTR ClassName,
        IDispatch * * pObject ) = 0;
    virtual HRESULT __stdcall raw_Add3DFace (
        VARIANT Point1,
        VARIANT Point2,
        VARIANT point3,
        VARIANT Point4,
        struct IAcad3DFace * * pFace3d ) = 0;
    virtual HRESULT __stdcall raw_Add3DMesh (
        int M,
        int N,
        VARIANT PointsMatrix,
        struct IAcadPolygonMesh * * pMesh3d ) = 0;
    virtual HRESULT __stdcall raw_Add3DPoly (
        VARIANT PointsArray,
        struct IAcad3DPolyline * * pPoly3d ) = 0;
    virtual HRESULT __stdcall raw_AddArc (
        VARIANT Center,
        double Radius,
        double StartAngle,
        double EndAngle,
        struct IAcadArc * * pArc ) = 0;
    virtual HRESULT __stdcall raw_AddAttribute (
        double Height,
        enum AcAttributeMode Mode,
        BSTR Prompt,
        VARIANT InsertionPoint,
        BSTR Tag,
        BSTR Value,
        struct IAcadAttribute * * pAttr ) = 0;
    virtual HRESULT __stdcall raw_AddBox (
        VARIANT Origin,
        double Length,
        double Width,
        double Height,
        struct IAcad3DSolid * * pBox ) = 0;
    virtual HRESULT __stdcall raw_AddCircle (
        VARIANT Center,
        double Radius,
        struct IAcadCircle * * pCircle ) = 0;
    virtual HRESULT __stdcall raw_AddCone (
        VARIANT Center,
        double BaseRadius,
        double Height,
        struct IAcad3DSolid * * pCone ) = 0;
    virtual HRESULT __stdcall raw_AddCylinder (
        VARIANT Center,
        double Radius,
        double Height,
        struct IAcad3DSolid * * pCyl ) = 0;
    virtual HRESULT __stdcall raw_AddDimAligned (
        VARIANT ExtLine1Point,
        VARIANT ExtLine2Point,
        VARIANT TextPosition,
        struct IAcadDimAligned * * pDim ) = 0;
    virtual HRESULT __stdcall raw_AddDimAngular (
        VARIANT AngleVertex,
        VARIANT FirstEndPoint,
        VARIANT SecondEndPoint,
        VARIANT TextPoint,
        struct IAcadDimAngular * * pDim ) = 0;
    virtual HRESULT __stdcall raw_AddDimDiametric (
        VARIANT ChordPoint,
        VARIANT FarChordPoint,
        double LeaderLength,
        struct IAcadDimDiametric * * pDim ) = 0;
    virtual HRESULT __stdcall raw_AddDimRotated (
        VARIANT ExtLine1Point,
        VARIANT ExtLine2Point,
        VARIANT DimLineLocation,
        double RotationAngle,
        struct IAcadDimRotated * * pDim ) = 0;
    virtual HRESULT __stdcall raw_AddDimOrdinate (
        VARIANT DefinitionPoint,
        VARIANT LeaderEndPoint,
        int UseXAxis,
        struct IAcadDimOrdinate * * pDim ) = 0;
    virtual HRESULT __stdcall raw_AddDimRadial (
        VARIANT Center,
        VARIANT ChordPoint,
        double LeaderLength,
        struct IAcadDimRadial * * pDim ) = 0;
    virtual HRESULT __stdcall raw_AddEllipse (
        VARIANT Center,
        VARIANT MajorAxis,
        double RadiusRatio,
        struct IAcadEllipse * * pEllipse ) = 0;
    virtual HRESULT __stdcall raw_AddEllipticalCone (
        VARIANT Center,
        double MajorRadius,
        double MinorRadius,
        double Height,
        struct IAcad3DSolid * * pEllipCone ) = 0;
    virtual HRESULT __stdcall raw_AddEllipticalCylinder (
        VARIANT Center,
        double MajorRadius,
        double MinorRadius,
        double Height,
        struct IAcad3DSolid * * pEllipCyl ) = 0;
    virtual HRESULT __stdcall raw_AddExtrudedSolid (
        struct IAcadRegion * Profile,
        double Height,
        double TaperAngle,
        struct IAcad3DSolid * * pExtrSolid ) = 0;
    virtual HRESULT __stdcall raw_AddExtrudedSolidAlongPath (
        struct IAcadRegion * Profile,
        IDispatch * Path,
        struct IAcad3DSolid * * pExtrSolid ) = 0;
    virtual HRESULT __stdcall raw_AddLeader (
        VARIANT PointsArray,
        struct IAcadEntity * Annotation,
        enum AcLeaderType Type,
        struct IAcadLeader * * pLeader ) = 0;
    virtual HRESULT __stdcall raw_AddMText (
        VARIANT InsertionPoint,
        double Width,
        BSTR Text,
        struct IAcadMText * * pMtext ) = 0;
    virtual HRESULT __stdcall raw_AddPoint (
        VARIANT Point,
        struct IAcadPoint * * pPoint ) = 0;
    virtual HRESULT __stdcall raw_AddLightWeightPolyline (
        VARIANT VerticesList,
        struct IAcadLWPolyline * * pLWPolyline ) = 0;
    virtual HRESULT __stdcall raw_AddPolyline (
        VARIANT VerticesList,
        struct IAcadPolyline * * pPolyline ) = 0;
    virtual HRESULT __stdcall raw_AddRay (
        VARIANT Point1,
        VARIANT Point2,
        struct IAcadRay * * pRay ) = 0;
    virtual HRESULT __stdcall raw_AddRegion (
        VARIANT ObjectList,
        VARIANT * pRegions ) = 0;
    virtual HRESULT __stdcall raw_AddRevolvedSolid (
        struct IAcadRegion * Profile,
        VARIANT AxisPoint,
        VARIANT AxisDir,
        double Angle,
        struct IAcad3DSolid * * pRevolSolid ) = 0;
    virtual HRESULT __stdcall raw_AddShape (
        BSTR Name,
        VARIANT InsertionPoint,
        double ScaleFactor,
        double RotationAngle,
        struct IAcadShape * * pShape ) = 0;
    virtual HRESULT __stdcall raw_AddSolid (
        VARIANT Point1,
        VARIANT Point2,
        VARIANT point3,
        VARIANT Point4,
        struct IAcadSolid * * pSolid ) = 0;
    virtual HRESULT __stdcall raw_AddSphere (
        VARIANT Center,
        double Radius,
        struct IAcad3DSolid * * pSphere ) = 0;
    virtual HRESULT __stdcall raw_AddSpline (
        VARIANT PointsArray,
        VARIANT StartTangent,
        VARIANT EndTangent,
        struct IAcadSpline * * pSpline ) = 0;
    virtual HRESULT __stdcall raw_AddText (
        BSTR TextString,
        VARIANT InsertionPoint,
        double Height,
        struct IAcadText * * pText ) = 0;
    virtual HRESULT __stdcall raw_AddTolerance (
        BSTR Text,
        VARIANT InsertionPoint,
        VARIANT Direction,
        struct IAcadTolerance * * pTolerance ) = 0;
    virtual HRESULT __stdcall raw_AddTorus (
        VARIANT Center,
        double TorusRadius,
        double TubeRadius,
        struct IAcad3DSolid * * pTorus ) = 0;
    virtual HRESULT __stdcall raw_AddTrace (
        VARIANT PointsArray,
        struct IAcadTrace * * pTrace ) = 0;
    virtual HRESULT __stdcall raw_AddWedge (
        VARIANT Center,
        double Length,
        double Width,
        double Height,
        struct IAcad3DSolid * * pWedge ) = 0;
    virtual HRESULT __stdcall raw_AddXline (
        VARIANT Point1,
        VARIANT Point2,
        struct IAcadXline * * pXline ) = 0;
    virtual HRESULT __stdcall raw_InsertBlock (
        VARIANT InsertionPoint,
        BSTR Name,
        double Xscale,
        double Yscale,
        double Zscale,
        double Rotation,
        VARIANT Password,
        struct IAcadBlockReference * * pBlkRef ) = 0;
    virtual HRESULT __stdcall raw_AddHatch (
        int PatternType,
        BSTR PatternName,
        VARIANT_BOOL Associativity,
        VARIANT HatchObjectType,
        struct IAcadHatch * * pHatch ) = 0;
    virtual HRESULT __stdcall raw_AddRaster (
        BSTR imageFileName,
        VARIANT InsertionPoint,
        double ScaleFactor,
        double RotationAngle,
        struct IAcadRasterImage * * pRaster ) = 0;
    virtual HRESULT __stdcall raw_AddLine (
        VARIANT StartPoint,
        VARIANT EndPoint,
        struct IAcadLine * * pLine ) = 0;
    virtual HRESULT __stdcall get_IsLayout (
        VARIANT_BOOL * bIsLayout ) = 0;
    virtual HRESULT __stdcall get_Layout (
        struct IAcadLayout * * pLayout ) = 0;
    virtual HRESULT __stdcall get_IsXRef (
        VARIANT_BOOL * pIsXRref ) = 0;
    virtual HRESULT __stdcall raw_AddMInsertBlock (
        VARIANT InsertionPoint,
        BSTR Name,
        double Xscale,
        double Yscale,
        double Zscale,
        double Rotation,
        long NumRows,
        long NumColumns,
        long RowSpacing,
        long ColumnSpacing,
        VARIANT Password,
        struct IAcadMInsertBlock * * pMInsertBlk ) = 0;
    virtual HRESULT __stdcall raw_AddPolyfaceMesh (
        VARIANT VertexList,
        VARIANT FaceList,
        struct IAcadPolyfaceMesh * * pPFMesh ) = 0;
    virtual HRESULT __stdcall raw_AddMLine (
        VARIANT VertexList,
        struct IAcadMLine * * pMLine ) = 0;
    virtual HRESULT __stdcall raw_AddDim3PointAngular (
        VARIANT AngleVertex,
        VARIANT FirstEndPoint,
        VARIANT SecondEndPoint,
        VARIANT TextPoint,
        struct IAcadDim3PointAngular * * pDim ) = 0;
    virtual HRESULT __stdcall get_XRefDatabase (
        struct IAcadDatabase * * pDatabase ) = 0;
    virtual HRESULT __stdcall raw_AttachExternalReference (
        BSTR PathName,
        BSTR Name,
        VARIANT InsertionPoint,
        double Xscale,
        double Yscale,
        double Zscale,
        double Rotation,
        VARIANT_BOOL bOverlay,
        VARIANT Password,
        struct IAcadExternalReference * * pXRef ) = 0;
    virtual HRESULT __stdcall raw_Unload ( ) = 0;
    virtual HRESULT __stdcall raw_Reload ( ) = 0;
    virtual HRESULT __stdcall raw_Bind (
        VARIANT_BOOL bPrefixName ) = 0;
    virtual HRESULT __stdcall raw_Detach ( ) = 0;
};

struct __declspec(uuid("eace0252-c787-4fcf-ba77-906667d7b12e"))
IAcadModelSpace : IAcadBlock
{};

struct __declspec(uuid("ed471e71-0ded-490f-a11e-fc857711441a"))
IAcadEntity : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=Getcolor,put=Putcolor))
    ACAD_COLOR color;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetLinetype,put=PutLinetype))
    _bstr_t Linetype;
    __declspec(property(get=GetLinetypeScale,put=PutLinetypeScale))
    ACAD_NOUNITS LinetypeScale;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetPlotStyleName,put=PutPlotStyleName))
    _bstr_t PlotStyleName;
    __declspec(property(get=GetLineweight,put=PutLineweight))
    ACAD_LWEIGHT Lineweight;
    __declspec(property(get=GetHyperlinks))
    IAcadHyperlinksPtr Hyperlinks;
    __declspec(property(get=GetTrueColor,put=PutTrueColor))
    IAcadAcCmColorPtr TrueColor;
    __declspec(property(get=GetEntityName))
    _bstr_t EntityName;
    __declspec(property(get=GetEntityType))
    long EntityType;

    //
    // Wrapper methods for error-handling
    //

    IAcadAcCmColorPtr GetTrueColor ( );
    void PutTrueColor (
        struct IAcadAcCmColor * pColor );
    _bstr_t GetLayer ( );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLinetype ( );
    void PutLinetype (
        _bstr_t Linetype );
    ACAD_NOUNITS GetLinetypeScale ( );
    void PutLinetypeScale (
        ACAD_NOUNITS ltScale );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL bVisible );
    _variant_t ArrayPolar (
        int NumberOfObjects,
        double AngleToFill,
        const _variant_t & CenterPoint );
    _variant_t ArrayRectangular (
        int NumberOfRows,
        int NumberOfColumns,
        int NumberOfLevels,
        double DistBetweenRows,
        double DistBetweenCols,
        double DistBetweenLevels );
    HRESULT Highlight (
        VARIANT_BOOL HighlightFlag );
    IDispatchPtr Copy ( );
    HRESULT Move (
        const _variant_t & FromPoint,
        const _variant_t & ToPoint );
    HRESULT Rotate (
        const _variant_t & BasePoint,
        double RotationAngle );
    HRESULT Rotate3D (
        const _variant_t & Point1,
        const _variant_t & Point2,
        double RotationAngle );
    IDispatchPtr Mirror (
        const _variant_t & Point1,
        const _variant_t & Point2 );
    IDispatchPtr Mirror3D (
        const _variant_t & Point1,
        const _variant_t & Point2,
        const _variant_t & point3 );
    HRESULT ScaleEntity (
        const _variant_t & BasePoint,
        double ScaleFactor );
    HRESULT TransformBy (
        const _variant_t & TransformationMatrix );
    HRESULT Update ( );
    HRESULT GetBoundingBox (
        VARIANT * MinPoint,
        VARIANT * MaxPoint );
    _variant_t IntersectWith (
        IDispatch * IntersectObject,
        enum AcExtendOption option );
    _bstr_t GetPlotStyleName ( );
    void PutPlotStyleName (
        _bstr_t plotStyle );
    ACAD_LWEIGHT GetLineweight ( );
    void PutLineweight (
        ACAD_LWEIGHT Lineweight );
    IAcadHyperlinksPtr GetHyperlinks ( );
    _bstr_t GetEntityName ( );
    long GetEntityType ( );
    ACAD_COLOR Getcolor ( );
    void Putcolor (
        ACAD_COLOR color );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_TrueColor (
        struct IAcadAcCmColor * * pColor ) = 0;
    virtual HRESULT __stdcall put_TrueColor (
        struct IAcadAcCmColor * pColor ) = 0;
    virtual HRESULT __stdcall get_Layer (
        BSTR * Layer ) = 0;
    virtual HRESULT __stdcall put_Layer (
        BSTR Layer ) = 0;
    virtual HRESULT __stdcall get_Linetype (
        BSTR * Linetype ) = 0;
    virtual HRESULT __stdcall put_Linetype (
        BSTR Linetype ) = 0;
    virtual HRESULT __stdcall get_LinetypeScale (
        ACAD_NOUNITS * ltScale ) = 0;
    virtual HRESULT __stdcall put_LinetypeScale (
        ACAD_NOUNITS ltScale ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * bVisible ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL bVisible ) = 0;
    virtual HRESULT __stdcall raw_ArrayPolar (
        int NumberOfObjects,
        double AngleToFill,
        VARIANT CenterPoint,
        VARIANT * pArrayObjs ) = 0;
    virtual HRESULT __stdcall raw_ArrayRectangular (
        int NumberOfRows,
        int NumberOfColumns,
        int NumberOfLevels,
        double DistBetweenRows,
        double DistBetweenCols,
        double DistBetweenLevels,
        VARIANT * pArrayObjs ) = 0;
    virtual HRESULT __stdcall raw_Highlight (
        VARIANT_BOOL HighlightFlag ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        IDispatch * * pCopyObj ) = 0;
    virtual HRESULT __stdcall raw_Move (
        VARIANT FromPoint,
        VARIANT ToPoint ) = 0;
    virtual HRESULT __stdcall raw_Rotate (
        VARIANT BasePoint,
        double RotationAngle ) = 0;
    virtual HRESULT __stdcall raw_Rotate3D (
        VARIANT Point1,
        VARIANT Point2,
        double RotationAngle ) = 0;
    virtual HRESULT __stdcall raw_Mirror (
        VARIANT Point1,
        VARIANT Point2,
        IDispatch * * pMirrorObj ) = 0;
    virtual HRESULT __stdcall raw_Mirror3D (
        VARIANT Point1,
        VARIANT Point2,
        VARIANT point3,
        IDispatch * * pMirrorObj ) = 0;
    virtual HRESULT __stdcall raw_ScaleEntity (
        VARIANT BasePoint,
        double ScaleFactor ) = 0;
    virtual HRESULT __stdcall raw_TransformBy (
        VARIANT TransformationMatrix ) = 0;
    virtual HRESULT __stdcall raw_Update ( ) = 0;
    virtual HRESULT __stdcall raw_GetBoundingBox (
        VARIANT * MinPoint,
        VARIANT * MaxPoint ) = 0;
    virtual HRESULT __stdcall raw_IntersectWith (
        IDispatch * IntersectObject,
        enum AcExtendOption option,
        VARIANT * intPoints ) = 0;
    virtual HRESULT __stdcall get_PlotStyleName (
        BSTR * plotStyle ) = 0;
    virtual HRESULT __stdcall put_PlotStyleName (
        BSTR plotStyle ) = 0;
    virtual HRESULT __stdcall get_Lineweight (
        ACAD_LWEIGHT * Lineweight ) = 0;
    virtual HRESULT __stdcall put_Lineweight (
        ACAD_LWEIGHT Lineweight ) = 0;
    virtual HRESULT __stdcall get_Hyperlinks (
        struct IAcadHyperlinks * * Hyperlinks ) = 0;
    virtual HRESULT __stdcall get_EntityName (
        BSTR * EntityName ) = 0;
    virtual HRESULT __stdcall get_EntityType (
        long * entType ) = 0;
    virtual HRESULT __stdcall get_color (
        ACAD_COLOR * color ) = 0;
    virtual HRESULT __stdcall put_color (
        ACAD_COLOR color ) = 0;
};

struct __declspec(uuid("74adf264-6dd9-4202-b6dd-f632ee145e10"))
IAcadAcCmColor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEntityColor,put=PutEntityColor))
    long EntityColor;
    __declspec(property(get=GetColorName))
    _bstr_t ColorName;
    __declspec(property(get=GetBookName))
    _bstr_t BookName;
    __declspec(property(get=GetRed))
    long Red;
    __declspec(property(get=GetBlue))
    long Blue;
    __declspec(property(get=GetGreen))
    long Green;
    __declspec(property(get=GetColorMethod,put=PutColorMethod))
    enum AcColorMethod ColorMethod;
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    enum AcColor ColorIndex;

    //
    // Wrapper methods for error-handling
    //

    void PutEntityColor (
        long eColor );
    long GetEntityColor ( );
    _bstr_t GetColorName ( );
    _bstr_t GetBookName ( );
    HRESULT SetNames (
        _bstr_t ColorName,
        _bstr_t BookName );
    HRESULT Delete ( );
    long GetRed ( );
    long GetBlue ( );
    long GetGreen ( );
    HRESULT SetRGB (
        long Red,
        long Green,
        long Blue );
    void PutColorMethod (
        enum AcColorMethod Flags );
    enum AcColorMethod GetColorMethod ( );
    enum AcColor GetColorIndex ( );
    void PutColorIndex (
        enum AcColor color );
    HRESULT SetColorBookColor (
        _bstr_t BookName,
        _bstr_t ColorName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall put_EntityColor (
        long eColor ) = 0;
    virtual HRESULT __stdcall get_EntityColor (
        long * eColor ) = 0;
    virtual HRESULT __stdcall get_ColorName (
        BSTR * Name ) = 0;
    virtual HRESULT __stdcall get_BookName (
        BSTR * Name ) = 0;
    virtual HRESULT __stdcall raw_SetNames (
        BSTR ColorName,
        BSTR BookName ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_Red (
        long * Red ) = 0;
    virtual HRESULT __stdcall get_Blue (
        long * Blue ) = 0;
    virtual HRESULT __stdcall get_Green (
        long * Green ) = 0;
    virtual HRESULT __stdcall raw_SetRGB (
        long Red,
        long Green,
        long Blue ) = 0;
    virtual HRESULT __stdcall put_ColorMethod (
        enum AcColorMethod Flags ) = 0;
    virtual HRESULT __stdcall get_ColorMethod (
        enum AcColorMethod * Flags ) = 0;
    virtual HRESULT __stdcall get_ColorIndex (
        enum AcColor * color ) = 0;
    virtual HRESULT __stdcall put_ColorIndex (
        enum AcColor color ) = 0;
    virtual HRESULT __stdcall raw_SetColorBookColor (
        BSTR BookName,
        BSTR ColorName ) = 0;
};

enum AcColorMethod
{
    acColorMethodByLayer = 192,
    acColorMethodByBlock = 193,
    acColorMethodByRGB = 194,
    acColorMethodByACI = 195,
    acColorMethodForeground = 197
};

struct __declspec(uuid("97701be6-4dac-412f-a914-6f2ef110b63f"))
IAcadHyperlinks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadHyperlinkPtr Item (
        long Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr GetApplication ( );
    IAcadHyperlinkPtr Add (
        _bstr_t Name,
        const _variant_t & Description = vtMissing,
        const _variant_t & NamedLocation = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct IAcadHyperlink * * pItem ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall get_Application (
        IDispatch * * ApplicationObject ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        VARIANT Description,
        VARIANT NamedLocation,
        struct IAcadHyperlink * * pHyperlink ) = 0;
};

struct __declspec(uuid("34e826e8-2285-49a2-bad8-903903a31be8"))
IAcadHyperlink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetURL,put=PutURL))
    _bstr_t URL;
    __declspec(property(get=GetURLDescription,put=PutURLDescription))
    _bstr_t URLDescription;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetURLNamedLocation,put=PutURLNamedLocation))
    _bstr_t URLNamedLocation;

    //
    // Wrapper methods for error-handling
    //

    void PutURL (
        _bstr_t URLPath );
    _bstr_t GetURL ( );
    void PutURLDescription (
        _bstr_t Description );
    _bstr_t GetURLDescription ( );
    IDispatchPtr GetApplication ( );
    HRESULT Delete ( );
    void PutURLNamedLocation (
        _bstr_t Location );
    _bstr_t GetURLNamedLocation ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall put_URL (
        BSTR URLPath ) = 0;
    virtual HRESULT __stdcall get_URL (
        BSTR * URLPath ) = 0;
    virtual HRESULT __stdcall put_URLDescription (
        BSTR Description ) = 0;
    virtual HRESULT __stdcall get_URLDescription (
        BSTR * Description ) = 0;
    virtual HRESULT __stdcall get_Application (
        IDispatch * * ApplicationObject ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall put_URLNamedLocation (
        BSTR Location ) = 0;
    virtual HRESULT __stdcall get_URLNamedLocation (
        BSTR * Location ) = 0;
};

struct __declspec(uuid("e6dc4387-6a52-4530-ae10-7c77494a5ace"))
IAcad3DFace : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetVisibilityEdge1,put=PutVisibilityEdge1))
    VARIANT_BOOL VisibilityEdge1;
    __declspec(property(get=GetVisibilityEdge2,put=PutVisibilityEdge2))
    VARIANT_BOOL VisibilityEdge2;
    __declspec(property(get=GetVisibilityEdge3,put=PutVisibilityEdge3))
    VARIANT_BOOL VisibilityEdge3;
    __declspec(property(get=GetVisibilityEdge4,put=PutVisibilityEdge4))
    VARIANT_BOOL VisibilityEdge4;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & corners );
    VARIANT_BOOL GetVisibilityEdge1 ( );
    void PutVisibilityEdge1 (
        VARIANT_BOOL visibility );
    VARIANT_BOOL GetVisibilityEdge2 ( );
    void PutVisibilityEdge2 (
        VARIANT_BOOL visibility );
    VARIANT_BOOL GetVisibilityEdge3 ( );
    void PutVisibilityEdge3 (
        VARIANT_BOOL visibility );
    VARIANT_BOOL GetVisibilityEdge4 ( );
    void PutVisibilityEdge4 (
        VARIANT_BOOL visibility );
    VARIANT_BOOL GetInvisibleEdge (
        int Index );
    HRESULT SetInvisibleEdge (
        int Index,
        VARIANT_BOOL State );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Coordinates (
        VARIANT * corners ) = 0;
    virtual HRESULT __stdcall put_Coordinates (
        VARIANT corners ) = 0;
    virtual HRESULT __stdcall get_VisibilityEdge1 (
        VARIANT_BOOL * visibility ) = 0;
    virtual HRESULT __stdcall put_VisibilityEdge1 (
        VARIANT_BOOL visibility ) = 0;
    virtual HRESULT __stdcall get_VisibilityEdge2 (
        VARIANT_BOOL * visibility ) = 0;
    virtual HRESULT __stdcall put_VisibilityEdge2 (
        VARIANT_BOOL visibility ) = 0;
    virtual HRESULT __stdcall get_VisibilityEdge3 (
        VARIANT_BOOL * visibility ) = 0;
    virtual HRESULT __stdcall put_VisibilityEdge3 (
        VARIANT_BOOL visibility ) = 0;
    virtual HRESULT __stdcall get_VisibilityEdge4 (
        VARIANT_BOOL * visibility ) = 0;
    virtual HRESULT __stdcall put_VisibilityEdge4 (
        VARIANT_BOOL visibility ) = 0;
    virtual HRESULT __stdcall raw_GetInvisibleEdge (
        int Index,
        VARIANT_BOOL * bVisible ) = 0;
    virtual HRESULT __stdcall raw_SetInvisibleEdge (
        int Index,
        VARIANT_BOOL State ) = 0;
    virtual HRESULT __stdcall get_Coordinate (
        int Index,
        VARIANT * pVal ) = 0;
    virtual HRESULT __stdcall put_Coordinate (
        int Index,
        VARIANT pVal ) = 0;
};

struct __declspec(uuid("a8f34134-7efb-41a3-84c7-5c29cbb179a7"))
IAcadPolygonMesh : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetMClose,put=PutMClose))
    VARIANT_BOOL MClose;
    __declspec(property(get=GetNClose,put=PutNClose))
    VARIANT_BOOL NClose;
    __declspec(property(get=GetMDensity,put=PutMDensity))
    long MDensity;
    __declspec(property(get=GetNDensity,put=PutNDensity))
    long NDensity;
    __declspec(property(get=GetMVertexCount))
    long MVertexCount;
    __declspec(property(get=GetNVertexCount))
    long NVertexCount;
    __declspec(property(get=GetType,put=PutType))
    enum AcPolymeshType Type;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & Coordinates );
    VARIANT_BOOL GetMClose ( );
    void PutMClose (
        VARIANT_BOOL bClose );
    VARIANT_BOOL GetNClose ( );
    void PutNClose (
        VARIANT_BOOL bClose );
    long GetMDensity ( );
    void PutMDensity (
        long density );
    long GetNDensity ( );
    void PutNDensity (
        long density );
    long GetMVertexCount ( );
    long GetNVertexCount ( );
    enum AcPolymeshType GetType ( );
    void PutType (
        enum AcPolymeshType Type );
    HRESULT AppendVertex (
        const _variant_t & vertex );
    _variant_t Explode ( );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Coordinates (
        VARIANT * Coordinates ) = 0;
    virtual HRESULT __stdcall put_Coordinates (
        VARIANT Coordinates ) = 0;
    virtual HRESULT __stdcall get_MClose (
        VARIANT_BOOL * bClose ) = 0;
    virtual HRESULT __stdcall put_MClose (
        VARIANT_BOOL bClose ) = 0;
    virtual HRESULT __stdcall get_NClose (
        VARIANT_BOOL * bClose ) = 0;
    virtual HRESULT __stdcall put_NClose (
        VARIANT_BOOL bClose ) = 0;
    virtual HRESULT __stdcall get_MDensity (
        long * density ) = 0;
    virtual HRESULT __stdcall put_MDensity (
        long density ) = 0;
    virtual HRESULT __stdcall get_NDensity (
        long * density ) = 0;
    virtual HRESULT __stdcall put_NDensity (
        long density ) = 0;
    virtual HRESULT __stdcall get_MVertexCount (
        long * Count ) = 0;
    virtual HRESULT __stdcall get_NVertexCount (
        long * Count ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum AcPolymeshType * Type ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum AcPolymeshType Type ) = 0;
    virtual HRESULT __stdcall raw_AppendVertex (
        VARIANT vertex ) = 0;
    virtual HRESULT __stdcall raw_Explode (
        VARIANT * pArrayObjs ) = 0;
    virtual HRESULT __stdcall get_Coordinate (
        int Index,
        VARIANT * pVal ) = 0;
    virtual HRESULT __stdcall put_Coordinate (
        int Index,
        VARIANT pVal ) = 0;
};

struct __declspec(uuid("655b8bb0-56e6-48ac-923b-4284072d946d"))
IAcad3DPolyline : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];
    __declspec(property(get=GetType,put=PutType))
    enum Ac3DPolylineType Type;
    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetLength))
    double Length;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & Coordinates );
    HRESULT AppendVertex (
        const _variant_t & vertex );
    _variant_t Explode ( );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );
    enum Ac3DPolylineType GetType ( );
    void PutType (
        enum Ac3DPolylineType Type );
    VARIANT_BOOL GetClosed ( );
    void PutClosed (
        VARIANT_BOOL fClose );
    double GetLength ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Coordinates (
        VARIANT * Coordinates ) = 0;
    virtual HRESULT __stdcall put_Coordinates (
        VARIANT Coordinates ) = 0;
    virtual HRESULT __stdcall raw_AppendVertex (
        VARIANT vertex ) = 0;
    virtual HRESULT __stdcall raw_Explode (
        VARIANT * pArrayObjs ) = 0;
    virtual HRESULT __stdcall get_Coordinate (
        int Index,
        VARIANT * pVal ) = 0;
    virtual HRESULT __stdcall put_Coordinate (
        int Index,
        VARIANT pVal ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum Ac3DPolylineType * Type ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum Ac3DPolylineType Type ) = 0;
    virtual HRESULT __stdcall get_Closed (
        VARIANT_BOOL * fClose ) = 0;
    virtual HRESULT __stdcall put_Closed (
        VARIANT_BOOL fClose ) = 0;
    virtual HRESULT __stdcall get_Length (
        double * Length ) = 0;
};

struct __declspec(uuid("75ff9fd8-04fa-4d88-8903-2c806543e22e"))
IAcadArc : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStartPoint))
    _variant_t StartPoint;
    __declspec(property(get=GetCenter,put=PutCenter))
    _variant_t Center;
    __declspec(property(get=GetEndPoint))
    _variant_t EndPoint;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    ACAD_ANGLE StartAngle;
    __declspec(property(get=GetEndAngle,put=PutEndAngle))
    ACAD_ANGLE EndAngle;
    __declspec(property(get=GetTotalAngle))
    ACAD_ANGLE TotalAngle;
    __declspec(property(get=GetArcLength))
    ACAD_DISTANCE ArcLength;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartPoint ( );
    _variant_t GetCenter ( );
    void PutCenter (
        const _variant_t & CenterPoint );
    _variant_t GetEndPoint ( );
    double GetRadius ( );
    void PutRadius (
        double Radius );
    ACAD_ANGLE GetStartAngle ( );
    void PutStartAngle (
        ACAD_ANGLE Angle );
    ACAD_ANGLE GetEndAngle ( );
    void PutEndAngle (
        ACAD_ANGLE Angle );
    ACAD_ANGLE GetTotalAngle ( );
    ACAD_DISTANCE GetArcLength ( );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    _variant_t Offset (
        double Distance );
    double GetArea ( );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_StartPoint (
        VARIANT * StartPoint ) = 0;
    virtual HRESULT __stdcall get_Center (
        VARIANT * CenterPoint ) = 0;
    virtual HRESULT __stdcall put_Center (
        VARIANT CenterPoint ) = 0;
    virtual HRESULT __stdcall get_EndPoint (
        VARIANT * EndPoint ) = 0;
    virtual HRESULT __stdcall get_Radius (
        double * Radius ) = 0;
    virtual HRESULT __stdcall put_Radius (
        double Radius ) = 0;
    virtual HRESULT __stdcall get_StartAngle (
        ACAD_ANGLE * Angle ) = 0;
    virtual HRESULT __stdcall put_StartAngle (
        ACAD_ANGLE Angle ) = 0;
    virtual HRESULT __stdcall get_EndAngle (
        ACAD_ANGLE * Angle ) = 0;
    virtual HRESULT __stdcall put_EndAngle (
        ACAD_ANGLE Angle ) = 0;
    virtual HRESULT __stdcall get_TotalAngle (
        ACAD_ANGLE * TotalAngle ) = 0;
    virtual HRESULT __stdcall get_ArcLength (
        ACAD_DISTANCE * ArcLength ) = 0;
    virtual HRESULT __stdcall get_Thickness (
        double * Thickness ) = 0;
    virtual HRESULT __stdcall put_Thickness (
        double Thickness ) = 0;
    virtual HRESULT __stdcall raw_Offset (
        double Distance,
        VARIANT * pOffsetCurves ) = 0;
    virtual HRESULT __stdcall get_Area (
        double * Area ) = 0;
    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall put_Normal (
        VARIANT Normal ) = 0;
};

struct __declspec(uuid("5a401278-dc00-4b1c-9f12-9a4f93c9a623"))
IAcadAttribute : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetFieldLength,put=PutFieldLength))
    long FieldLength;
    __declspec(property(get=GetTagString,put=PutTagString))
    _bstr_t TagString;
    __declspec(property(get=GetPromptString,put=PutPromptString))
    _bstr_t PromptString;
    __declspec(property(get=GetTextString,put=PutTextString))
    _bstr_t TextString;
    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum AcAlignment Alignment;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum AcHorizontalAlignment HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum AcVerticalAlignment VerticalAlignment;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    ACAD_NOUNITS ScaleFactor;
    __declspec(property(get=GetObliqueAngle,put=PutObliqueAngle))
    ACAD_ANGLE ObliqueAngle;
    __declspec(property(get=GetTextAlignmentPoint,put=PutTextAlignmentPoint))
    _variant_t TextAlignmentPoint;
    __declspec(property(get=GetInsertionPoint,put=PutInsertionPoint))
    _variant_t InsertionPoint;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetTextGenerationFlag,put=PutTextGenerationFlag))
    long TextGenerationFlag;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetMode,put=PutMode))
    long Mode;
    __declspec(property(get=GetUpsideDown,put=PutUpsideDown))
    VARIANT_BOOL UpsideDown;
    __declspec(property(get=GetBackward,put=PutBackward))
    VARIANT_BOOL Backward;
    __declspec(property(get=GetInvisible,put=PutInvisible))
    VARIANT_BOOL Invisible;
    __declspec(property(get=GetConstant,put=PutConstant))
    VARIANT_BOOL Constant;
    __declspec(property(get=GetVerify,put=PutVerify))
    VARIANT_BOOL Verify;
    __declspec(property(get=GetPreset,put=PutPreset))
    VARIANT_BOOL Preset;

    //
    // Wrapper methods for error-handling
    //

    long GetFieldLength ( );
    void PutFieldLength (
        long fieldLen );
    _bstr_t GetTagString ( );
    void PutTagString (
        _bstr_t Tag );
    _bstr_t GetPromptString ( );
    void PutPromptString (
        _bstr_t bstrPrompt );
    _bstr_t GetTextString ( );
    void PutTextString (
        _bstr_t bstrText );
    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t Name );
    enum AcAlignment GetAlignment ( );
    void PutAlignment (
        enum AcAlignment align );
    enum AcHorizontalAlignment GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum AcHorizontalAlignment horizAlign );
    enum AcVerticalAlignment GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum AcVerticalAlignment vertiAlign );
    double GetHeight ( );
    void PutHeight (
        double Height );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rotAngle );
    ACAD_NOUNITS GetScaleFactor ( );
    void PutScaleFactor (
        ACAD_NOUNITS scalFactor );
    ACAD_ANGLE GetObliqueAngle ( );
    void PutObliqueAngle (
        ACAD_ANGLE obliAngle );
    _variant_t GetTextAlignmentPoint ( );
    void PutTextAlignmentPoint (
        const _variant_t & alignPoint );
    _variant_t GetInsertionPoint ( );
    void PutInsertionPoint (
        const _variant_t & insPoint );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    long GetTextGenerationFlag ( );
    void PutTextGenerationFlag (
        long textGenFlag );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    long GetMode ( );
    void PutMode (
        long Mode );
    VARIANT_BOOL GetUpsideDown ( );
    void PutUpsideDown (
        VARIANT_BOOL bUpsideDown );
    VARIANT_BOOL GetBackward ( );
    void PutBackward (
        VARIANT_BOOL bBackward );
    VARIANT_BOOL GetInvisible ( );
    void PutInvisible (
        VARIANT_BOOL bInvisible );
    VARIANT_BOOL GetConstant ( );
    void PutConstant (
        VARIANT_BOOL bConstant );
    VARIANT_BOOL GetVerify ( );
    void PutVerify (
        VARIANT_BOOL bVerify );
    VARIANT_BOOL GetPreset ( );
    void PutPreset (
        VARIANT_BOOL bPreset );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_FieldLength (
        long * fieldLen ) = 0;
    virtual HRESULT __stdcall put_FieldLength (
        long fieldLen ) = 0;
    virtual HRESULT __stdcall get_TagString (
        BSTR * Tag ) = 0;
    virtual HRESULT __stdcall put_TagString (
        BSTR Tag ) = 0;
    virtual HRESULT __stdcall get_PromptString (
        BSTR * bstrPrompt ) = 0;
    virtual HRESULT __stdcall put_PromptString (
        BSTR bstrPrompt ) = 0;
    virtual HRESULT __stdcall get_TextString (
        BSTR * bstrText ) = 0;
    virtual HRESULT __stdcall put_TextString (
        BSTR bstrText ) = 0;
    virtual HRESULT __stdcall get_StyleName (
        BSTR * Name ) = 0;
    virtual HRESULT __stdcall put_StyleName (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        enum AcAlignment * align ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        enum AcAlignment align ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        enum AcHorizontalAlignment * horizAlign ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        enum AcHorizontalAlignment horizAlign ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        enum AcVerticalAlignment * vertiAlign ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        enum AcVerticalAlignment vertiAlign ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * Height ) = 0;
    virtual HRESULT __stdcall put_Height (
        double Height ) = 0;
    virtual HRESULT __stdcall get_Rotation (
        ACAD_ANGLE * rotAngle ) = 0;
    virtual HRESULT __stdcall put_Rotation (
        ACAD_ANGLE rotAngle ) = 0;
    virtual HRESULT __stdcall get_ScaleFactor (
        ACAD_NOUNITS * scalFactor ) = 0;
    virtual HRESULT __stdcall put_ScaleFactor (
        ACAD_NOUNITS scalFactor ) = 0;
    virtual HRESULT __stdcall get_ObliqueAngle (
        ACAD_ANGLE * obliAngle ) = 0;
    virtual HRESULT __stdcall put_ObliqueAngle (
        ACAD_ANGLE obliAngle ) = 0;
    virtual HRESULT __stdcall get_TextAlignmentPoint (
        VARIANT * alignPoint ) = 0;
    virtual HRESULT __stdcall put_TextAlignmentPoint (
        VARIANT alignPoint ) = 0;
    virtual HRESULT __stdcall get_InsertionPoint (
        VARIANT * insPoint ) = 0;
    virtual HRESULT __stdcall put_InsertionPoint (
        VARIANT insPoint ) = 0;
    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall put_Normal (
        VARIANT Normal ) = 0;
    virtual HRESULT __stdcall get_TextGenerationFlag (
        long * textGenFlag ) = 0;
    virtual HRESULT __stdcall put_TextGenerationFlag (
        long textGenFlag ) = 0;
    virtual HRESULT __stdcall get_Thickness (
        double * Thickness ) = 0;
    virtual HRESULT __stdcall put_Thickness (
        double Thickness ) = 0;
    virtual HRESULT __stdcall get_Mode (
        long * Mode ) = 0;
    virtual HRESULT __stdcall put_Mode (
        long Mode ) = 0;
    virtual HRESULT __stdcall get_UpsideDown (
        VARIANT_BOOL * bUpsideDown ) = 0;
    virtual HRESULT __stdcall put_UpsideDown (
        VARIANT_BOOL bUpsideDown ) = 0;
    virtual HRESULT __stdcall get_Backward (
        VARIANT_BOOL * bBackward ) = 0;
    virtual HRESULT __stdcall put_Backward (
        VARIANT_BOOL bBackward ) = 0;
    virtual HRESULT __stdcall get_Invisible (
        VARIANT_BOOL * bInvisible ) = 0;
    virtual HRESULT __stdcall put_Invisible (
        VARIANT_BOOL bInvisible ) = 0;
    virtual HRESULT __stdcall get_Constant (
        VARIANT_BOOL * bConstant ) = 0;
    virtual HRESULT __stdcall put_Constant (
        VARIANT_BOOL bConstant ) = 0;
    virtual HRESULT __stdcall get_Verify (
        VARIANT_BOOL * bVerify ) = 0;
    virtual HRESULT __stdcall put_Verify (
        VARIANT_BOOL bVerify ) = 0;
    virtual HRESULT __stdcall get_Preset (
        VARIANT_BOOL * bPreset ) = 0;
    virtual HRESULT __stdcall put_Preset (
        VARIANT_BOOL bPreset ) = 0;
};

struct __declspec(uuid("8821b222-79ed-43dd-86bf-828311a81087"))
IAcad3DSolid : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCentroid))
    _variant_t Centroid;
    __declspec(property(get=GetMomentOfInertia))
    _variant_t MomentOfInertia;
    __declspec(property(get=GetPrincipalDirections))
    _variant_t PrincipalDirections;
    __declspec(property(get=GetPrincipalMoments))
    _variant_t PrincipalMoments;
    __declspec(property(get=GetProductOfInertia))
    _variant_t ProductOfInertia;
    __declspec(property(get=GetRadiiOfGyration))
    _variant_t RadiiOfGyration;
    __declspec(property(get=GetVolume))
    double Volume;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCentroid ( );
    _variant_t GetMomentOfInertia ( );
    _variant_t GetPrincipalDirections ( );
    _variant_t GetPrincipalMoments ( );
    _variant_t GetProductOfInertia ( );
    _variant_t GetRadiiOfGyration ( );
    double GetVolume ( );
    HRESULT Boolean (
        enum AcBooleanType Operation,
        struct IAcad3DSolid * SolidObject );
    IAcad3DSolidPtr CheckInterference (
        struct IAcad3DSolid * Object,
        VARIANT_BOOL CreateInterferenceSolid );
    IAcadRegionPtr SectionSolid (
        const _variant_t & Point1,
        const _variant_t & Point2,
        const _variant_t & point3 );
    IAcad3DSolidPtr SliceSolid (
        const _variant_t & Point1,
        const _variant_t & Point2,
        const _variant_t & point3,
        VARIANT_BOOL Negative );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Centroid (
        VARIANT * Centroid ) = 0;
    virtual HRESULT __stdcall get_MomentOfInertia (
        VARIANT * momentInertia ) = 0;
    virtual HRESULT __stdcall get_PrincipalDirections (
        VARIANT * prinDir ) = 0;
    virtual HRESULT __stdcall get_PrincipalMoments (
        VARIANT * prinMoments ) = 0;
    virtual HRESULT __stdcall get_ProductOfInertia (
        VARIANT * prodInertia ) = 0;
    virtual HRESULT __stdcall get_RadiiOfGyration (
        VARIANT * radiiGyration ) = 0;
    virtual HRESULT __stdcall get_Volume (
        double * Volume ) = 0;
    virtual HRESULT __stdcall raw_Boolean (
        enum AcBooleanType Operation,
        struct IAcad3DSolid * SolidObject ) = 0;
    virtual HRESULT __stdcall raw_CheckInterference (
        struct IAcad3DSolid * Object,
        VARIANT_BOOL CreateInterferenceSolid,
        struct IAcad3DSolid * * pIntSolid ) = 0;
    virtual HRESULT __stdcall raw_SectionSolid (
        VARIANT Point1,
        VARIANT Point2,
        VARIANT point3,
        struct IAcadRegion * * pRegion ) = 0;
    virtual HRESULT __stdcall raw_SliceSolid (
        VARIANT Point1,
        VARIANT Point2,
        VARIANT point3,
        VARIANT_BOOL Negative,
        struct IAcad3DSolid * * pNegSideSolid ) = 0;
};

struct __declspec(uuid("0a7dc97a-45c2-4a83-b0d4-d8a621fa4479"))
IAcadRegion : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetCentroid))
    _variant_t Centroid;
    __declspec(property(get=GetMomentOfInertia))
    _variant_t MomentOfInertia;
    __declspec(property(get=GetNormal))
    _variant_t Normal;
    __declspec(property(get=GetPerimeter))
    double Perimeter;
    __declspec(property(get=GetPrincipalDirections))
    _variant_t PrincipalDirections;
    __declspec(property(get=GetPrincipalMoments))
    _variant_t PrincipalMoments;
    __declspec(property(get=GetProductOfInertia))
    double ProductOfInertia;
    __declspec(property(get=GetRadiiOfGyration))
    _variant_t RadiiOfGyration;

    //
    // Wrapper methods for error-handling
    //

    double GetArea ( );
    _variant_t GetCentroid ( );
    _variant_t GetMomentOfInertia ( );
    _variant_t GetNormal ( );
    double GetPerimeter ( );
    _variant_t GetPrincipalDirections ( );
    _variant_t GetPrincipalMoments ( );
    double GetProductOfInertia ( );
    _variant_t GetRadiiOfGyration ( );
    HRESULT Boolean (
        enum AcBooleanType Operation,
        struct IAcadRegion * Object );
    _variant_t Explode ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Area (
        double * Area ) = 0;
    virtual HRESULT __stdcall get_Centroid (
        VARIANT * Centroid ) = 0;
    virtual HRESULT __stdcall get_MomentOfInertia (
        VARIANT * momentInertia ) = 0;
    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall get_Perimeter (
        double * Perimeter ) = 0;
    virtual HRESULT __stdcall get_PrincipalDirections (
        VARIANT * prinDir ) = 0;
    virtual HRESULT __stdcall get_PrincipalMoments (
        VARIANT * prinMoments ) = 0;
    virtual HRESULT __stdcall get_ProductOfInertia (
        double * prodInertia ) = 0;
    virtual HRESULT __stdcall get_RadiiOfGyration (
        VARIANT * radiiGyration ) = 0;
    virtual HRESULT __stdcall raw_Boolean (
        enum AcBooleanType Operation,
        struct IAcadRegion * Object ) = 0;
    virtual HRESULT __stdcall raw_Explode (
        VARIANT * pArrayObjs ) = 0;
};

struct __declspec(uuid("46a82b9e-fa08-484a-85aa-7f847f68a682"))
IAcadCircle : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter,put=PutCenter))
    _variant_t Center;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetDiameter,put=PutDiameter))
    double Diameter;
    __declspec(property(get=GetCircumference,put=PutCircumference))
    double Circumference;
    __declspec(property(get=GetArea,put=PutArea))
    double Area;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCenter ( );
    void PutCenter (
        const _variant_t & CenterPoint );
    double GetRadius ( );
    void PutRadius (
        double Radius );
    double GetDiameter ( );
    void PutDiameter (
        double Diameter );
    double GetCircumference ( );
    void PutCircumference (
        double Circumference );
    double GetArea ( );
    void PutArea (
        double Area );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    _variant_t Offset (
        double Distance );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Center (
        VARIANT * CenterPoint ) = 0;
    virtual HRESULT __stdcall put_Center (
        VARIANT CenterPoint ) = 0;
    virtual HRESULT __stdcall get_Radius (
        double * Radius ) = 0;
    virtual HRESULT __stdcall put_Radius (
        double Radius ) = 0;
    virtual HRESULT __stdcall get_Diameter (
        double * Diameter ) = 0;
    virtual HRESULT __stdcall put_Diameter (
        double Diameter ) = 0;
    virtual HRESULT __stdcall get_Circumference (
        double * Circumference ) = 0;
    virtual HRESULT __stdcall put_Circumference (
        double Circumference ) = 0;
    virtual HRESULT __stdcall get_Area (
        double * Area ) = 0;
    virtual HRESULT __stdcall put_Area (
        double Area ) = 0;
    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall put_Normal (
        VARIANT Normal ) = 0;
    virtual HRESULT __stdcall get_Thickness (
        double * Thickness ) = 0;
    virtual HRESULT __stdcall put_Thickness (
        double Thickness ) = 0;
    virtual HRESULT __stdcall raw_Offset (
        double Distance,
        VARIANT * pOffsetCurves ) = 0;
};

struct __declspec(uuid("aae1e267-581b-4fa8-ad3c-fe8c8a8503c6"))
IAcadDimension : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTextRotation,put=PutTextRotation))
    ACAD_ANGLE TextRotation;
    __declspec(property(get=GetTextOverride,put=PutTextOverride))
    _bstr_t TextOverride;
    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetDecimalSeparator,put=PutDecimalSeparator))
    _bstr_t DecimalSeparator;
    __declspec(property(get=GetTextGap,put=PutTextGap))
    double TextGap;
    __declspec(property(get=GetTextPrefix,put=PutTextPrefix))
    _bstr_t TextPrefix;
    __declspec(property(get=GetTextSuffix,put=PutTextSuffix))
    _bstr_t TextSuffix;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    ACAD_NOUNITS ScaleFactor;
    __declspec(property(get=GetVerticalTextPosition,put=PutVerticalTextPosition))
    enum AcDimVerticalJustification VerticalTextPosition;
    __declspec(property(get=GetTolerancePrecision,put=PutTolerancePrecision))
    enum AcDimPrecision TolerancePrecision;
    __declspec(property(get=GetToleranceHeightScale,put=PutToleranceHeightScale))
    ACAD_NOUNITS ToleranceHeightScale;
    __declspec(property(get=GetToleranceLowerLimit,put=PutToleranceLowerLimit))
    double ToleranceLowerLimit;
    __declspec(property(get=GetTextMovement,put=PutTextMovement))
    enum AcDimTextMovement TextMovement;
    __declspec(property(get=GetToleranceDisplay,put=PutToleranceDisplay))
    enum AcDimToleranceMethod ToleranceDisplay;
    __declspec(property(get=GetToleranceJustification,put=PutToleranceJustification))
    enum AcDimToleranceJustify ToleranceJustification;
    __declspec(property(get=GetToleranceUpperLimit,put=PutToleranceUpperLimit))
    double ToleranceUpperLimit;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    double TextHeight;
    __declspec(property(get=GetSuppressLeadingZeros,put=PutSuppressLeadingZeros))
    VARIANT_BOOL SuppressLeadingZeros;
    __declspec(property(get=GetSuppressTrailingZeros,put=PutSuppressTrailingZeros))
    VARIANT_BOOL SuppressTrailingZeros;
    __declspec(property(get=GetToleranceSuppressLeadingZeros,put=PutToleranceSuppressLeadingZeros))
    VARIANT_BOOL ToleranceSuppressLeadingZeros;
    __declspec(property(get=GetToleranceSuppressTrailingZeros,put=PutToleranceSuppressTrailingZeros))
    VARIANT_BOOL ToleranceSuppressTrailingZeros;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetTextPosition,put=PutTextPosition))
    _variant_t TextPosition;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rotAngle );
    _variant_t GetTextPosition ( );
    void PutTextPosition (
        const _variant_t & textPos );
    ACAD_ANGLE GetTextRotation ( );
    void PutTextRotation (
        ACAD_ANGLE rotAngle );
    _bstr_t GetTextOverride ( );
    void PutTextOverride (
        _bstr_t bstrText );
    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t bstrName );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR color );
    _bstr_t GetDecimalSeparator ( );
    void PutDecimalSeparator (
        _bstr_t character );
    double GetTextGap ( );
    void PutTextGap (
        double Offset );
    _bstr_t GetTextPrefix ( );
    void PutTextPrefix (
        _bstr_t prefix );
    _bstr_t GetTextSuffix ( );
    void PutTextSuffix (
        _bstr_t suffix );
    ACAD_NOUNITS GetScaleFactor ( );
    void PutScaleFactor (
        ACAD_NOUNITS factor );
    enum AcDimVerticalJustification GetVerticalTextPosition ( );
    void PutVerticalTextPosition (
        enum AcDimVerticalJustification Type );
    enum AcDimPrecision GetTolerancePrecision ( );
    void PutTolerancePrecision (
        enum AcDimPrecision precision );
    ACAD_NOUNITS GetToleranceHeightScale ( );
    void PutToleranceHeightScale (
        ACAD_NOUNITS scale );
    double GetToleranceLowerLimit ( );
    void PutToleranceLowerLimit (
        double lower );
    enum AcDimTextMovement GetTextMovement ( );
    void PutTextMovement (
        enum AcDimTextMovement Move );
    enum AcDimToleranceMethod GetToleranceDisplay ( );
    void PutToleranceDisplay (
        enum AcDimToleranceMethod method );
    enum AcDimToleranceJustify GetToleranceJustification ( );
    void PutToleranceJustification (
        enum AcDimToleranceJustify method );
    double GetToleranceUpperLimit ( );
    void PutToleranceUpperLimit (
        double upper );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t style );
    double GetTextHeight ( );
    void PutTextHeight (
        double Height );
    VARIANT_BOOL GetSuppressLeadingZeros ( );
    void PutSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressTrailingZeros ( );
    void PutSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressLeadingZeros ( );
    void PutToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressTrailingZeros ( );
    void PutToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall put_Normal (
        VARIANT Normal ) = 0;
    virtual HRESULT __stdcall get_Rotation (
        ACAD_ANGLE * rotAngle ) = 0;
    virtual HRESULT __stdcall put_Rotation (
        ACAD_ANGLE rotAngle ) = 0;
    virtual HRESULT __stdcall get_TextPosition (
        VARIANT * textPos ) = 0;
    virtual HRESULT __stdcall put_TextPosition (
        VARIANT textPos ) = 0;
    virtual HRESULT __stdcall get_TextRotation (
        ACAD_ANGLE * rotAngle ) = 0;
    virtual HRESULT __stdcall put_TextRotation (
        ACAD_ANGLE rotAngle ) = 0;
    virtual HRESULT __stdcall get_TextOverride (
        BSTR * bstrText ) = 0;
    virtual HRESULT __stdcall put_TextOverride (
        BSTR bstrText ) = 0;
    virtual HRESULT __stdcall get_StyleName (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_StyleName (
        BSTR bstrName ) = 0;
    virtual HRESULT __stdcall get_TextColor (
        ACAD_COLOR * color ) = 0;
    virtual HRESULT __stdcall put_TextColor (
        ACAD_COLOR color ) = 0;
    virtual HRESULT __stdcall get_DecimalSeparator (
        BSTR * character ) = 0;
    virtual HRESULT __stdcall put_DecimalSeparator (
        BSTR character ) = 0;
    virtual HRESULT __stdcall get_TextGap (
        double * Offset ) = 0;
    virtual HRESULT __stdcall put_TextGap (
        double Offset ) = 0;
    virtual HRESULT __stdcall get_TextPrefix (
        BSTR * prefix ) = 0;
    virtual HRESULT __stdcall put_TextPrefix (
        BSTR prefix ) = 0;
    virtual HRESULT __stdcall get_TextSuffix (
        BSTR * suffix ) = 0;
    virtual HRESULT __stdcall put_TextSuffix (
        BSTR suffix ) = 0;
    virtual HRESULT __stdcall get_ScaleFactor (
        ACAD_NOUNITS * factor ) = 0;
    virtual HRESULT __stdcall put_ScaleFactor (
        ACAD_NOUNITS factor ) = 0;
    virtual HRESULT __stdcall get_VerticalTextPosition (
        enum AcDimVerticalJustification * Type ) = 0;
    virtual HRESULT __stdcall put_VerticalTextPosition (
        enum AcDimVerticalJustification Type ) = 0;
    virtual HRESULT __stdcall get_TolerancePrecision (
        enum AcDimPrecision * precision ) = 0;
    virtual HRESULT __stdcall put_TolerancePrecision (
        enum AcDimPrecision precision ) = 0;
    virtual HRESULT __stdcall get_ToleranceHeightScale (
        ACAD_NOUNITS * scale ) = 0;
    virtual HRESULT __stdcall put_ToleranceHeightScale (
        ACAD_NOUNITS scale ) = 0;
    virtual HRESULT __stdcall get_ToleranceLowerLimit (
        double * lower ) = 0;
    virtual HRESULT __stdcall put_ToleranceLowerLimit (
        double lower ) = 0;
    virtual HRESULT __stdcall get_TextMovement (
        enum AcDimTextMovement * Move ) = 0;
    virtual HRESULT __stdcall put_TextMovement (
        enum AcDimTextMovement Move ) = 0;
    virtual HRESULT __stdcall get_ToleranceDisplay (
        enum AcDimToleranceMethod * method ) = 0;
    virtual HRESULT __stdcall put_ToleranceDisplay (
        enum AcDimToleranceMethod method ) = 0;
    virtual HRESULT __stdcall get_ToleranceJustification (
        enum AcDimToleranceJustify * method ) = 0;
    virtual HRESULT __stdcall put_ToleranceJustification (
        enum AcDimToleranceJustify method ) = 0;
    virtual HRESULT __stdcall get_ToleranceUpperLimit (
        double * upper ) = 0;
    virtual HRESULT __stdcall put_ToleranceUpperLimit (
        double upper ) = 0;
    virtual HRESULT __stdcall get_TextStyle (
        BSTR * style ) = 0;
    virtual HRESULT __stdcall put_TextStyle (
        BSTR style ) = 0;
    virtual HRESULT __stdcall get_TextHeight (
        double * Height ) = 0;
    virtual HRESULT __stdcall put_TextHeight (
        double Height ) = 0;
    virtual HRESULT __stdcall get_SuppressLeadingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_SuppressLeadingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_SuppressTrailingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_SuppressTrailingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_ToleranceSuppressLeadingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_ToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_ToleranceSuppressTrailingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_ToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal ) = 0;
};

struct __declspec(uuid("a450e3ef-f121-426b-88ca-1a927382c79d"))
IAcadDimAligned : IAcadDimension
{
    //
    // Property data
    //

    __declspec(property(get=GetExtLine1Point,put=PutExtLine1Point))
    _variant_t ExtLine1Point;
    __declspec(property(get=GetExtLine2Point,put=PutExtLine2Point))
    _variant_t ExtLine2Point;
    __declspec(property(get=GetAltUnits,put=PutAltUnits))
    VARIANT_BOOL AltUnits;
    __declspec(property(get=GetAltUnitsPrecision,put=PutAltUnitsPrecision))
    enum AcDimPrecision AltUnitsPrecision;
    __declspec(property(get=GetAltUnitsScale,put=PutAltUnitsScale))
    ACAD_NOUNITS AltUnitsScale;
    __declspec(property(get=GetAltRoundDistance,put=PutAltRoundDistance))
    double AltRoundDistance;
    __declspec(property(get=GetAltTolerancePrecision,put=PutAltTolerancePrecision))
    enum AcDimPrecision AltTolerancePrecision;
    __declspec(property(get=GetAltUnitsFormat,put=PutAltUnitsFormat))
    enum AcDimUnits AltUnitsFormat;
    __declspec(property(get=GetAltTextPrefix,put=PutAltTextPrefix))
    _bstr_t AltTextPrefix;
    __declspec(property(get=GetAltTextSuffix,put=PutAltTextSuffix))
    _bstr_t AltTextSuffix;
    __declspec(property(get=GetDimensionLineColor,put=PutDimensionLineColor))
    ACAD_COLOR DimensionLineColor;
    __declspec(property(get=GetExtensionLineColor,put=PutExtensionLineColor))
    ACAD_COLOR ExtensionLineColor;
    __declspec(property(get=GetPrimaryUnitsPrecision,put=PutPrimaryUnitsPrecision))
    enum AcDimPrecision PrimaryUnitsPrecision;
    __declspec(property(get=GetDimensionLineExtend,put=PutDimensionLineExtend))
    double DimensionLineExtend;
    __declspec(property(get=GetExtensionLineExtend,put=PutExtensionLineExtend))
    double ExtensionLineExtend;
    __declspec(property(get=GetFit,put=PutFit))
    enum AcDimFit Fit;
    __declspec(property(get=GetFractionFormat,put=PutFractionFormat))
    enum AcDimFractionType FractionFormat;
    __declspec(property(get=GetHorizontalTextPosition,put=PutHorizontalTextPosition))
    enum AcDimHorizontalJustification HorizontalTextPosition;
    __declspec(property(get=GetLinearScaleFactor,put=PutLinearScaleFactor))
    ACAD_NOUNITS LinearScaleFactor;
    __declspec(property(get=GetUnitsFormat,put=PutUnitsFormat))
    enum AcDimLUnits UnitsFormat;
    __declspec(property(get=GetExtensionLineWeight,put=PutExtensionLineWeight))
    ACAD_LWEIGHT ExtensionLineWeight;
    __declspec(property(get=GetRoundDistance,put=PutRoundDistance))
    double RoundDistance;
    __declspec(property(get=GetDimLine1Suppress,put=PutDimLine1Suppress))
    VARIANT_BOOL DimLine1Suppress;
    __declspec(property(get=GetDimLine2Suppress,put=PutDimLine2Suppress))
    VARIANT_BOOL DimLine2Suppress;
    __declspec(property(get=GetExtLine1Suppress,put=PutExtLine1Suppress))
    VARIANT_BOOL ExtLine1Suppress;
    __declspec(property(get=GetExtLine2Suppress,put=PutExtLine2Suppress))
    VARIANT_BOOL ExtLine2Suppress;
    __declspec(property(get=GetDimLineInside,put=PutDimLineInside))
    VARIANT_BOOL DimLineInside;
    __declspec(property(get=GetTextInsideAlign,put=PutTextInsideAlign))
    VARIANT_BOOL TextInsideAlign;
    __declspec(property(get=GetTextInside,put=PutTextInside))
    VARIANT_BOOL TextInside;
    __declspec(property(get=GetForceLineInside,put=PutForceLineInside))
    VARIANT_BOOL ForceLineInside;
    __declspec(property(get=GetTextOutsideAlign,put=PutTextOutsideAlign))
    VARIANT_BOOL TextOutsideAlign;
    __declspec(property(get=GetExtensionLineOffset,put=PutExtensionLineOffset))
    double ExtensionLineOffset;
    __declspec(property(get=GetAltSuppressLeadingZeros,put=PutAltSuppressLeadingZeros))
    VARIANT_BOOL AltSuppressLeadingZeros;
    __declspec(property(get=GetAltSuppressTrailingZeros,put=PutAltSuppressTrailingZeros))
    VARIANT_BOOL AltSuppressTrailingZeros;
    __declspec(property(get=GetAltSuppressZeroFeet,put=PutAltSuppressZeroFeet))
    VARIANT_BOOL AltSuppressZeroFeet;
    __declspec(property(get=GetAltSuppressZeroInches,put=PutAltSuppressZeroInches))
    VARIANT_BOOL AltSuppressZeroInches;
    __declspec(property(get=GetAltToleranceSuppressLeadingZeros,put=PutAltToleranceSuppressLeadingZeros))
    VARIANT_BOOL AltToleranceSuppressLeadingZeros;
    __declspec(property(get=GetAltToleranceSuppressTrailingZeros,put=PutAltToleranceSuppressTrailingZeros))
    VARIANT_BOOL AltToleranceSuppressTrailingZeros;
    __declspec(property(get=GetAltToleranceSuppressZeroFeet,put=PutAltToleranceSuppressZeroFeet))
    VARIANT_BOOL AltToleranceSuppressZeroFeet;
    __declspec(property(get=GetAltToleranceSuppressZeroInches,put=PutAltToleranceSuppressZeroInches))
    VARIANT_BOOL AltToleranceSuppressZeroInches;
    __declspec(property(get=GetSuppressZeroFeet,put=PutSuppressZeroFeet))
    VARIANT_BOOL SuppressZeroFeet;
    __declspec(property(get=GetSuppressZeroInches,put=PutSuppressZeroInches))
    VARIANT_BOOL SuppressZeroInches;
    __declspec(property(get=GetToleranceSuppressZeroFeet,put=PutToleranceSuppressZeroFeet))
    VARIANT_BOOL ToleranceSuppressZeroFeet;
    __declspec(property(get=GetToleranceSuppressZeroInches,put=PutToleranceSuppressZeroInches))
    VARIANT_BOOL ToleranceSuppressZeroInches;
    __declspec(property(get=GetDimensionLineWeight,put=PutDimensionLineWeight))
    ACAD_LWEIGHT DimensionLineWeight;
    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetArrowhead1Type,put=PutArrowhead1Type))
    enum AcDimArrowheadType Arrowhead1Type;
    __declspec(property(get=GetArrowhead2Type,put=PutArrowhead2Type))
    enum AcDimArrowheadType Arrowhead2Type;
    __declspec(property(get=GetMeasurement))
    double Measurement;
    __declspec(property(get=GetArrowhead1Block,put=PutArrowhead1Block))
    _bstr_t Arrowhead1Block;
    __declspec(property(get=GetArrowhead2Block,put=PutArrowhead2Block))
    _bstr_t Arrowhead2Block;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetExtLine1Point ( );
    void PutExtLine1Point (
        const _variant_t & xLine1Point );
    _variant_t GetExtLine2Point ( );
    void PutExtLine2Point (
        const _variant_t & xLine2Point );
    VARIANT_BOOL GetAltUnits ( );
    void PutAltUnits (
        VARIANT_BOOL bAlternate );
    enum AcDimPrecision GetAltUnitsPrecision ( );
    void PutAltUnitsPrecision (
        enum AcDimPrecision precision );
    ACAD_NOUNITS GetAltUnitsScale ( );
    void PutAltUnitsScale (
        ACAD_NOUNITS scale );
    double GetAltRoundDistance ( );
    void PutAltRoundDistance (
        double Distance );
    enum AcDimPrecision GetAltTolerancePrecision ( );
    void PutAltTolerancePrecision (
        enum AcDimPrecision Distance );
    enum AcDimUnits GetAltUnitsFormat ( );
    void PutAltUnitsFormat (
        enum AcDimUnits Units );
    _bstr_t GetAltTextPrefix ( );
    void PutAltTextPrefix (
        _bstr_t prefix );
    _bstr_t GetAltTextSuffix ( );
    void PutAltTextSuffix (
        _bstr_t suffix );
    ACAD_COLOR GetDimensionLineColor ( );
    void PutDimensionLineColor (
        ACAD_COLOR color );
    ACAD_COLOR GetExtensionLineColor ( );
    void PutExtensionLineColor (
        ACAD_COLOR color );
    enum AcDimPrecision GetPrimaryUnitsPrecision ( );
    void PutPrimaryUnitsPrecision (
        enum AcDimPrecision Prec );
    double GetDimensionLineExtend ( );
    void PutDimensionLineExtend (
        double extend );
    double GetExtensionLineExtend ( );
    void PutExtensionLineExtend (
        double extend );
    enum AcDimFit GetFit ( );
    void PutFit (
        enum AcDimFit fittype );
    enum AcDimFractionType GetFractionFormat ( );
    void PutFractionFormat (
        enum AcDimFractionType Type );
    enum AcDimHorizontalJustification GetHorizontalTextPosition ( );
    void PutHorizontalTextPosition (
        enum AcDimHorizontalJustification Type );
    ACAD_NOUNITS GetLinearScaleFactor ( );
    void PutLinearScaleFactor (
        ACAD_NOUNITS Type );
    enum AcDimLUnits GetUnitsFormat ( );
    void PutUnitsFormat (
        enum AcDimLUnits format );
    ACAD_LWEIGHT GetExtensionLineWeight ( );
    void PutExtensionLineWeight (
        ACAD_LWEIGHT lweight );
    double GetRoundDistance ( );
    void PutRoundDistance (
        double Distance );
    VARIANT_BOOL GetDimLine1Suppress ( );
    void PutDimLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLine2Suppress ( );
    void PutDimLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetExtLine1Suppress ( );
    void PutExtLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetExtLine2Suppress ( );
    void PutExtLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLineInside ( );
    void PutDimLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInsideAlign ( );
    void PutTextInsideAlign (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInside ( );
    void PutTextInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetForceLineInside ( );
    void PutForceLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextOutsideAlign ( );
    void PutTextOutsideAlign (
        VARIANT_BOOL bInside );
    double GetExtensionLineOffset ( );
    void PutExtensionLineOffset (
        double Offset );
    VARIANT_BOOL GetAltSuppressLeadingZeros ( );
    void PutAltSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressTrailingZeros ( );
    void PutAltSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroFeet ( );
    void PutAltSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroInches ( );
    void PutAltSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressLeadingZeros ( );
    void PutAltToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressTrailingZeros ( );
    void PutAltToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroFeet ( );
    void PutAltToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroInches ( );
    void PutAltToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroFeet ( );
    void PutSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroInches ( );
    void PutSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroFeet ( );
    void PutToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroInches ( );
    void PutToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    ACAD_LWEIGHT GetDimensionLineWeight ( );
    void PutDimensionLineWeight (
        ACAD_LWEIGHT weight );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    enum AcDimArrowheadType GetArrowhead1Type ( );
    void PutArrowhead1Type (
        enum AcDimArrowheadType Type );
    enum AcDimArrowheadType GetArrowhead2Type ( );
    void PutArrowhead2Type (
        enum AcDimArrowheadType Type );
    double GetMeasurement ( );
    _bstr_t GetArrowhead1Block ( );
    void PutArrowhead1Block (
        _bstr_t BlockName );
    _bstr_t GetArrowhead2Block ( );
    void PutArrowhead2Block (
        _bstr_t BlockName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ExtLine1Point (
        VARIANT * xLine1Point ) = 0;
    virtual HRESULT __stdcall put_ExtLine1Point (
        VARIANT xLine1Point ) = 0;
    virtual HRESULT __stdcall get_ExtLine2Point (
        VARIANT * xLine2Point ) = 0;
    virtual HRESULT __stdcall put_ExtLine2Point (
        VARIANT xLine2Point ) = 0;
    virtual HRESULT __stdcall get_AltUnits (
        VARIANT_BOOL * bAlternate ) = 0;
    virtual HRESULT __stdcall put_AltUnits (
        VARIANT_BOOL bAlternate ) = 0;
    virtual HRESULT __stdcall get_AltUnitsPrecision (
        enum AcDimPrecision * precision ) = 0;
    virtual HRESULT __stdcall put_AltUnitsPrecision (
        enum AcDimPrecision precision ) = 0;
    virtual HRESULT __stdcall get_AltUnitsScale (
        ACAD_NOUNITS * scale ) = 0;
    virtual HRESULT __stdcall put_AltUnitsScale (
        ACAD_NOUNITS scale ) = 0;
    virtual HRESULT __stdcall get_AltRoundDistance (
        double * Distance ) = 0;
    virtual HRESULT __stdcall put_AltRoundDistance (
        double Distance ) = 0;
    virtual HRESULT __stdcall get_AltTolerancePrecision (
        enum AcDimPrecision * Distance ) = 0;
    virtual HRESULT __stdcall put_AltTolerancePrecision (
        enum AcDimPrecision Distance ) = 0;
    virtual HRESULT __stdcall get_AltUnitsFormat (
        enum AcDimUnits * Units ) = 0;
    virtual HRESULT __stdcall put_AltUnitsFormat (
        enum AcDimUnits Units ) = 0;
    virtual HRESULT __stdcall get_AltTextPrefix (
        BSTR * prefix ) = 0;
    virtual HRESULT __stdcall put_AltTextPrefix (
        BSTR prefix ) = 0;
    virtual HRESULT __stdcall get_AltTextSuffix (
        BSTR * suffix ) = 0;
    virtual HRESULT __stdcall put_AltTextSuffix (
        BSTR suffix ) = 0;
    virtual HRESULT __stdcall get_DimensionLineColor (
        ACAD_COLOR * color ) = 0;
    virtual HRESULT __stdcall put_DimensionLineColor (
        ACAD_COLOR color ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineColor (
        ACAD_COLOR * color ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineColor (
        ACAD_COLOR color ) = 0;
    virtual HRESULT __stdcall get_PrimaryUnitsPrecision (
        enum AcDimPrecision * Prec ) = 0;
    virtual HRESULT __stdcall put_PrimaryUnitsPrecision (
        enum AcDimPrecision Prec ) = 0;
    virtual HRESULT __stdcall get_DimensionLineExtend (
        double * extend ) = 0;
    virtual HRESULT __stdcall put_DimensionLineExtend (
        double extend ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineExtend (
        double * extend ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineExtend (
        double extend ) = 0;
    virtual HRESULT __stdcall get_Fit (
        enum AcDimFit * fittype ) = 0;
    virtual HRESULT __stdcall put_Fit (
        enum AcDimFit fittype ) = 0;
    virtual HRESULT __stdcall get_FractionFormat (
        enum AcDimFractionType * Type ) = 0;
    virtual HRESULT __stdcall put_FractionFormat (
        enum AcDimFractionType Type ) = 0;
    virtual HRESULT __stdcall get_HorizontalTextPosition (
        enum AcDimHorizontalJustification * Type ) = 0;
    virtual HRESULT __stdcall put_HorizontalTextPosition (
        enum AcDimHorizontalJustification Type ) = 0;
    virtual HRESULT __stdcall get_LinearScaleFactor (
        ACAD_NOUNITS * Type ) = 0;
    virtual HRESULT __stdcall put_LinearScaleFactor (
        ACAD_NOUNITS Type ) = 0;
    virtual HRESULT __stdcall get_UnitsFormat (
        enum AcDimLUnits * format ) = 0;
    virtual HRESULT __stdcall put_UnitsFormat (
        enum AcDimLUnits format ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineWeight (
        ACAD_LWEIGHT * lweight ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineWeight (
        ACAD_LWEIGHT lweight ) = 0;
    virtual HRESULT __stdcall get_RoundDistance (
        double * Distance ) = 0;
    virtual HRESULT __stdcall put_RoundDistance (
        double Distance ) = 0;
    virtual HRESULT __stdcall get_DimLine1Suppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_DimLine1Suppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_DimLine2Suppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_DimLine2Suppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_ExtLine1Suppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_ExtLine1Suppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_ExtLine2Suppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_ExtLine2Suppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_DimLineInside (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_DimLineInside (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_TextInsideAlign (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_TextInsideAlign (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_TextInside (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_TextInside (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_ForceLineInside (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_ForceLineInside (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_TextOutsideAlign (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_TextOutsideAlign (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineOffset (
        double * Offset ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineOffset (
        double Offset ) = 0;
    virtual HRESULT __stdcall get_AltSuppressLeadingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressLeadingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltSuppressTrailingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressTrailingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltSuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltSuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressLeadingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressTrailingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_SuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_SuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_SuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_SuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_ToleranceSuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_ToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_ToleranceSuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_ToleranceSuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_DimensionLineWeight (
        ACAD_LWEIGHT * weight ) = 0;
    virtual HRESULT __stdcall put_DimensionLineWeight (
        ACAD_LWEIGHT weight ) = 0;
    virtual HRESULT __stdcall get_ArrowheadSize (
        double * size ) = 0;
    virtual HRESULT __stdcall put_ArrowheadSize (
        double size ) = 0;
    virtual HRESULT __stdcall get_Arrowhead1Type (
        enum AcDimArrowheadType * Type ) = 0;
    virtual HRESULT __stdcall put_Arrowhead1Type (
        enum AcDimArrowheadType Type ) = 0;
    virtual HRESULT __stdcall get_Arrowhead2Type (
        enum AcDimArrowheadType * Type ) = 0;
    virtual HRESULT __stdcall put_Arrowhead2Type (
        enum AcDimArrowheadType Type ) = 0;
    virtual HRESULT __stdcall get_Measurement (
        double * bVal ) = 0;
    virtual HRESULT __stdcall get_Arrowhead1Block (
        BSTR * BlockName ) = 0;
    virtual HRESULT __stdcall put_Arrowhead1Block (
        BSTR BlockName ) = 0;
    virtual HRESULT __stdcall get_Arrowhead2Block (
        BSTR * BlockName ) = 0;
    virtual HRESULT __stdcall put_Arrowhead2Block (
        BSTR BlockName ) = 0;
};

struct __declspec(uuid("ffeccd63-f821-457c-89f7-ef697bd9e7e5"))
IAcadDimAngular : IAcadDimension
{
    //
    // Property data
    //

    __declspec(property(get=GetDimensionLineColor,put=PutDimensionLineColor))
    ACAD_COLOR DimensionLineColor;
    __declspec(property(get=GetExtensionLineColor,put=PutExtensionLineColor))
    ACAD_COLOR ExtensionLineColor;
    __declspec(property(get=GetDimensionLineWeight,put=PutDimensionLineWeight))
    ACAD_LWEIGHT DimensionLineWeight;
    __declspec(property(get=GetExtensionLineExtend,put=PutExtensionLineExtend))
    double ExtensionLineExtend;
    __declspec(property(get=GetFit,put=PutFit))
    enum AcDimFit Fit;
    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetHorizontalTextPosition,put=PutHorizontalTextPosition))
    enum AcDimHorizontalJustification HorizontalTextPosition;
    __declspec(property(get=GetArrowhead1Type,put=PutArrowhead1Type))
    enum AcDimArrowheadType Arrowhead1Type;
    __declspec(property(get=GetArrowhead2Type,put=PutArrowhead2Type))
    enum AcDimArrowheadType Arrowhead2Type;
    __declspec(property(get=GetExtensionLineWeight,put=PutExtensionLineWeight))
    ACAD_LWEIGHT ExtensionLineWeight;
    __declspec(property(get=GetMeasurement))
    ACAD_ANGLE Measurement;
    __declspec(property(get=GetDimLine1Suppress,put=PutDimLine1Suppress))
    VARIANT_BOOL DimLine1Suppress;
    __declspec(property(get=GetDimLine2Suppress,put=PutDimLine2Suppress))
    VARIANT_BOOL DimLine2Suppress;
    __declspec(property(get=GetExtLine1Suppress,put=PutExtLine1Suppress))
    VARIANT_BOOL ExtLine1Suppress;
    __declspec(property(get=GetExtLine2Suppress,put=PutExtLine2Suppress))
    VARIANT_BOOL ExtLine2Suppress;
    __declspec(property(get=GetDimLineInside,put=PutDimLineInside))
    VARIANT_BOOL DimLineInside;
    __declspec(property(get=GetTextInsideAlign,put=PutTextInsideAlign))
    VARIANT_BOOL TextInsideAlign;
    __declspec(property(get=GetTextInside,put=PutTextInside))
    VARIANT_BOOL TextInside;
    __declspec(property(get=GetForceLineInside,put=PutForceLineInside))
    VARIANT_BOOL ForceLineInside;
    __declspec(property(get=GetTextOutsideAlign,put=PutTextOutsideAlign))
    VARIANT_BOOL TextOutsideAlign;
    __declspec(property(get=GetArrowhead1Block,put=PutArrowhead1Block))
    _bstr_t Arrowhead1Block;
    __declspec(property(get=GetExtensionLineOffset,put=PutExtensionLineOffset))
    double ExtensionLineOffset;
    __declspec(property(get=GetTextPrecision,put=PutTextPrecision))
    enum AcDimPrecision TextPrecision;
    __declspec(property(get=GetExtLine1StartPoint,put=PutExtLine1StartPoint))
    _variant_t ExtLine1StartPoint;
    __declspec(property(get=GetExtLine1EndPoint,put=PutExtLine1EndPoint))
    _variant_t ExtLine1EndPoint;
    __declspec(property(get=GetExtLine2StartPoint,put=PutExtLine2StartPoint))
    _variant_t ExtLine2StartPoint;
    __declspec(property(get=GetExtLine2EndPoint,put=PutExtLine2EndPoint))
    _variant_t ExtLine2EndPoint;
    __declspec(property(get=GetAngleFormat,put=PutAngleFormat))
    enum AcAngleUnits AngleFormat;
    __declspec(property(get=GetArrowhead2Block,put=PutArrowhead2Block))
    _bstr_t Arrowhead2Block;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetExtLine1StartPoint ( );
    void PutExtLine1StartPoint (
        const _variant_t & xLine1Point );
    _variant_t GetExtLine1EndPoint ( );
    void PutExtLine1EndPoint (
        const _variant_t & xLine1Point );
    _variant_t GetExtLine2StartPoint ( );
    void PutExtLine2StartPoint (
        const _variant_t & xLine2Point );
    _variant_t GetExtLine2EndPoint ( );
    void PutExtLine2EndPoint (
        const _variant_t & xLine2Point );
    enum AcAngleUnits GetAngleFormat ( );
    void PutAngleFormat (
        enum AcAngleUnits format );
    ACAD_COLOR GetDimensionLineColor ( );
    void PutDimensionLineColor (
        ACAD_COLOR Type );
    ACAD_COLOR GetExtensionLineColor ( );
    void PutExtensionLineColor (
        ACAD_COLOR Type );
    double GetExtensionLineExtend ( );
    void PutExtensionLineExtend (
        double extend );
    enum AcDimFit GetFit ( );
    void PutFit (
        enum AcDimFit fittype );
    enum AcDimHorizontalJustification GetHorizontalTextPosition ( );
    void PutHorizontalTextPosition (
        enum AcDimHorizontalJustification Type );
    ACAD_LWEIGHT GetExtensionLineWeight ( );
    void PutExtensionLineWeight (
        ACAD_LWEIGHT lweight );
    VARIANT_BOOL GetDimLine1Suppress ( );
    void PutDimLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLine2Suppress ( );
    void PutDimLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetExtLine1Suppress ( );
    void PutExtLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetExtLine2Suppress ( );
    void PutExtLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLineInside ( );
    void PutDimLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInsideAlign ( );
    void PutTextInsideAlign (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInside ( );
    void PutTextInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetForceLineInside ( );
    void PutForceLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextOutsideAlign ( );
    void PutTextOutsideAlign (
        VARIANT_BOOL bInside );
    enum AcDimPrecision GetTextPrecision ( );
    void PutTextPrecision (
        enum AcDimPrecision precision );
    double GetExtensionLineOffset ( );
    void PutExtensionLineOffset (
        double Offset );
    ACAD_LWEIGHT GetDimensionLineWeight ( );
    void PutDimensionLineWeight (
        ACAD_LWEIGHT weight );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    enum AcDimArrowheadType GetArrowhead1Type ( );
    void PutArrowhead1Type (
        enum AcDimArrowheadType Type );
    enum AcDimArrowheadType GetArrowhead2Type ( );
    void PutArrowhead2Type (
        enum AcDimArrowheadType Type );
    ACAD_ANGLE GetMeasurement ( );
    _bstr_t GetArrowhead1Block ( );
    void PutArrowhead1Block (
        _bstr_t BlockName );
    _bstr_t GetArrowhead2Block ( );
    void PutArrowhead2Block (
        _bstr_t BlockName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ExtLine1StartPoint (
        VARIANT * xLine1Point ) = 0;
    virtual HRESULT __stdcall put_ExtLine1StartPoint (
        VARIANT xLine1Point ) = 0;
    virtual HRESULT __stdcall get_ExtLine1EndPoint (
        VARIANT * xLine1Point ) = 0;
    virtual HRESULT __stdcall put_ExtLine1EndPoint (
        VARIANT xLine1Point ) = 0;
    virtual HRESULT __stdcall get_ExtLine2StartPoint (
        VARIANT * xLine2Point ) = 0;
    virtual HRESULT __stdcall put_ExtLine2StartPoint (
        VARIANT xLine2Point ) = 0;
    virtual HRESULT __stdcall get_ExtLine2EndPoint (
        VARIANT * xLine2Point ) = 0;
    virtual HRESULT __stdcall put_ExtLine2EndPoint (
        VARIANT xLine2Point ) = 0;
    virtual HRESULT __stdcall get_AngleFormat (
        enum AcAngleUnits * format ) = 0;
    virtual HRESULT __stdcall put_AngleFormat (
        enum AcAngleUnits format ) = 0;
    virtual HRESULT __stdcall get_DimensionLineColor (
        ACAD_COLOR * Type ) = 0;
    virtual HRESULT __stdcall put_DimensionLineColor (
        ACAD_COLOR Type ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineColor (
        ACAD_COLOR * Type ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineColor (
        ACAD_COLOR Type ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineExtend (
        double * extend ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineExtend (
        double extend ) = 0;
    virtual HRESULT __stdcall get_Fit (
        enum AcDimFit * fittype ) = 0;
    virtual HRESULT __stdcall put_Fit (
        enum AcDimFit fittype ) = 0;
    virtual HRESULT __stdcall get_HorizontalTextPosition (
        enum AcDimHorizontalJustification * Type ) = 0;
    virtual HRESULT __stdcall put_HorizontalTextPosition (
        enum AcDimHorizontalJustification Type ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineWeight (
        ACAD_LWEIGHT * lweight ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineWeight (
        ACAD_LWEIGHT lweight ) = 0;
    virtual HRESULT __stdcall get_DimLine1Suppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_DimLine1Suppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_DimLine2Suppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_DimLine2Suppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_ExtLine1Suppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_ExtLine1Suppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_ExtLine2Suppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_ExtLine2Suppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_DimLineInside (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_DimLineInside (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_TextInsideAlign (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_TextInsideAlign (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_TextInside (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_TextInside (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_ForceLineInside (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_ForceLineInside (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_TextOutsideAlign (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_TextOutsideAlign (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_TextPrecision (
        enum AcDimPrecision * precision ) = 0;
    virtual HRESULT __stdcall put_TextPrecision (
        enum AcDimPrecision precision ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineOffset (
        double * Offset ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineOffset (
        double Offset ) = 0;
    virtual HRESULT __stdcall get_DimensionLineWeight (
        ACAD_LWEIGHT * weight ) = 0;
    virtual HRESULT __stdcall put_DimensionLineWeight (
        ACAD_LWEIGHT weight ) = 0;
    virtual HRESULT __stdcall get_ArrowheadSize (
        double * size ) = 0;
    virtual HRESULT __stdcall put_ArrowheadSize (
        double size ) = 0;
    virtual HRESULT __stdcall get_Arrowhead1Type (
        enum AcDimArrowheadType * Type ) = 0;
    virtual HRESULT __stdcall put_Arrowhead1Type (
        enum AcDimArrowheadType Type ) = 0;
    virtual HRESULT __stdcall get_Arrowhead2Type (
        enum AcDimArrowheadType * Type ) = 0;
    virtual HRESULT __stdcall put_Arrowhead2Type (
        enum AcDimArrowheadType Type ) = 0;
    virtual HRESULT __stdcall get_Measurement (
        ACAD_ANGLE * bVal ) = 0;
    virtual HRESULT __stdcall get_Arrowhead1Block (
        BSTR * BlockName ) = 0;
    virtual HRESULT __stdcall put_Arrowhead1Block (
        BSTR BlockName ) = 0;
    virtual HRESULT __stdcall get_Arrowhead2Block (
        BSTR * BlockName ) = 0;
    virtual HRESULT __stdcall put_Arrowhead2Block (
        BSTR BlockName ) = 0;
};

struct __declspec(uuid("5eaaee84-7b80-4902-9ce6-020e6fa1079e"))
IAcadDimDiametric : IAcadDimension
{
    //
    // Property data
    //

    __declspec(property(get=GetAltUnits,put=PutAltUnits))
    VARIANT_BOOL AltUnits;
    __declspec(property(get=GetAltUnitsPrecision,put=PutAltUnitsPrecision))
    enum AcDimPrecision AltUnitsPrecision;
    __declspec(property(get=GetAltUnitsScale,put=PutAltUnitsScale))
    ACAD_NOUNITS AltUnitsScale;
    __declspec(property(get=GetAltRoundDistance,put=PutAltRoundDistance))
    double AltRoundDistance;
    __declspec(property(get=GetAltTolerancePrecision,put=PutAltTolerancePrecision))
    enum AcDimPrecision AltTolerancePrecision;
    __declspec(property(get=GetAltUnitsFormat,put=PutAltUnitsFormat))
    enum AcDimUnits AltUnitsFormat;
    __declspec(property(get=GetAltTextPrefix,put=PutAltTextPrefix))
    _bstr_t AltTextPrefix;
    __declspec(property(get=GetAltTextSuffix,put=PutAltTextSuffix))
    _bstr_t AltTextSuffix;
    __declspec(property(get=GetDimensionLineColor,put=PutDimensionLineColor))
    ACAD_COLOR DimensionLineColor;
    __declspec(property(get=GetPrimaryUnitsPrecision,put=PutPrimaryUnitsPrecision))
    enum AcDimPrecision PrimaryUnitsPrecision;
    __declspec(property(get=GetFit,put=PutFit))
    enum AcDimFit Fit;
    __declspec(property(get=GetFractionFormat,put=PutFractionFormat))
    enum AcDimFractionType FractionFormat;
    __declspec(property(get=GetLinearScaleFactor,put=PutLinearScaleFactor))
    ACAD_NOUNITS LinearScaleFactor;
    __declspec(property(get=GetUnitsFormat,put=PutUnitsFormat))
    enum AcDimLUnits UnitsFormat;
    __declspec(property(get=GetRoundDistance,put=PutRoundDistance))
    double RoundDistance;
    __declspec(property(get=GetDimLine1Suppress,put=PutDimLine1Suppress))
    VARIANT_BOOL DimLine1Suppress;
    __declspec(property(get=GetDimLine2Suppress,put=PutDimLine2Suppress))
    VARIANT_BOOL DimLine2Suppress;
    __declspec(property(get=GetTextInsideAlign,put=PutTextInsideAlign))
    VARIANT_BOOL TextInsideAlign;
    __declspec(property(get=GetTextInside,put=PutTextInside))
    VARIANT_BOOL TextInside;
    __declspec(property(get=GetForceLineInside,put=PutForceLineInside))
    VARIANT_BOOL ForceLineInside;
    __declspec(property(get=GetTextOutsideAlign,put=PutTextOutsideAlign))
    VARIANT_BOOL TextOutsideAlign;
    __declspec(property(put=PutLeaderLength))
    double LeaderLength;
    __declspec(property(get=GetCenterType,put=PutCenterType))
    enum AcDimCenterType CenterType;
    __declspec(property(get=GetCenterMarkSize,put=PutCenterMarkSize))
    double CenterMarkSize;
    __declspec(property(get=GetAltSuppressLeadingZeros,put=PutAltSuppressLeadingZeros))
    VARIANT_BOOL AltSuppressLeadingZeros;
    __declspec(property(get=GetAltSuppressTrailingZeros,put=PutAltSuppressTrailingZeros))
    VARIANT_BOOL AltSuppressTrailingZeros;
    __declspec(property(get=GetAltSuppressZeroFeet,put=PutAltSuppressZeroFeet))
    VARIANT_BOOL AltSuppressZeroFeet;
    __declspec(property(get=GetAltSuppressZeroInches,put=PutAltSuppressZeroInches))
    VARIANT_BOOL AltSuppressZeroInches;
    __declspec(property(get=GetAltToleranceSuppressLeadingZeros,put=PutAltToleranceSuppressLeadingZeros))
    VARIANT_BOOL AltToleranceSuppressLeadingZeros;
    __declspec(property(get=GetAltToleranceSuppressTrailingZeros,put=PutAltToleranceSuppressTrailingZeros))
    VARIANT_BOOL AltToleranceSuppressTrailingZeros;
    __declspec(property(get=GetAltToleranceSuppressZeroFeet,put=PutAltToleranceSuppressZeroFeet))
    VARIANT_BOOL AltToleranceSuppressZeroFeet;
    __declspec(property(get=GetAltToleranceSuppressZeroInches,put=PutAltToleranceSuppressZeroInches))
    VARIANT_BOOL AltToleranceSuppressZeroInches;
    __declspec(property(get=GetSuppressZeroFeet,put=PutSuppressZeroFeet))
    VARIANT_BOOL SuppressZeroFeet;
    __declspec(property(get=GetSuppressZeroInches,put=PutSuppressZeroInches))
    VARIANT_BOOL SuppressZeroInches;
    __declspec(property(get=GetToleranceSuppressZeroFeet,put=PutToleranceSuppressZeroFeet))
    VARIANT_BOOL ToleranceSuppressZeroFeet;
    __declspec(property(get=GetToleranceSuppressZeroInches,put=PutToleranceSuppressZeroInches))
    VARIANT_BOOL ToleranceSuppressZeroInches;
    __declspec(property(get=GetDimensionLineWeight,put=PutDimensionLineWeight))
    ACAD_LWEIGHT DimensionLineWeight;
    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetArrowhead1Type,put=PutArrowhead1Type))
    enum AcDimArrowheadType Arrowhead1Type;
    __declspec(property(get=GetArrowhead2Type,put=PutArrowhead2Type))
    enum AcDimArrowheadType Arrowhead2Type;
    __declspec(property(get=GetMeasurement))
    double Measurement;
    __declspec(property(get=GetArrowhead1Block,put=PutArrowhead1Block))
    _bstr_t Arrowhead1Block;
    __declspec(property(get=GetArrowhead2Block,put=PutArrowhead2Block))
    _bstr_t Arrowhead2Block;

    //
    // Wrapper methods for error-handling
    //

    void PutLeaderLength (
        double _arg1 );
    VARIANT_BOOL GetAltUnits ( );
    void PutAltUnits (
        VARIANT_BOOL bAlternate );
    enum AcDimPrecision GetAltUnitsPrecision ( );
    void PutAltUnitsPrecision (
        enum AcDimPrecision precision );
    ACAD_NOUNITS GetAltUnitsScale ( );
    void PutAltUnitsScale (
        ACAD_NOUNITS scale );
    double GetAltRoundDistance ( );
    void PutAltRoundDistance (
        double Distance );
    enum AcDimPrecision GetAltTolerancePrecision ( );
    void PutAltTolerancePrecision (
        enum AcDimPrecision Distance );
    enum AcDimUnits GetAltUnitsFormat ( );
    void PutAltUnitsFormat (
        enum AcDimUnits Units );
    _bstr_t GetAltTextPrefix ( );
    void PutAltTextPrefix (
        _bstr_t prefix );
    _bstr_t GetAltTextSuffix ( );
    void PutAltTextSuffix (
        _bstr_t prefix );
    ACAD_COLOR GetDimensionLineColor ( );
    void PutDimensionLineColor (
        ACAD_COLOR Type );
    enum AcDimPrecision GetPrimaryUnitsPrecision ( );
    void PutPrimaryUnitsPrecision (
        enum AcDimPrecision Prec );
    enum AcDimFractionType GetFractionFormat ( );
    void PutFractionFormat (
        enum AcDimFractionType Type );
    enum AcDimFit GetFit ( );
    void PutFit (
        enum AcDimFit fittype );
    ACAD_NOUNITS GetLinearScaleFactor ( );
    void PutLinearScaleFactor (
        ACAD_NOUNITS Type );
    enum AcDimLUnits GetUnitsFormat ( );
    void PutUnitsFormat (
        enum AcDimLUnits format );
    double GetRoundDistance ( );
    void PutRoundDistance (
        double Distance );
    VARIANT_BOOL GetDimLine1Suppress ( );
    void PutDimLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLine2Suppress ( );
    void PutDimLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetTextInsideAlign ( );
    void PutTextInsideAlign (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInside ( );
    void PutTextInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetForceLineInside ( );
    void PutForceLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextOutsideAlign ( );
    void PutTextOutsideAlign (
        VARIANT_BOOL bInside );
    enum AcDimCenterType GetCenterType ( );
    void PutCenterType (
        enum AcDimCenterType Type );
    double GetCenterMarkSize ( );
    void PutCenterMarkSize (
        double Type );
    VARIANT_BOOL GetAltSuppressLeadingZeros ( );
    void PutAltSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressTrailingZeros ( );
    void PutAltSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroFeet ( );
    void PutAltSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroInches ( );
    void PutAltSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressLeadingZeros ( );
    void PutAltToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressTrailingZeros ( );
    void PutAltToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroFeet ( );
    void PutAltToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroInches ( );
    void PutAltToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroFeet ( );
    void PutSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroInches ( );
    void PutSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroFeet ( );
    void PutToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroInches ( );
    void PutToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    ACAD_LWEIGHT GetDimensionLineWeight ( );
    void PutDimensionLineWeight (
        ACAD_LWEIGHT weight );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    enum AcDimArrowheadType GetArrowhead1Type ( );
    void PutArrowhead1Type (
        enum AcDimArrowheadType Type );
    enum AcDimArrowheadType GetArrowhead2Type ( );
    void PutArrowhead2Type (
        enum AcDimArrowheadType Type );
    double GetMeasurement ( );
    _bstr_t GetArrowhead1Block ( );
    void PutArrowhead1Block (
        _bstr_t BlockName );
    _bstr_t GetArrowhead2Block ( );
    void PutArrowhead2Block (
        _bstr_t BlockName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall put_LeaderLength (
        double _arg1 ) = 0;
    virtual HRESULT __stdcall get_AltUnits (
        VARIANT_BOOL * bAlternate ) = 0;
    virtual HRESULT __stdcall put_AltUnits (
        VARIANT_BOOL bAlternate ) = 0;
    virtual HRESULT __stdcall get_AltUnitsPrecision (
        enum AcDimPrecision * precision ) = 0;
    virtual HRESULT __stdcall put_AltUnitsPrecision (
        enum AcDimPrecision precision ) = 0;
    virtual HRESULT __stdcall get_AltUnitsScale (
        ACAD_NOUNITS * scale ) = 0;
    virtual HRESULT __stdcall put_AltUnitsScale (
        ACAD_NOUNITS scale ) = 0;
    virtual HRESULT __stdcall get_AltRoundDistance (
        double * Distance ) = 0;
    virtual HRESULT __stdcall put_AltRoundDistance (
        double Distance ) = 0;
    virtual HRESULT __stdcall get_AltTolerancePrecision (
        enum AcDimPrecision * Distance ) = 0;
    virtual HRESULT __stdcall put_AltTolerancePrecision (
        enum AcDimPrecision Distance ) = 0;
    virtual HRESULT __stdcall get_AltUnitsFormat (
        enum AcDimUnits * Units ) = 0;
    virtual HRESULT __stdcall put_AltUnitsFormat (
        enum AcDimUnits Units ) = 0;
    virtual HRESULT __stdcall get_AltTextPrefix (
        BSTR * prefix ) = 0;
    virtual HRESULT __stdcall put_AltTextPrefix (
        BSTR prefix ) = 0;
    virtual HRESULT __stdcall get_AltTextSuffix (
        BSTR * prefix ) = 0;
    virtual HRESULT __stdcall put_AltTextSuffix (
        BSTR prefix ) = 0;
    virtual HRESULT __stdcall get_DimensionLineColor (
        ACAD_COLOR * Type ) = 0;
    virtual HRESULT __stdcall put_DimensionLineColor (
        ACAD_COLOR Type ) = 0;
    virtual HRESULT __stdcall get_PrimaryUnitsPrecision (
        enum AcDimPrecision * Prec ) = 0;
    virtual HRESULT __stdcall put_PrimaryUnitsPrecision (
        enum AcDimPrecision Prec ) = 0;
    virtual HRESULT __stdcall get_FractionFormat (
        enum AcDimFractionType * Type ) = 0;
    virtual HRESULT __stdcall put_FractionFormat (
        enum AcDimFractionType Type ) = 0;
    virtual HRESULT __stdcall get_Fit (
        enum AcDimFit * fittype ) = 0;
    virtual HRESULT __stdcall put_Fit (
        enum AcDimFit fittype ) = 0;
    virtual HRESULT __stdcall get_LinearScaleFactor (
        ACAD_NOUNITS * Type ) = 0;
    virtual HRESULT __stdcall put_LinearScaleFactor (
        ACAD_NOUNITS Type ) = 0;
    virtual HRESULT __stdcall get_UnitsFormat (
        enum AcDimLUnits * format ) = 0;
    virtual HRESULT __stdcall put_UnitsFormat (
        enum AcDimLUnits format ) = 0;
    virtual HRESULT __stdcall get_RoundDistance (
        double * Distance ) = 0;
    virtual HRESULT __stdcall put_RoundDistance (
        double Distance ) = 0;
    virtual HRESULT __stdcall get_DimLine1Suppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_DimLine1Suppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_DimLine2Suppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_DimLine2Suppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_TextInsideAlign (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_TextInsideAlign (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_TextInside (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_TextInside (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_ForceLineInside (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_ForceLineInside (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_TextOutsideAlign (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_TextOutsideAlign (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_CenterType (
        enum AcDimCenterType * Type ) = 0;
    virtual HRESULT __stdcall put_CenterType (
        enum AcDimCenterType Type ) = 0;
    virtual HRESULT __stdcall get_CenterMarkSize (
        double * Type ) = 0;
    virtual HRESULT __stdcall put_CenterMarkSize (
        double Type ) = 0;
    virtual HRESULT __stdcall get_AltSuppressLeadingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressLeadingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltSuppressTrailingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressTrailingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltSuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltSuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressLeadingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressTrailingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_SuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_SuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_SuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_SuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_ToleranceSuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_ToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_ToleranceSuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_ToleranceSuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_DimensionLineWeight (
        ACAD_LWEIGHT * weight ) = 0;
    virtual HRESULT __stdcall put_DimensionLineWeight (
        ACAD_LWEIGHT weight ) = 0;
    virtual HRESULT __stdcall get_ArrowheadSize (
        double * size ) = 0;
    virtual HRESULT __stdcall put_ArrowheadSize (
        double size ) = 0;
    virtual HRESULT __stdcall get_Arrowhead1Type (
        enum AcDimArrowheadType * Type ) = 0;
    virtual HRESULT __stdcall put_Arrowhead1Type (
        enum AcDimArrowheadType Type ) = 0;
    virtual HRESULT __stdcall get_Arrowhead2Type (
        enum AcDimArrowheadType * Type ) = 0;
    virtual HRESULT __stdcall put_Arrowhead2Type (
        enum AcDimArrowheadType Type ) = 0;
    virtual HRESULT __stdcall get_Measurement (
        double * bVal ) = 0;
    virtual HRESULT __stdcall get_Arrowhead1Block (
        BSTR * BlockName ) = 0;
    virtual HRESULT __stdcall put_Arrowhead1Block (
        BSTR BlockName ) = 0;
    virtual HRESULT __stdcall get_Arrowhead2Block (
        BSTR * BlockName ) = 0;
    virtual HRESULT __stdcall put_Arrowhead2Block (
        BSTR BlockName ) = 0;
};

struct __declspec(uuid("95825190-0f94-4a6e-a550-2bc788cb2a6d"))
IAcadDimRotated : IAcadDimension
{
    //
    // Property data
    //

    __declspec(property(get=GetAltUnits,put=PutAltUnits))
    VARIANT_BOOL AltUnits;
    __declspec(property(get=GetAltUnitsPrecision,put=PutAltUnitsPrecision))
    enum AcDimPrecision AltUnitsPrecision;
    __declspec(property(get=GetAltUnitsScale,put=PutAltUnitsScale))
    ACAD_NOUNITS AltUnitsScale;
    __declspec(property(get=GetAltRoundDistance,put=PutAltRoundDistance))
    double AltRoundDistance;
    __declspec(property(get=GetAltTolerancePrecision,put=PutAltTolerancePrecision))
    enum AcDimPrecision AltTolerancePrecision;
    __declspec(property(get=GetAltUnitsFormat,put=PutAltUnitsFormat))
    enum AcDimUnits AltUnitsFormat;
    __declspec(property(get=GetAltTextPrefix,put=PutAltTextPrefix))
    _bstr_t AltTextPrefix;
    __declspec(property(get=GetAltTextSuffix,put=PutAltTextSuffix))
    _bstr_t AltTextSuffix;
    __declspec(property(get=GetDimensionLineColor,put=PutDimensionLineColor))
    ACAD_COLOR DimensionLineColor;
    __declspec(property(get=GetExtensionLineColor,put=PutExtensionLineColor))
    ACAD_COLOR ExtensionLineColor;
    __declspec(property(get=GetPrimaryUnitsPrecision,put=PutPrimaryUnitsPrecision))
    enum AcDimPrecision PrimaryUnitsPrecision;
    __declspec(property(get=GetDimensionLineExtend,put=PutDimensionLineExtend))
    double DimensionLineExtend;
    __declspec(property(get=GetExtensionLineExtend,put=PutExtensionLineExtend))
    double ExtensionLineExtend;
    __declspec(property(get=GetFit,put=PutFit))
    enum AcDimFit Fit;
    __declspec(property(get=GetFractionFormat,put=PutFractionFormat))
    enum AcDimFractionType FractionFormat;
    __declspec(property(get=GetHorizontalTextPosition,put=PutHorizontalTextPosition))
    enum AcDimHorizontalJustification HorizontalTextPosition;
    __declspec(property(get=GetLinearScaleFactor,put=PutLinearScaleFactor))
    ACAD_NOUNITS LinearScaleFactor;
    __declspec(property(get=GetUnitsFormat,put=PutUnitsFormat))
    enum AcDimLUnits UnitsFormat;
    __declspec(property(get=GetExtensionLineWeight,put=PutExtensionLineWeight))
    ACAD_LWEIGHT ExtensionLineWeight;
    __declspec(property(get=GetRoundDistance,put=PutRoundDistance))
    double RoundDistance;
    __declspec(property(get=GetDimLine1Suppress,put=PutDimLine1Suppress))
    VARIANT_BOOL DimLine1Suppress;
    __declspec(property(get=GetDimLine2Suppress,put=PutDimLine2Suppress))
    VARIANT_BOOL DimLine2Suppress;
    __declspec(property(get=GetExtLine1Suppress,put=PutExtLine1Suppress))
    VARIANT_BOOL ExtLine1Suppress;
    __declspec(property(get=GetExtLine2Suppress,put=PutExtLine2Suppress))
    VARIANT_BOOL ExtLine2Suppress;
    __declspec(property(get=GetDimLineInside,put=PutDimLineInside))
    VARIANT_BOOL DimLineInside;
    __declspec(property(get=GetTextInsideAlign,put=PutTextInsideAlign))
    VARIANT_BOOL TextInsideAlign;
    __declspec(property(get=GetTextInside,put=PutTextInside))
    VARIANT_BOOL TextInside;
    __declspec(property(get=GetForceLineInside,put=PutForceLineInside))
    VARIANT_BOOL ForceLineInside;
    __declspec(property(get=GetTextOutsideAlign,put=PutTextOutsideAlign))
    VARIANT_BOOL TextOutsideAlign;
    __declspec(property(get=GetExtensionLineOffset,put=PutExtensionLineOffset))
    double ExtensionLineOffset;
    __declspec(property(get=GetAltSuppressLeadingZeros,put=PutAltSuppressLeadingZeros))
    VARIANT_BOOL AltSuppressLeadingZeros;
    __declspec(property(get=GetAltSuppressTrailingZeros,put=PutAltSuppressTrailingZeros))
    VARIANT_BOOL AltSuppressTrailingZeros;
    __declspec(property(get=GetAltSuppressZeroFeet,put=PutAltSuppressZeroFeet))
    VARIANT_BOOL AltSuppressZeroFeet;
    __declspec(property(get=GetAltSuppressZeroInches,put=PutAltSuppressZeroInches))
    VARIANT_BOOL AltSuppressZeroInches;
    __declspec(property(get=GetAltToleranceSuppressLeadingZeros,put=PutAltToleranceSuppressLeadingZeros))
    VARIANT_BOOL AltToleranceSuppressLeadingZeros;
    __declspec(property(get=GetAltToleranceSuppressTrailingZeros,put=PutAltToleranceSuppressTrailingZeros))
    VARIANT_BOOL AltToleranceSuppressTrailingZeros;
    __declspec(property(get=GetAltToleranceSuppressZeroFeet,put=PutAltToleranceSuppressZeroFeet))
    VARIANT_BOOL AltToleranceSuppressZeroFeet;
    __declspec(property(get=GetAltToleranceSuppressZeroInches,put=PutAltToleranceSuppressZeroInches))
    VARIANT_BOOL AltToleranceSuppressZeroInches;
    __declspec(property(get=GetSuppressZeroFeet,put=PutSuppressZeroFeet))
    VARIANT_BOOL SuppressZeroFeet;
    __declspec(property(get=GetSuppressZeroInches,put=PutSuppressZeroInches))
    VARIANT_BOOL SuppressZeroInches;
    __declspec(property(get=GetToleranceSuppressZeroFeet,put=PutToleranceSuppressZeroFeet))
    VARIANT_BOOL ToleranceSuppressZeroFeet;
    __declspec(property(get=GetToleranceSuppressZeroInches,put=PutToleranceSuppressZeroInches))
    VARIANT_BOOL ToleranceSuppressZeroInches;
    __declspec(property(get=GetDimensionLineWeight,put=PutDimensionLineWeight))
    ACAD_LWEIGHT DimensionLineWeight;
    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetArrowhead1Type,put=PutArrowhead1Type))
    enum AcDimArrowheadType Arrowhead1Type;
    __declspec(property(get=GetArrowhead2Type,put=PutArrowhead2Type))
    enum AcDimArrowheadType Arrowhead2Type;
    __declspec(property(get=GetMeasurement))
    double Measurement;
    __declspec(property(get=GetArrowhead1Block,put=PutArrowhead1Block))
    _bstr_t Arrowhead1Block;
    __declspec(property(get=GetArrowhead2Block,put=PutArrowhead2Block))
    _bstr_t Arrowhead2Block;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAltUnits ( );
    void PutAltUnits (
        VARIANT_BOOL bAlternate );
    enum AcDimPrecision GetAltUnitsPrecision ( );
    void PutAltUnitsPrecision (
        enum AcDimPrecision precision );
    ACAD_NOUNITS GetAltUnitsScale ( );
    void PutAltUnitsScale (
        ACAD_NOUNITS scale );
    double GetAltRoundDistance ( );
    void PutAltRoundDistance (
        double Distance );
    enum AcDimPrecision GetAltTolerancePrecision ( );
    void PutAltTolerancePrecision (
        enum AcDimPrecision Distance );
    enum AcDimUnits GetAltUnitsFormat ( );
    void PutAltUnitsFormat (
        enum AcDimUnits Units );
    _bstr_t GetAltTextPrefix ( );
    void PutAltTextPrefix (
        _bstr_t prefix );
    _bstr_t GetAltTextSuffix ( );
    void PutAltTextSuffix (
        _bstr_t prefix );
    ACAD_COLOR GetDimensionLineColor ( );
    void PutDimensionLineColor (
        ACAD_COLOR Type );
    ACAD_COLOR GetExtensionLineColor ( );
    void PutExtensionLineColor (
        ACAD_COLOR Type );
    enum AcDimPrecision GetPrimaryUnitsPrecision ( );
    void PutPrimaryUnitsPrecision (
        enum AcDimPrecision Prec );
    double GetDimensionLineExtend ( );
    void PutDimensionLineExtend (
        double extend );
    double GetExtensionLineExtend ( );
    void PutExtensionLineExtend (
        double extend );
    enum AcDimFit GetFit ( );
    void PutFit (
        enum AcDimFit fittype );
    enum AcDimFractionType GetFractionFormat ( );
    void PutFractionFormat (
        enum AcDimFractionType Type );
    enum AcDimHorizontalJustification GetHorizontalTextPosition ( );
    void PutHorizontalTextPosition (
        enum AcDimHorizontalJustification Type );
    ACAD_NOUNITS GetLinearScaleFactor ( );
    void PutLinearScaleFactor (
        ACAD_NOUNITS Type );
    enum AcDimLUnits GetUnitsFormat ( );
    void PutUnitsFormat (
        enum AcDimLUnits format );
    ACAD_LWEIGHT GetExtensionLineWeight ( );
    void PutExtensionLineWeight (
        ACAD_LWEIGHT lweight );
    double GetRoundDistance ( );
    void PutRoundDistance (
        double Distance );
    VARIANT_BOOL GetDimLine1Suppress ( );
    void PutDimLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLine2Suppress ( );
    void PutDimLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetExtLine1Suppress ( );
    void PutExtLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetExtLine2Suppress ( );
    void PutExtLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLineInside ( );
    void PutDimLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInsideAlign ( );
    void PutTextInsideAlign (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInside ( );
    void PutTextInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetForceLineInside ( );
    void PutForceLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextOutsideAlign ( );
    void PutTextOutsideAlign (
        VARIANT_BOOL bInside );
    double GetExtensionLineOffset ( );
    void PutExtensionLineOffset (
        double Offset );
    VARIANT_BOOL GetAltSuppressLeadingZeros ( );
    void PutAltSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressTrailingZeros ( );
    void PutAltSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroFeet ( );
    void PutAltSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroInches ( );
    void PutAltSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressLeadingZeros ( );
    void PutAltToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressTrailingZeros ( );
    void PutAltToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroFeet ( );
    void PutAltToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroInches ( );
    void PutAltToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroFeet ( );
    void PutSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroInches ( );
    void PutSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroFeet ( );
    void PutToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroInches ( );
    void PutToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    ACAD_LWEIGHT GetDimensionLineWeight ( );
    void PutDimensionLineWeight (
        ACAD_LWEIGHT weight );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    enum AcDimArrowheadType GetArrowhead1Type ( );
    void PutArrowhead1Type (
        enum AcDimArrowheadType Type );
    enum AcDimArrowheadType GetArrowhead2Type ( );
    void PutArrowhead2Type (
        enum AcDimArrowheadType Type );
    double GetMeasurement ( );
    _bstr_t GetArrowhead1Block ( );
    void PutArrowhead1Block (
        _bstr_t BlockName );
    _bstr_t GetArrowhead2Block ( );
    void PutArrowhead2Block (
        _bstr_t BlockName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_AltUnits (
        VARIANT_BOOL * bAlternate ) = 0;
    virtual HRESULT __stdcall put_AltUnits (
        VARIANT_BOOL bAlternate ) = 0;
    virtual HRESULT __stdcall get_AltUnitsPrecision (
        enum AcDimPrecision * precision ) = 0;
    virtual HRESULT __stdcall put_AltUnitsPrecision (
        enum AcDimPrecision precision ) = 0;
    virtual HRESULT __stdcall get_AltUnitsScale (
        ACAD_NOUNITS * scale ) = 0;
    virtual HRESULT __stdcall put_AltUnitsScale (
        ACAD_NOUNITS scale ) = 0;
    virtual HRESULT __stdcall get_AltRoundDistance (
        double * Distance ) = 0;
    virtual HRESULT __stdcall put_AltRoundDistance (
        double Distance ) = 0;
    virtual HRESULT __stdcall get_AltTolerancePrecision (
        enum AcDimPrecision * Distance ) = 0;
    virtual HRESULT __stdcall put_AltTolerancePrecision (
        enum AcDimPrecision Distance ) = 0;
    virtual HRESULT __stdcall get_AltUnitsFormat (
        enum AcDimUnits * Units ) = 0;
    virtual HRESULT __stdcall put_AltUnitsFormat (
        enum AcDimUnits Units ) = 0;
    virtual HRESULT __stdcall get_AltTextPrefix (
        BSTR * prefix ) = 0;
    virtual HRESULT __stdcall put_AltTextPrefix (
        BSTR prefix ) = 0;
    virtual HRESULT __stdcall get_AltTextSuffix (
        BSTR * prefix ) = 0;
    virtual HRESULT __stdcall put_AltTextSuffix (
        BSTR prefix ) = 0;
    virtual HRESULT __stdcall get_DimensionLineColor (
        ACAD_COLOR * Type ) = 0;
    virtual HRESULT __stdcall put_DimensionLineColor (
        ACAD_COLOR Type ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineColor (
        ACAD_COLOR * Type ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineColor (
        ACAD_COLOR Type ) = 0;
    virtual HRESULT __stdcall get_PrimaryUnitsPrecision (
        enum AcDimPrecision * Prec ) = 0;
    virtual HRESULT __stdcall put_PrimaryUnitsPrecision (
        enum AcDimPrecision Prec ) = 0;
    virtual HRESULT __stdcall get_DimensionLineExtend (
        double * extend ) = 0;
    virtual HRESULT __stdcall put_DimensionLineExtend (
        double extend ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineExtend (
        double * extend ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineExtend (
        double extend ) = 0;
    virtual HRESULT __stdcall get_Fit (
        enum AcDimFit * fittype ) = 0;
    virtual HRESULT __stdcall put_Fit (
        enum AcDimFit fittype ) = 0;
    virtual HRESULT __stdcall get_FractionFormat (
        enum AcDimFractionType * Type ) = 0;
    virtual HRESULT __stdcall put_FractionFormat (
        enum AcDimFractionType Type ) = 0;
    virtual HRESULT __stdcall get_HorizontalTextPosition (
        enum AcDimHorizontalJustification * Type ) = 0;
    virtual HRESULT __stdcall put_HorizontalTextPosition (
        enum AcDimHorizontalJustification Type ) = 0;
    virtual HRESULT __stdcall get_LinearScaleFactor (
        ACAD_NOUNITS * Type ) = 0;
    virtual HRESULT __stdcall put_LinearScaleFactor (
        ACAD_NOUNITS Type ) = 0;
    virtual HRESULT __stdcall get_UnitsFormat (
        enum AcDimLUnits * format ) = 0;
    virtual HRESULT __stdcall put_UnitsFormat (
        enum AcDimLUnits format ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineWeight (
        ACAD_LWEIGHT * lweight ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineWeight (
        ACAD_LWEIGHT lweight ) = 0;
    virtual HRESULT __stdcall get_RoundDistance (
        double * Distance ) = 0;
    virtual HRESULT __stdcall put_RoundDistance (
        double Distance ) = 0;
    virtual HRESULT __stdcall get_DimLine1Suppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_DimLine1Suppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_DimLine2Suppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_DimLine2Suppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_ExtLine1Suppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_ExtLine1Suppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_ExtLine2Suppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_ExtLine2Suppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_DimLineInside (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_DimLineInside (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_TextInsideAlign (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_TextInsideAlign (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_TextInside (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_TextInside (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_ForceLineInside (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_ForceLineInside (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_TextOutsideAlign (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_TextOutsideAlign (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineOffset (
        double * Offset ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineOffset (
        double Offset ) = 0;
    virtual HRESULT __stdcall get_AltSuppressLeadingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressLeadingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltSuppressTrailingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressTrailingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltSuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltSuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressLeadingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressTrailingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_SuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_SuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_SuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_SuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_ToleranceSuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_ToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_ToleranceSuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_ToleranceSuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_DimensionLineWeight (
        ACAD_LWEIGHT * weight ) = 0;
    virtual HRESULT __stdcall put_DimensionLineWeight (
        ACAD_LWEIGHT weight ) = 0;
    virtual HRESULT __stdcall get_ArrowheadSize (
        double * size ) = 0;
    virtual HRESULT __stdcall put_ArrowheadSize (
        double size ) = 0;
    virtual HRESULT __stdcall get_Arrowhead1Type (
        enum AcDimArrowheadType * Type ) = 0;
    virtual HRESULT __stdcall put_Arrowhead1Type (
        enum AcDimArrowheadType Type ) = 0;
    virtual HRESULT __stdcall get_Arrowhead2Type (
        enum AcDimArrowheadType * Type ) = 0;
    virtual HRESULT __stdcall put_Arrowhead2Type (
        enum AcDimArrowheadType Type ) = 0;
    virtual HRESULT __stdcall get_Measurement (
        double * bVal ) = 0;
    virtual HRESULT __stdcall get_Arrowhead1Block (
        BSTR * BlockName ) = 0;
    virtual HRESULT __stdcall put_Arrowhead1Block (
        BSTR BlockName ) = 0;
    virtual HRESULT __stdcall get_Arrowhead2Block (
        BSTR * BlockName ) = 0;
    virtual HRESULT __stdcall put_Arrowhead2Block (
        BSTR BlockName ) = 0;
};

struct __declspec(uuid("ee43d58e-c456-4880-a7c4-8b9e583c2c1f"))
IAcadDimOrdinate : IAcadDimension
{
    //
    // Property data
    //

    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetAltUnits,put=PutAltUnits))
    VARIANT_BOOL AltUnits;
    __declspec(property(get=GetAltUnitsPrecision,put=PutAltUnitsPrecision))
    enum AcDimPrecision AltUnitsPrecision;
    __declspec(property(get=GetAltUnitsScale,put=PutAltUnitsScale))
    ACAD_NOUNITS AltUnitsScale;
    __declspec(property(get=GetAltRoundDistance,put=PutAltRoundDistance))
    double AltRoundDistance;
    __declspec(property(get=GetAltTolerancePrecision,put=PutAltTolerancePrecision))
    enum AcDimPrecision AltTolerancePrecision;
    __declspec(property(get=GetMeasurement))
    double Measurement;
    __declspec(property(get=GetAltUnitsFormat,put=PutAltUnitsFormat))
    enum AcDimUnits AltUnitsFormat;
    __declspec(property(get=GetAltTextPrefix,put=PutAltTextPrefix))
    _bstr_t AltTextPrefix;
    __declspec(property(get=GetAltTextSuffix,put=PutAltTextSuffix))
    _bstr_t AltTextSuffix;
    __declspec(property(get=GetExtensionLineColor,put=PutExtensionLineColor))
    ACAD_COLOR ExtensionLineColor;
    __declspec(property(get=GetPrimaryUnitsPrecision,put=PutPrimaryUnitsPrecision))
    enum AcDimPrecision PrimaryUnitsPrecision;
    __declspec(property(get=GetFractionFormat,put=PutFractionFormat))
    enum AcDimFractionType FractionFormat;
    __declspec(property(get=GetLinearScaleFactor,put=PutLinearScaleFactor))
    ACAD_NOUNITS LinearScaleFactor;
    __declspec(property(get=GetUnitsFormat,put=PutUnitsFormat))
    enum AcDimLUnits UnitsFormat;
    __declspec(property(get=GetExtensionLineWeight,put=PutExtensionLineWeight))
    ACAD_LWEIGHT ExtensionLineWeight;
    __declspec(property(get=GetRoundDistance,put=PutRoundDistance))
    double RoundDistance;
    __declspec(property(get=GetExtensionLineOffset,put=PutExtensionLineOffset))
    double ExtensionLineOffset;
    __declspec(property(get=GetAltSuppressLeadingZeros,put=PutAltSuppressLeadingZeros))
    VARIANT_BOOL AltSuppressLeadingZeros;
    __declspec(property(get=GetAltSuppressTrailingZeros,put=PutAltSuppressTrailingZeros))
    VARIANT_BOOL AltSuppressTrailingZeros;
    __declspec(property(get=GetAltSuppressZeroFeet,put=PutAltSuppressZeroFeet))
    VARIANT_BOOL AltSuppressZeroFeet;
    __declspec(property(get=GetAltSuppressZeroInches,put=PutAltSuppressZeroInches))
    VARIANT_BOOL AltSuppressZeroInches;
    __declspec(property(get=GetAltToleranceSuppressLeadingZeros,put=PutAltToleranceSuppressLeadingZeros))
    VARIANT_BOOL AltToleranceSuppressLeadingZeros;
    __declspec(property(get=GetAltToleranceSuppressTrailingZeros,put=PutAltToleranceSuppressTrailingZeros))
    VARIANT_BOOL AltToleranceSuppressTrailingZeros;
    __declspec(property(get=GetAltToleranceSuppressZeroFeet,put=PutAltToleranceSuppressZeroFeet))
    VARIANT_BOOL AltToleranceSuppressZeroFeet;
    __declspec(property(get=GetAltToleranceSuppressZeroInches,put=PutAltToleranceSuppressZeroInches))
    VARIANT_BOOL AltToleranceSuppressZeroInches;
    __declspec(property(get=GetSuppressZeroFeet,put=PutSuppressZeroFeet))
    VARIANT_BOOL SuppressZeroFeet;
    __declspec(property(get=GetSuppressZeroInches,put=PutSuppressZeroInches))
    VARIANT_BOOL SuppressZeroInches;
    __declspec(property(get=GetToleranceSuppressZeroFeet,put=PutToleranceSuppressZeroFeet))
    VARIANT_BOOL ToleranceSuppressZeroFeet;
    __declspec(property(get=GetToleranceSuppressZeroInches,put=PutToleranceSuppressZeroInches))
    VARIANT_BOOL ToleranceSuppressZeroInches;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAltUnits ( );
    void PutAltUnits (
        VARIANT_BOOL bAlternate );
    enum AcDimPrecision GetAltUnitsPrecision ( );
    void PutAltUnitsPrecision (
        enum AcDimPrecision precision );
    ACAD_NOUNITS GetAltUnitsScale ( );
    void PutAltUnitsScale (
        ACAD_NOUNITS scale );
    double GetAltRoundDistance ( );
    void PutAltRoundDistance (
        double Distance );
    enum AcDimPrecision GetAltTolerancePrecision ( );
    void PutAltTolerancePrecision (
        enum AcDimPrecision Distance );
    enum AcDimUnits GetAltUnitsFormat ( );
    void PutAltUnitsFormat (
        enum AcDimUnits Units );
    _bstr_t GetAltTextPrefix ( );
    void PutAltTextPrefix (
        _bstr_t prefix );
    _bstr_t GetAltTextSuffix ( );
    void PutAltTextSuffix (
        _bstr_t prefix );
    ACAD_COLOR GetExtensionLineColor ( );
    void PutExtensionLineColor (
        ACAD_COLOR Type );
    enum AcDimPrecision GetPrimaryUnitsPrecision ( );
    void PutPrimaryUnitsPrecision (
        enum AcDimPrecision Prec );
    enum AcDimFractionType GetFractionFormat ( );
    void PutFractionFormat (
        enum AcDimFractionType Type );
    ACAD_NOUNITS GetLinearScaleFactor ( );
    void PutLinearScaleFactor (
        ACAD_NOUNITS Type );
    enum AcDimLUnits GetUnitsFormat ( );
    void PutUnitsFormat (
        enum AcDimLUnits format );
    ACAD_LWEIGHT GetExtensionLineWeight ( );
    void PutExtensionLineWeight (
        ACAD_LWEIGHT lweight );
    double GetRoundDistance ( );
    void PutRoundDistance (
        double Distance );
    double GetExtensionLineOffset ( );
    void PutExtensionLineOffset (
        double Offset );
    VARIANT_BOOL GetAltSuppressLeadingZeros ( );
    void PutAltSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressTrailingZeros ( );
    void PutAltSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroFeet ( );
    void PutAltSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroInches ( );
    void PutAltSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressLeadingZeros ( );
    void PutAltToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressTrailingZeros ( );
    void PutAltToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroFeet ( );
    void PutAltToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroInches ( );
    void PutAltToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroFeet ( );
    void PutSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroInches ( );
    void PutSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroFeet ( );
    void PutToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroInches ( );
    void PutToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    double GetMeasurement ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_AltUnits (
        VARIANT_BOOL * bAlternate ) = 0;
    virtual HRESULT __stdcall put_AltUnits (
        VARIANT_BOOL bAlternate ) = 0;
    virtual HRESULT __stdcall get_AltUnitsPrecision (
        enum AcDimPrecision * precision ) = 0;
    virtual HRESULT __stdcall put_AltUnitsPrecision (
        enum AcDimPrecision precision ) = 0;
    virtual HRESULT __stdcall get_AltUnitsScale (
        ACAD_NOUNITS * scale ) = 0;
    virtual HRESULT __stdcall put_AltUnitsScale (
        ACAD_NOUNITS scale ) = 0;
    virtual HRESULT __stdcall get_AltRoundDistance (
        double * Distance ) = 0;
    virtual HRESULT __stdcall put_AltRoundDistance (
        double Distance ) = 0;
    virtual HRESULT __stdcall get_AltTolerancePrecision (
        enum AcDimPrecision * Distance ) = 0;
    virtual HRESULT __stdcall put_AltTolerancePrecision (
        enum AcDimPrecision Distance ) = 0;
    virtual HRESULT __stdcall get_AltUnitsFormat (
        enum AcDimUnits * Units ) = 0;
    virtual HRESULT __stdcall put_AltUnitsFormat (
        enum AcDimUnits Units ) = 0;
    virtual HRESULT __stdcall get_AltTextPrefix (
        BSTR * prefix ) = 0;
    virtual HRESULT __stdcall put_AltTextPrefix (
        BSTR prefix ) = 0;
    virtual HRESULT __stdcall get_AltTextSuffix (
        BSTR * prefix ) = 0;
    virtual HRESULT __stdcall put_AltTextSuffix (
        BSTR prefix ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineColor (
        ACAD_COLOR * Type ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineColor (
        ACAD_COLOR Type ) = 0;
    virtual HRESULT __stdcall get_PrimaryUnitsPrecision (
        enum AcDimPrecision * Prec ) = 0;
    virtual HRESULT __stdcall put_PrimaryUnitsPrecision (
        enum AcDimPrecision Prec ) = 0;
    virtual HRESULT __stdcall get_FractionFormat (
        enum AcDimFractionType * Type ) = 0;
    virtual HRESULT __stdcall put_FractionFormat (
        enum AcDimFractionType Type ) = 0;
    virtual HRESULT __stdcall get_LinearScaleFactor (
        ACAD_NOUNITS * Type ) = 0;
    virtual HRESULT __stdcall put_LinearScaleFactor (
        ACAD_NOUNITS Type ) = 0;
    virtual HRESULT __stdcall get_UnitsFormat (
        enum AcDimLUnits * format ) = 0;
    virtual HRESULT __stdcall put_UnitsFormat (
        enum AcDimLUnits format ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineWeight (
        ACAD_LWEIGHT * lweight ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineWeight (
        ACAD_LWEIGHT lweight ) = 0;
    virtual HRESULT __stdcall get_RoundDistance (
        double * Distance ) = 0;
    virtual HRESULT __stdcall put_RoundDistance (
        double Distance ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineOffset (
        double * Offset ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineOffset (
        double Offset ) = 0;
    virtual HRESULT __stdcall get_AltSuppressLeadingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressLeadingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltSuppressTrailingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressTrailingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltSuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltSuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressLeadingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressTrailingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_SuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_SuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_SuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_SuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_ToleranceSuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_ToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_ToleranceSuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_ToleranceSuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_ArrowheadSize (
        double * size ) = 0;
    virtual HRESULT __stdcall put_ArrowheadSize (
        double size ) = 0;
    virtual HRESULT __stdcall get_Measurement (
        double * bVal ) = 0;
};

struct __declspec(uuid("1a67dd6d-ea28-4b50-a6b2-10e467668c87"))
IAcadDimRadial : IAcadDimension
{
    //
    // Property data
    //

    __declspec(property(get=GetDimensionLineWeight,put=PutDimensionLineWeight))
    ACAD_LWEIGHT DimensionLineWeight;
    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetAltUnits,put=PutAltUnits))
    VARIANT_BOOL AltUnits;
    __declspec(property(get=GetAltUnitsPrecision,put=PutAltUnitsPrecision))
    enum AcDimPrecision AltUnitsPrecision;
    __declspec(property(get=GetAltUnitsScale,put=PutAltUnitsScale))
    ACAD_NOUNITS AltUnitsScale;
    __declspec(property(get=GetAltRoundDistance,put=PutAltRoundDistance))
    double AltRoundDistance;
    __declspec(property(get=GetAltTolerancePrecision,put=PutAltTolerancePrecision))
    enum AcDimPrecision AltTolerancePrecision;
    __declspec(property(get=GetArrowheadType,put=PutArrowheadType))
    enum AcDimArrowheadType ArrowheadType;
    __declspec(property(get=GetAltUnitsFormat,put=PutAltUnitsFormat))
    enum AcDimUnits AltUnitsFormat;
    __declspec(property(get=GetMeasurement))
    double Measurement;
    __declspec(property(get=GetAltTextPrefix,put=PutAltTextPrefix))
    _bstr_t AltTextPrefix;
    __declspec(property(get=GetAltTextSuffix,put=PutAltTextSuffix))
    _bstr_t AltTextSuffix;
    __declspec(property(get=GetDimensionLineColor,put=PutDimensionLineColor))
    ACAD_COLOR DimensionLineColor;
    __declspec(property(get=GetArrowheadBlock,put=PutArrowheadBlock))
    _bstr_t ArrowheadBlock;
    __declspec(property(get=GetPrimaryUnitsPrecision,put=PutPrimaryUnitsPrecision))
    enum AcDimPrecision PrimaryUnitsPrecision;
    __declspec(property(get=GetFit,put=PutFit))
    enum AcDimFit Fit;
    __declspec(property(get=GetFractionFormat,put=PutFractionFormat))
    enum AcDimFractionType FractionFormat;
    __declspec(property(get=GetLinearScaleFactor,put=PutLinearScaleFactor))
    ACAD_NOUNITS LinearScaleFactor;
    __declspec(property(get=GetUnitsFormat,put=PutUnitsFormat))
    enum AcDimLUnits UnitsFormat;
    __declspec(property(get=GetRoundDistance,put=PutRoundDistance))
    double RoundDistance;
    __declspec(property(get=GetDimLineSuppress,put=PutDimLineSuppress))
    VARIANT_BOOL DimLineSuppress;
    __declspec(property(get=GetTextInsideAlign,put=PutTextInsideAlign))
    VARIANT_BOOL TextInsideAlign;
    __declspec(property(get=GetTextInside,put=PutTextInside))
    VARIANT_BOOL TextInside;
    __declspec(property(get=GetForceLineInside,put=PutForceLineInside))
    VARIANT_BOOL ForceLineInside;
    __declspec(property(get=GetTextOutsideAlign,put=PutTextOutsideAlign))
    VARIANT_BOOL TextOutsideAlign;
    __declspec(property(put=PutLeaderLength))
    double LeaderLength;
    __declspec(property(get=GetCenterType,put=PutCenterType))
    enum AcDimCenterType CenterType;
    __declspec(property(get=GetCenterMarkSize,put=PutCenterMarkSize))
    double CenterMarkSize;
    __declspec(property(get=GetAltSuppressLeadingZeros,put=PutAltSuppressLeadingZeros))
    VARIANT_BOOL AltSuppressLeadingZeros;
    __declspec(property(get=GetAltSuppressTrailingZeros,put=PutAltSuppressTrailingZeros))
    VARIANT_BOOL AltSuppressTrailingZeros;
    __declspec(property(get=GetAltSuppressZeroFeet,put=PutAltSuppressZeroFeet))
    VARIANT_BOOL AltSuppressZeroFeet;
    __declspec(property(get=GetAltSuppressZeroInches,put=PutAltSuppressZeroInches))
    VARIANT_BOOL AltSuppressZeroInches;
    __declspec(property(get=GetAltToleranceSuppressLeadingZeros,put=PutAltToleranceSuppressLeadingZeros))
    VARIANT_BOOL AltToleranceSuppressLeadingZeros;
    __declspec(property(get=GetAltToleranceSuppressTrailingZeros,put=PutAltToleranceSuppressTrailingZeros))
    VARIANT_BOOL AltToleranceSuppressTrailingZeros;
    __declspec(property(get=GetAltToleranceSuppressZeroFeet,put=PutAltToleranceSuppressZeroFeet))
    VARIANT_BOOL AltToleranceSuppressZeroFeet;
    __declspec(property(get=GetAltToleranceSuppressZeroInches,put=PutAltToleranceSuppressZeroInches))
    VARIANT_BOOL AltToleranceSuppressZeroInches;
    __declspec(property(get=GetSuppressZeroFeet,put=PutSuppressZeroFeet))
    VARIANT_BOOL SuppressZeroFeet;
    __declspec(property(get=GetSuppressZeroInches,put=PutSuppressZeroInches))
    VARIANT_BOOL SuppressZeroInches;
    __declspec(property(get=GetToleranceSuppressZeroFeet,put=PutToleranceSuppressZeroFeet))
    VARIANT_BOOL ToleranceSuppressZeroFeet;
    __declspec(property(get=GetToleranceSuppressZeroInches,put=PutToleranceSuppressZeroInches))
    VARIANT_BOOL ToleranceSuppressZeroInches;

    //
    // Wrapper methods for error-handling
    //

    void PutLeaderLength (
        double _arg1 );
    VARIANT_BOOL GetAltUnits ( );
    void PutAltUnits (
        VARIANT_BOOL bAlternate );
    enum AcDimPrecision GetAltUnitsPrecision ( );
    void PutAltUnitsPrecision (
        enum AcDimPrecision precision );
    ACAD_NOUNITS GetAltUnitsScale ( );
    void PutAltUnitsScale (
        ACAD_NOUNITS scale );
    double GetAltRoundDistance ( );
    void PutAltRoundDistance (
        double Distance );
    enum AcDimPrecision GetAltTolerancePrecision ( );
    void PutAltTolerancePrecision (
        enum AcDimPrecision Distance );
    enum AcDimUnits GetAltUnitsFormat ( );
    void PutAltUnitsFormat (
        enum AcDimUnits Units );
    _bstr_t GetAltTextPrefix ( );
    void PutAltTextPrefix (
        _bstr_t prefix );
    _bstr_t GetAltTextSuffix ( );
    void PutAltTextSuffix (
        _bstr_t prefix );
    enum AcDimCenterType GetCenterType ( );
    void PutCenterType (
        enum AcDimCenterType Type );
    double GetCenterMarkSize ( );
    void PutCenterMarkSize (
        double Type );
    ACAD_COLOR GetDimensionLineColor ( );
    void PutDimensionLineColor (
        ACAD_COLOR Type );
    enum AcDimPrecision GetPrimaryUnitsPrecision ( );
    void PutPrimaryUnitsPrecision (
        enum AcDimPrecision Prec );
    enum AcDimFractionType GetFractionFormat ( );
    void PutFractionFormat (
        enum AcDimFractionType Type );
    enum AcDimFit GetFit ( );
    void PutFit (
        enum AcDimFit fittype );
    ACAD_NOUNITS GetLinearScaleFactor ( );
    void PutLinearScaleFactor (
        ACAD_NOUNITS Type );
    enum AcDimLUnits GetUnitsFormat ( );
    void PutUnitsFormat (
        enum AcDimLUnits format );
    double GetRoundDistance ( );
    void PutRoundDistance (
        double Distance );
    VARIANT_BOOL GetDimLineSuppress ( );
    void PutDimLineSuppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetTextInsideAlign ( );
    void PutTextInsideAlign (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInside ( );
    void PutTextInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetForceLineInside ( );
    void PutForceLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextOutsideAlign ( );
    void PutTextOutsideAlign (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetAltSuppressLeadingZeros ( );
    void PutAltSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressTrailingZeros ( );
    void PutAltSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroFeet ( );
    void PutAltSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroInches ( );
    void PutAltSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressLeadingZeros ( );
    void PutAltToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressTrailingZeros ( );
    void PutAltToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroFeet ( );
    void PutAltToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroInches ( );
    void PutAltToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroFeet ( );
    void PutSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroInches ( );
    void PutSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroFeet ( );
    void PutToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroInches ( );
    void PutToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    ACAD_LWEIGHT GetDimensionLineWeight ( );
    void PutDimensionLineWeight (
        ACAD_LWEIGHT weight );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    enum AcDimArrowheadType GetArrowheadType ( );
    void PutArrowheadType (
        enum AcDimArrowheadType Type );
    double GetMeasurement ( );
    _bstr_t GetArrowheadBlock ( );
    void PutArrowheadBlock (
        _bstr_t BlockName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall put_LeaderLength (
        double _arg1 ) = 0;
    virtual HRESULT __stdcall get_AltUnits (
        VARIANT_BOOL * bAlternate ) = 0;
    virtual HRESULT __stdcall put_AltUnits (
        VARIANT_BOOL bAlternate ) = 0;
    virtual HRESULT __stdcall get_AltUnitsPrecision (
        enum AcDimPrecision * precision ) = 0;
    virtual HRESULT __stdcall put_AltUnitsPrecision (
        enum AcDimPrecision precision ) = 0;
    virtual HRESULT __stdcall get_AltUnitsScale (
        ACAD_NOUNITS * scale ) = 0;
    virtual HRESULT __stdcall put_AltUnitsScale (
        ACAD_NOUNITS scale ) = 0;
    virtual HRESULT __stdcall get_AltRoundDistance (
        double * Distance ) = 0;
    virtual HRESULT __stdcall put_AltRoundDistance (
        double Distance ) = 0;
    virtual HRESULT __stdcall get_AltTolerancePrecision (
        enum AcDimPrecision * Distance ) = 0;
    virtual HRESULT __stdcall put_AltTolerancePrecision (
        enum AcDimPrecision Distance ) = 0;
    virtual HRESULT __stdcall get_AltUnitsFormat (
        enum AcDimUnits * Units ) = 0;
    virtual HRESULT __stdcall put_AltUnitsFormat (
        enum AcDimUnits Units ) = 0;
    virtual HRESULT __stdcall get_AltTextPrefix (
        BSTR * prefix ) = 0;
    virtual HRESULT __stdcall put_AltTextPrefix (
        BSTR prefix ) = 0;
    virtual HRESULT __stdcall get_AltTextSuffix (
        BSTR * prefix ) = 0;
    virtual HRESULT __stdcall put_AltTextSuffix (
        BSTR prefix ) = 0;
    virtual HRESULT __stdcall get_CenterType (
        enum AcDimCenterType * Type ) = 0;
    virtual HRESULT __stdcall put_CenterType (
        enum AcDimCenterType Type ) = 0;
    virtual HRESULT __stdcall get_CenterMarkSize (
        double * Type ) = 0;
    virtual HRESULT __stdcall put_CenterMarkSize (
        double Type ) = 0;
    virtual HRESULT __stdcall get_DimensionLineColor (
        ACAD_COLOR * Type ) = 0;
    virtual HRESULT __stdcall put_DimensionLineColor (
        ACAD_COLOR Type ) = 0;
    virtual HRESULT __stdcall get_PrimaryUnitsPrecision (
        enum AcDimPrecision * Prec ) = 0;
    virtual HRESULT __stdcall put_PrimaryUnitsPrecision (
        enum AcDimPrecision Prec ) = 0;
    virtual HRESULT __stdcall get_FractionFormat (
        enum AcDimFractionType * Type ) = 0;
    virtual HRESULT __stdcall put_FractionFormat (
        enum AcDimFractionType Type ) = 0;
    virtual HRESULT __stdcall get_Fit (
        enum AcDimFit * fittype ) = 0;
    virtual HRESULT __stdcall put_Fit (
        enum AcDimFit fittype ) = 0;
    virtual HRESULT __stdcall get_LinearScaleFactor (
        ACAD_NOUNITS * Type ) = 0;
    virtual HRESULT __stdcall put_LinearScaleFactor (
        ACAD_NOUNITS Type ) = 0;
    virtual HRESULT __stdcall get_UnitsFormat (
        enum AcDimLUnits * format ) = 0;
    virtual HRESULT __stdcall put_UnitsFormat (
        enum AcDimLUnits format ) = 0;
    virtual HRESULT __stdcall get_RoundDistance (
        double * Distance ) = 0;
    virtual HRESULT __stdcall put_RoundDistance (
        double Distance ) = 0;
    virtual HRESULT __stdcall get_DimLineSuppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_DimLineSuppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_TextInsideAlign (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_TextInsideAlign (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_TextInside (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_TextInside (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_ForceLineInside (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_ForceLineInside (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_TextOutsideAlign (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_TextOutsideAlign (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_AltSuppressLeadingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressLeadingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltSuppressTrailingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressTrailingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltSuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltSuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltSuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressLeadingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressTrailingZeros (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_AltToleranceSuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_AltToleranceSuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_SuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_SuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_SuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_SuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_ToleranceSuppressZeroFeet (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_ToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_ToleranceSuppressZeroInches (
        VARIANT_BOOL * bVal ) = 0;
    virtual HRESULT __stdcall put_ToleranceSuppressZeroInches (
        VARIANT_BOOL bVal ) = 0;
    virtual HRESULT __stdcall get_DimensionLineWeight (
        ACAD_LWEIGHT * weight ) = 0;
    virtual HRESULT __stdcall put_DimensionLineWeight (
        ACAD_LWEIGHT weight ) = 0;
    virtual HRESULT __stdcall get_ArrowheadSize (
        double * size ) = 0;
    virtual HRESULT __stdcall put_ArrowheadSize (
        double size ) = 0;
    virtual HRESULT __stdcall get_ArrowheadType (
        enum AcDimArrowheadType * Type ) = 0;
    virtual HRESULT __stdcall put_ArrowheadType (
        enum AcDimArrowheadType Type ) = 0;
    virtual HRESULT __stdcall get_Measurement (
        double * bVal ) = 0;
    virtual HRESULT __stdcall get_ArrowheadBlock (
        BSTR * BlockName ) = 0;
    virtual HRESULT __stdcall put_ArrowheadBlock (
        BSTR BlockName ) = 0;
};

struct __declspec(uuid("227531a4-6450-4a43-8717-ef636fdac1be"))
IAcadEllipse : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStartPoint))
    _variant_t StartPoint;
    __declspec(property(get=GetCenter,put=PutCenter))
    _variant_t Center;
    __declspec(property(get=GetEndPoint))
    _variant_t EndPoint;
    __declspec(property(get=GetMajorRadius,put=PutMajorRadius))
    double MajorRadius;
    __declspec(property(get=GetMinorRadius,put=PutMinorRadius))
    double MinorRadius;
    __declspec(property(get=GetRadiusRatio,put=PutRadiusRatio))
    double RadiusRatio;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    ACAD_ANGLE StartAngle;
    __declspec(property(get=GetEndAngle,put=PutEndAngle))
    ACAD_ANGLE EndAngle;
    __declspec(property(get=GetStartParameter,put=PutStartParameter))
    double StartParameter;
    __declspec(property(get=GetEndParameter,put=PutEndParameter))
    double EndParameter;
    __declspec(property(get=GetMajorAxis,put=PutMajorAxis))
    _variant_t MajorAxis;
    __declspec(property(get=GetMinorAxis))
    _variant_t MinorAxis;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetArea))
    double Area;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartPoint ( );
    _variant_t GetCenter ( );
    void PutCenter (
        const _variant_t & Center );
    _variant_t GetEndPoint ( );
    double GetMajorRadius ( );
    void PutMajorRadius (
        double MajorRadius );
    double GetMinorRadius ( );
    void PutMinorRadius (
        double MinorRadius );
    double GetRadiusRatio ( );
    void PutRadiusRatio (
        double RadiusRatio );
    ACAD_ANGLE GetStartAngle ( );
    void PutStartAngle (
        ACAD_ANGLE StartAngle );
    ACAD_ANGLE GetEndAngle ( );
    void PutEndAngle (
        ACAD_ANGLE EndAngle );
    double GetStartParameter ( );
    void PutStartParameter (
        double StartParameter );
    double GetEndParameter ( );
    void PutEndParameter (
        double EndParameter );
    _variant_t GetMajorAxis ( );
    void PutMajorAxis (
        const _variant_t & MajorAxis );
    _variant_t GetMinorAxis ( );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetArea ( );
    _variant_t Offset (
        double Distance );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_StartPoint (
        VARIANT * StartPoint ) = 0;
    virtual HRESULT __stdcall get_Center (
        VARIANT * Center ) = 0;
    virtual HRESULT __stdcall put_Center (
        VARIANT Center ) = 0;
    virtual HRESULT __stdcall get_EndPoint (
        VARIANT * EndPoint ) = 0;
    virtual HRESULT __stdcall get_MajorRadius (
        double * MajorRadius ) = 0;
    virtual HRESULT __stdcall put_MajorRadius (
        double MajorRadius ) = 0;
    virtual HRESULT __stdcall get_MinorRadius (
        double * MinorRadius ) = 0;
    virtual HRESULT __stdcall put_MinorRadius (
        double MinorRadius ) = 0;
    virtual HRESULT __stdcall get_RadiusRatio (
        double * RadiusRatio ) = 0;
    virtual HRESULT __stdcall put_RadiusRatio (
        double RadiusRatio ) = 0;
    virtual HRESULT __stdcall get_StartAngle (
        ACAD_ANGLE * StartAngle ) = 0;
    virtual HRESULT __stdcall put_StartAngle (
        ACAD_ANGLE StartAngle ) = 0;
    virtual HRESULT __stdcall get_EndAngle (
        ACAD_ANGLE * EndAngle ) = 0;
    virtual HRESULT __stdcall put_EndAngle (
        ACAD_ANGLE EndAngle ) = 0;
    virtual HRESULT __stdcall get_StartParameter (
        double * StartParameter ) = 0;
    virtual HRESULT __stdcall put_StartParameter (
        double StartParameter ) = 0;
    virtual HRESULT __stdcall get_EndParameter (
        double * EndParameter ) = 0;
    virtual HRESULT __stdcall put_EndParameter (
        double EndParameter ) = 0;
    virtual HRESULT __stdcall get_MajorAxis (
        VARIANT * MajorAxis ) = 0;
    virtual HRESULT __stdcall put_MajorAxis (
        VARIANT MajorAxis ) = 0;
    virtual HRESULT __stdcall get_MinorAxis (
        VARIANT * MinorAxis ) = 0;
    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall put_Normal (
        VARIANT Normal ) = 0;
    virtual HRESULT __stdcall get_Area (
        double * Area ) = 0;
    virtual HRESULT __stdcall raw_Offset (
        double Distance,
        VARIANT * pOffsetCurves ) = 0;
};

struct __declspec(uuid("f7426830-9601-411d-86ec-92d865368837"))
IAcadLeader : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetNormal))
    _variant_t Normal;
    __declspec(property(get=GetType,put=PutType))
    enum AcLeaderType Type;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];
    __declspec(property(get=GetAnnotation,put=PutAnnotation))
    IAcadEntityPtr Annotation;
    __declspec(property(get=GetArrowheadType,put=PutArrowheadType))
    enum AcDimArrowheadType ArrowheadType;
    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetArrowheadBlock,put=PutArrowheadBlock))
    _bstr_t ArrowheadBlock;
    __declspec(property(get=GetDimensionLineColor,put=PutDimensionLineColor))
    ACAD_COLOR DimensionLineColor;
    __declspec(property(get=GetDimensionLineWeight,put=PutDimensionLineWeight))
    ACAD_LWEIGHT DimensionLineWeight;
    __declspec(property(get=GetTextGap,put=PutTextGap))
    double TextGap;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    ACAD_NOUNITS ScaleFactor;
    __declspec(property(get=GetVerticalTextPosition,put=PutVerticalTextPosition))
    enum AcDimVerticalJustification VerticalTextPosition;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & Coordinates );
    _variant_t GetNormal ( );
    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t bstrName );
    enum AcLeaderType GetType ( );
    void PutType (
        enum AcLeaderType Type );
    HRESULT Evaluate ( );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );
    IAcadEntityPtr GetAnnotation ( );
    void PutAnnotation (
        struct IAcadEntity * pVal );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    enum AcDimArrowheadType GetArrowheadType ( );
    void PutArrowheadType (
        enum AcDimArrowheadType Type );
    ACAD_COLOR GetDimensionLineColor ( );
    void PutDimensionLineColor (
        ACAD_COLOR Type );
    ACAD_LWEIGHT GetDimensionLineWeight ( );
    void PutDimensionLineWeight (
        ACAD_LWEIGHT weight );
    ACAD_NOUNITS GetScaleFactor ( );
    void PutScaleFactor (
        ACAD_NOUNITS factor );
    enum AcDimVerticalJustification GetVerticalTextPosition ( );
    void PutVerticalTextPosition (
        enum AcDimVerticalJustification Type );
    double GetTextGap ( );
    void PutTextGap (
        double Offset );
    _bstr_t GetArrowheadBlock ( );
    void PutArrowheadBlock (
        _bstr_t BlockName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Coordinates (
        VARIANT * Coordinates ) = 0;
    virtual HRESULT __stdcall put_Coordinates (
        VARIANT Coordinates ) = 0;
    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall get_StyleName (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_StyleName (
        BSTR bstrName ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum AcLeaderType * Type ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum AcLeaderType Type ) = 0;
    virtual HRESULT __stdcall raw_Evaluate ( ) = 0;
    virtual HRESULT __stdcall get_Coordinate (
        int Index,
        VARIANT * pVal ) = 0;
    virtual HRESULT __stdcall put_Coordinate (
        int Index,
        VARIANT pVal ) = 0;
    virtual HRESULT __stdcall get_Annotation (
        struct IAcadEntity * * pVal ) = 0;
    virtual HRESULT __stdcall put_Annotation (
        struct IAcadEntity * pVal ) = 0;
    virtual HRESULT __stdcall get_ArrowheadSize (
        double * size ) = 0;
    virtual HRESULT __stdcall put_ArrowheadSize (
        double size ) = 0;
    virtual HRESULT __stdcall get_ArrowheadType (
        enum AcDimArrowheadType * Type ) = 0;
    virtual HRESULT __stdcall put_ArrowheadType (
        enum AcDimArrowheadType Type ) = 0;
    virtual HRESULT __stdcall get_DimensionLineColor (
        ACAD_COLOR * Type ) = 0;
    virtual HRESULT __stdcall put_DimensionLineColor (
        ACAD_COLOR Type ) = 0;
    virtual HRESULT __stdcall get_DimensionLineWeight (
        ACAD_LWEIGHT * weight ) = 0;
    virtual HRESULT __stdcall put_DimensionLineWeight (
        ACAD_LWEIGHT weight ) = 0;
    virtual HRESULT __stdcall get_ScaleFactor (
        ACAD_NOUNITS * factor ) = 0;
    virtual HRESULT __stdcall put_ScaleFactor (
        ACAD_NOUNITS factor ) = 0;
    virtual HRESULT __stdcall get_VerticalTextPosition (
        enum AcDimVerticalJustification * Type ) = 0;
    virtual HRESULT __stdcall put_VerticalTextPosition (
        enum AcDimVerticalJustification Type ) = 0;
    virtual HRESULT __stdcall get_TextGap (
        double * Offset ) = 0;
    virtual HRESULT __stdcall put_TextGap (
        double Offset ) = 0;
    virtual HRESULT __stdcall get_ArrowheadBlock (
        BSTR * BlockName ) = 0;
    virtual HRESULT __stdcall put_ArrowheadBlock (
        BSTR BlockName ) = 0;
};

struct __declspec(uuid("bf56989b-a903-4bd1-bc12-619ccdd67b47"))
IAcadMText : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTextString,put=PutTextString))
    _bstr_t TextString;
    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetAttachmentPoint,put=PutAttachmentPoint))
    enum AcAttachmentPoint AttachmentPoint;
    __declspec(property(get=GetDrawingDirection,put=PutDrawingDirection))
    enum AcDrawingDirection DrawingDirection;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetInsertionPoint,put=PutInsertionPoint))
    _variant_t InsertionPoint;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetLineSpacingFactor,put=PutLineSpacingFactor))
    double LineSpacingFactor;
    __declspec(property(get=GetLineSpacingStyle,put=PutLineSpacingStyle))
    enum AcLineSpacingStyle LineSpacingStyle;
    __declspec(property(get=GetLineSpacingDistance,put=PutLineSpacingDistance))
    double LineSpacingDistance;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTextString ( );
    void PutTextString (
        _bstr_t bstrText );
    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t bstrName );
    enum AcAttachmentPoint GetAttachmentPoint ( );
    void PutAttachmentPoint (
        enum AcAttachmentPoint attPoint );
    enum AcDrawingDirection GetDrawingDirection ( );
    void PutDrawingDirection (
        enum AcDrawingDirection drawDir );
    double GetWidth ( );
    void PutWidth (
        double Width );
    double GetHeight ( );
    void PutHeight (
        double Height );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rotAngle );
    _variant_t GetInsertionPoint ( );
    void PutInsertionPoint (
        const _variant_t & insPoint );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetLineSpacingFactor ( );
    void PutLineSpacingFactor (
        double factor );
    enum AcLineSpacingStyle GetLineSpacingStyle ( );
    void PutLineSpacingStyle (
        enum AcLineSpacingStyle style );
    double GetLineSpacingDistance ( );
    void PutLineSpacingDistance (
        double Value );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_TextString (
        BSTR * bstrText ) = 0;
    virtual HRESULT __stdcall put_TextString (
        BSTR bstrText ) = 0;
    virtual HRESULT __stdcall get_StyleName (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_StyleName (
        BSTR bstrName ) = 0;
    virtual HRESULT __stdcall get_AttachmentPoint (
        enum AcAttachmentPoint * attPoint ) = 0;
    virtual HRESULT __stdcall put_AttachmentPoint (
        enum AcAttachmentPoint attPoint ) = 0;
    virtual HRESULT __stdcall get_DrawingDirection (
        enum AcDrawingDirection * drawDir ) = 0;
    virtual HRESULT __stdcall put_DrawingDirection (
        enum AcDrawingDirection drawDir ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * Width ) = 0;
    virtual HRESULT __stdcall put_Width (
        double Width ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * Height ) = 0;
    virtual HRESULT __stdcall put_Height (
        double Height ) = 0;
    virtual HRESULT __stdcall get_Rotation (
        ACAD_ANGLE * rotAngle ) = 0;
    virtual HRESULT __stdcall put_Rotation (
        ACAD_ANGLE rotAngle ) = 0;
    virtual HRESULT __stdcall get_InsertionPoint (
        VARIANT * insPoint ) = 0;
    virtual HRESULT __stdcall put_InsertionPoint (
        VARIANT insPoint ) = 0;
    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall put_Normal (
        VARIANT Normal ) = 0;
    virtual HRESULT __stdcall get_LineSpacingFactor (
        double * factor ) = 0;
    virtual HRESULT __stdcall put_LineSpacingFactor (
        double factor ) = 0;
    virtual HRESULT __stdcall get_LineSpacingStyle (
        enum AcLineSpacingStyle * style ) = 0;
    virtual HRESULT __stdcall put_LineSpacingStyle (
        enum AcLineSpacingStyle style ) = 0;
    virtual HRESULT __stdcall get_LineSpacingDistance (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_LineSpacingDistance (
        double Value ) = 0;
};

struct __declspec(uuid("35af3ab5-755e-4ac9-8baf-31b532870751"))
IAcadPoint : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & Coordinates );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetThickness ( );
    void PutThickness (
        double Thickness );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Coordinates (
        VARIANT * Coordinates ) = 0;
    virtual HRESULT __stdcall put_Coordinates (
        VARIANT Coordinates ) = 0;
    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall put_Normal (
        VARIANT Normal ) = 0;
    virtual HRESULT __stdcall get_Thickness (
        double * Thickness ) = 0;
    virtual HRESULT __stdcall put_Thickness (
        double Thickness ) = 0;
};

struct __declspec(uuid("da06170c-db48-4f07-a5fb-df33f9d086e4"))
IAcadLWPolyline : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetConstantWidth,put=PutConstantWidth))
    double ConstantWidth;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];
    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetLinetypeGeneration,put=PutLinetypeGeneration))
    VARIANT_BOOL LinetypeGeneration;
    __declspec(property(get=GetLength))
    double Length;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & Coordinates );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    HRESULT AddVertex (
        int Index,
        const _variant_t & vertex );
    _variant_t Explode ( );
    double GetBulge (
        int Index );
    HRESULT SetBulge (
        int Index,
        double bulge );
    HRESULT GetWidth (
        int Index,
        double * StartWidth,
        double * EndWidth );
    HRESULT SetWidth (
        int Index,
        double StartWidth,
        double EndWidth );
    double GetConstantWidth ( );
    void PutConstantWidth (
        double Width );
    _variant_t Offset (
        double Distance );
    double GetElevation ( );
    void PutElevation (
        double Elevation );
    double GetArea ( );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );
    VARIANT_BOOL GetClosed ( );
    void PutClosed (
        VARIANT_BOOL fClose );
    VARIANT_BOOL GetLinetypeGeneration ( );
    void PutLinetypeGeneration (
        VARIANT_BOOL bLinetypeGen );
    double GetLength ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Coordinates (
        VARIANT * Coordinates ) = 0;
    virtual HRESULT __stdcall put_Coordinates (
        VARIANT Coordinates ) = 0;
    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall put_Normal (
        VARIANT Normal ) = 0;
    virtual HRESULT __stdcall get_Thickness (
        double * Thickness ) = 0;
    virtual HRESULT __stdcall put_Thickness (
        double Thickness ) = 0;
    virtual HRESULT __stdcall raw_AddVertex (
        int Index,
        VARIANT vertex ) = 0;
    virtual HRESULT __stdcall raw_Explode (
        VARIANT * pArrayObjs ) = 0;
    virtual HRESULT __stdcall raw_GetBulge (
        int Index,
        double * bulge ) = 0;
    virtual HRESULT __stdcall raw_SetBulge (
        int Index,
        double bulge ) = 0;
    virtual HRESULT __stdcall raw_GetWidth (
        int Index,
        double * StartWidth,
        double * EndWidth ) = 0;
    virtual HRESULT __stdcall raw_SetWidth (
        int Index,
        double StartWidth,
        double EndWidth ) = 0;
    virtual HRESULT __stdcall get_ConstantWidth (
        double * Width ) = 0;
    virtual HRESULT __stdcall put_ConstantWidth (
        double Width ) = 0;
    virtual HRESULT __stdcall raw_Offset (
        double Distance,
        VARIANT * pOffsetCurves ) = 0;
    virtual HRESULT __stdcall get_Elevation (
        double * Elevation ) = 0;
    virtual HRESULT __stdcall put_Elevation (
        double Elevation ) = 0;
    virtual HRESULT __stdcall get_Area (
        double * Area ) = 0;
    virtual HRESULT __stdcall get_Coordinate (
        int Index,
        VARIANT * pVal ) = 0;
    virtual HRESULT __stdcall put_Coordinate (
        int Index,
        VARIANT pVal ) = 0;
    virtual HRESULT __stdcall get_Closed (
        VARIANT_BOOL * fClose ) = 0;
    virtual HRESULT __stdcall put_Closed (
        VARIANT_BOOL fClose ) = 0;
    virtual HRESULT __stdcall get_LinetypeGeneration (
        VARIANT_BOOL * bLinetypeGen ) = 0;
    virtual HRESULT __stdcall put_LinetypeGeneration (
        VARIANT_BOOL bLinetypeGen ) = 0;
    virtual HRESULT __stdcall get_Length (
        double * Length ) = 0;
};

struct __declspec(uuid("4d07b3da-1d65-4d58-967a-e3a02e255ee0"))
IAcadPolyline : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetConstantWidth,put=PutConstantWidth))
    double ConstantWidth;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetType,put=PutType))
    enum AcPolylineType Type;
    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetLinetypeGeneration,put=PutLinetypeGeneration))
    VARIANT_BOOL LinetypeGeneration;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];
    __declspec(property(get=GetLength))
    double Length;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & Coordinates );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    HRESULT AppendVertex (
        const _variant_t & vertex );
    _variant_t Explode ( );
    double GetBulge (
        int Index );
    HRESULT SetBulge (
        int Index,
        double bulge );
    HRESULT GetWidth (
        int Index,
        double * StartWidth,
        double * EndWidth );
    HRESULT SetWidth (
        int Index,
        double StartWidth,
        double EndWidth );
    double GetConstantWidth ( );
    void PutConstantWidth (
        double Width );
    _variant_t Offset (
        double Distance );
    double GetElevation ( );
    void PutElevation (
        double Elevation );
    enum AcPolylineType GetType ( );
    void PutType (
        enum AcPolylineType Type );
    VARIANT_BOOL GetClosed ( );
    void PutClosed (
        VARIANT_BOOL fClose );
    VARIANT_BOOL GetLinetypeGeneration ( );
    void PutLinetypeGeneration (
        VARIANT_BOOL bLinetypeGen );
    double GetArea ( );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );
    double GetLength ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Coordinates (
        VARIANT * Coordinates ) = 0;
    virtual HRESULT __stdcall put_Coordinates (
        VARIANT Coordinates ) = 0;
    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall put_Normal (
        VARIANT Normal ) = 0;
    virtual HRESULT __stdcall get_Thickness (
        double * Thickness ) = 0;
    virtual HRESULT __stdcall put_Thickness (
        double Thickness ) = 0;
    virtual HRESULT __stdcall raw_AppendVertex (
        VARIANT vertex ) = 0;
    virtual HRESULT __stdcall raw_Explode (
        VARIANT * pArrayObjs ) = 0;
    virtual HRESULT __stdcall raw_GetBulge (
        int Index,
        double * bulge ) = 0;
    virtual HRESULT __stdcall raw_SetBulge (
        int Index,
        double bulge ) = 0;
    virtual HRESULT __stdcall raw_GetWidth (
        int Index,
        double * StartWidth,
        double * EndWidth ) = 0;
    virtual HRESULT __stdcall raw_SetWidth (
        int Index,
        double StartWidth,
        double EndWidth ) = 0;
    virtual HRESULT __stdcall get_ConstantWidth (
        double * Width ) = 0;
    virtual HRESULT __stdcall put_ConstantWidth (
        double Width ) = 0;
    virtual HRESULT __stdcall raw_Offset (
        double Distance,
        VARIANT * pOffsetCurves ) = 0;
    virtual HRESULT __stdcall get_Elevation (
        double * Elevation ) = 0;
    virtual HRESULT __stdcall put_Elevation (
        double Elevation ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum AcPolylineType * Type ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum AcPolylineType Type ) = 0;
    virtual HRESULT __stdcall get_Closed (
        VARIANT_BOOL * fClose ) = 0;
    virtual HRESULT __stdcall put_Closed (
        VARIANT_BOOL fClose ) = 0;
    virtual HRESULT __stdcall get_LinetypeGeneration (
        VARIANT_BOOL * bLinetypeGen ) = 0;
    virtual HRESULT __stdcall put_LinetypeGeneration (
        VARIANT_BOOL bLinetypeGen ) = 0;
    virtual HRESULT __stdcall get_Area (
        double * Area ) = 0;
    virtual HRESULT __stdcall get_Coordinate (
        int Index,
        VARIANT * pVal ) = 0;
    virtual HRESULT __stdcall put_Coordinate (
        int Index,
        VARIANT pVal ) = 0;
    virtual HRESULT __stdcall get_Length (
        double * Length ) = 0;
};

struct __declspec(uuid("5b8581a5-35db-4ad5-bb54-7997d2650b85"))
IAcadRay : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetBasePoint,put=PutBasePoint))
    _variant_t BasePoint;
    __declspec(property(get=GetSecondPoint,put=PutSecondPoint))
    _variant_t SecondPoint;
    __declspec(property(get=GetDirectionVector,put=PutDirectionVector))
    _variant_t DirectionVector;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetBasePoint ( );
    void PutBasePoint (
        const _variant_t & BasePoint );
    _variant_t GetSecondPoint ( );
    void PutSecondPoint (
        const _variant_t & SecondPoint );
    _variant_t GetDirectionVector ( );
    void PutDirectionVector (
        const _variant_t & dirVector );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_BasePoint (
        VARIANT * BasePoint ) = 0;
    virtual HRESULT __stdcall put_BasePoint (
        VARIANT BasePoint ) = 0;
    virtual HRESULT __stdcall get_SecondPoint (
        VARIANT * SecondPoint ) = 0;
    virtual HRESULT __stdcall put_SecondPoint (
        VARIANT SecondPoint ) = 0;
    virtual HRESULT __stdcall get_DirectionVector (
        VARIANT * dirVector ) = 0;
    virtual HRESULT __stdcall put_DirectionVector (
        VARIANT dirVector ) = 0;
};

struct __declspec(uuid("2ae0c4d6-131f-483a-bfbe-2c2ad27bbdd3"))
IAcadShape : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetInsertionPoint,put=PutInsertionPoint))
    _variant_t InsertionPoint;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    ACAD_NOUNITS ScaleFactor;
    __declspec(property(get=GetObliqueAngle,put=PutObliqueAngle))
    ACAD_ANGLE ObliqueAngle;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetInsertionPoint ( );
    void PutInsertionPoint (
        const _variant_t & insPoint );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    double GetHeight ( );
    void PutHeight (
        double Height );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rotAngle );
    ACAD_NOUNITS GetScaleFactor ( );
    void PutScaleFactor (
        ACAD_NOUNITS scalFactor );
    ACAD_ANGLE GetObliqueAngle ( );
    void PutObliqueAngle (
        ACAD_ANGLE obliAngle );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetThickness ( );
    void PutThickness (
        double Thickness );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_InsertionPoint (
        VARIANT * insPoint ) = 0;
    virtual HRESULT __stdcall put_InsertionPoint (
        VARIANT insPoint ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR bstrName ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * Height ) = 0;
    virtual HRESULT __stdcall put_Height (
        double Height ) = 0;
    virtual HRESULT __stdcall get_Rotation (
        ACAD_ANGLE * rotAngle ) = 0;
    virtual HRESULT __stdcall put_Rotation (
        ACAD_ANGLE rotAngle ) = 0;
    virtual HRESULT __stdcall get_ScaleFactor (
        ACAD_NOUNITS * scalFactor ) = 0;
    virtual HRESULT __stdcall put_ScaleFactor (
        ACAD_NOUNITS scalFactor ) = 0;
    virtual HRESULT __stdcall get_ObliqueAngle (
        ACAD_ANGLE * obliAngle ) = 0;
    virtual HRESULT __stdcall put_ObliqueAngle (
        ACAD_ANGLE obliAngle ) = 0;
    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall put_Normal (
        VARIANT Normal ) = 0;
    virtual HRESULT __stdcall get_Thickness (
        double * Thickness ) = 0;
    virtual HRESULT __stdcall put_Thickness (
        double Thickness ) = 0;
};

struct __declspec(uuid("96757fd8-8159-4ba8-85a9-f37b34433081"))
IAcadSolid : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & corners );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Coordinates (
        VARIANT * corners ) = 0;
    virtual HRESULT __stdcall put_Coordinates (
        VARIANT corners ) = 0;
    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall put_Normal (
        VARIANT Normal ) = 0;
    virtual HRESULT __stdcall get_Thickness (
        double * Thickness ) = 0;
    virtual HRESULT __stdcall put_Thickness (
        double Thickness ) = 0;
    virtual HRESULT __stdcall get_Coordinate (
        int Index,
        VARIANT * pVal ) = 0;
    virtual HRESULT __stdcall put_Coordinate (
        int Index,
        VARIANT pVal ) = 0;
};

struct __declspec(uuid("975097ab-170f-434e-b6a5-012f28f7749a"))
IAcadSpline : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfControlPoints))
    long NumberOfControlPoints;
    __declspec(property(get=GetControlPoints,put=PutControlPoints))
    _variant_t ControlPoints;
    __declspec(property(get=GetNumberOfFitPoints))
    long NumberOfFitPoints;
    __declspec(property(get=GetFitPoints,put=PutFitPoints))
    _variant_t FitPoints;
    __declspec(property(get=GetDegree))
    long Degree;
    __declspec(property(get=GetClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetIsPlanar))
    VARIANT_BOOL IsPlanar;
    __declspec(property(get=GetIsRational))
    VARIANT_BOOL IsRational;
    __declspec(property(get=GetIsPeriodic))
    VARIANT_BOOL IsPeriodic;
    __declspec(property(get=GetStartTangent,put=PutStartTangent))
    _variant_t StartTangent;
    __declspec(property(get=GetEndTangent,put=PutEndTangent))
    _variant_t EndTangent;
    __declspec(property(get=GetFitTolerance,put=PutFitTolerance))
    double FitTolerance;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetKnots,put=PutKnots))
    _variant_t Knots;
    __declspec(property(get=GetWeights,put=PutWeights))
    _variant_t Weights;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfControlPoints ( );
    _variant_t GetControlPoints ( );
    void PutControlPoints (
        const _variant_t & controlPoint );
    long GetNumberOfFitPoints ( );
    _variant_t GetFitPoints ( );
    void PutFitPoints (
        const _variant_t & fitPoint );
    long GetDegree ( );
    VARIANT_BOOL GetClosed ( );
    VARIANT_BOOL GetIsPlanar ( );
    VARIANT_BOOL GetIsRational ( );
    VARIANT_BOOL GetIsPeriodic ( );
    _variant_t GetStartTangent ( );
    void PutStartTangent (
        const _variant_t & StartTangent );
    _variant_t GetEndTangent ( );
    void PutEndTangent (
        const _variant_t & EndTangent );
    double GetFitTolerance ( );
    void PutFitTolerance (
        double fitTol );
    double GetArea ( );
    HRESULT SetControlPoint (
        int Index,
        const _variant_t & controlPoint );
    _variant_t GetControlPoint (
        int Index );
    HRESULT SetFitPoint (
        int Index,
        const _variant_t & fitPoint );
    _variant_t GetFitPoint (
        int Index );
    HRESULT SetWeight (
        int Index,
        double weight );
    double GetWeight (
        int Index );
    HRESULT AddFitPoint (
        int Index,
        const _variant_t & fitPoint );
    HRESULT DeleteFitPoint (
        int Index );
    HRESULT ElevateOrder (
        int Order );
    _variant_t Offset (
        double Distance );
    HRESULT PurgeFitData ( );
    HRESULT Reverse ( );
    _variant_t GetKnots ( );
    void PutKnots (
        const _variant_t & KnotValues );
    _variant_t GetWeights ( );
    void PutWeights (
        const _variant_t & WeightValues );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_NumberOfControlPoints (
        long * numCtrlPoints ) = 0;
    virtual HRESULT __stdcall get_ControlPoints (
        VARIANT * controlPoint ) = 0;
    virtual HRESULT __stdcall put_ControlPoints (
        VARIANT controlPoint ) = 0;
    virtual HRESULT __stdcall get_NumberOfFitPoints (
        long * numFitPoints ) = 0;
    virtual HRESULT __stdcall get_FitPoints (
        VARIANT * fitPoint ) = 0;
    virtual HRESULT __stdcall put_FitPoints (
        VARIANT fitPoint ) = 0;
    virtual HRESULT __stdcall get_Degree (
        long * Degree ) = 0;
    virtual HRESULT __stdcall get_Closed (
        VARIANT_BOOL * fClose ) = 0;
    virtual HRESULT __stdcall get_IsPlanar (
        VARIANT_BOOL * fPlanar ) = 0;
    virtual HRESULT __stdcall get_IsRational (
        VARIANT_BOOL * fRational ) = 0;
    virtual HRESULT __stdcall get_IsPeriodic (
        VARIANT_BOOL * fPeriodic ) = 0;
    virtual HRESULT __stdcall get_StartTangent (
        VARIANT * StartTangent ) = 0;
    virtual HRESULT __stdcall put_StartTangent (
        VARIANT StartTangent ) = 0;
    virtual HRESULT __stdcall get_EndTangent (
        VARIANT * EndTangent ) = 0;
    virtual HRESULT __stdcall put_EndTangent (
        VARIANT EndTangent ) = 0;
    virtual HRESULT __stdcall get_FitTolerance (
        double * fitTol ) = 0;
    virtual HRESULT __stdcall put_FitTolerance (
        double fitTol ) = 0;
    virtual HRESULT __stdcall get_Area (
        double * Area ) = 0;
    virtual HRESULT __stdcall raw_SetControlPoint (
        int Index,
        VARIANT controlPoint ) = 0;
    virtual HRESULT __stdcall raw_GetControlPoint (
        int Index,
        VARIANT * controlPoint ) = 0;
    virtual HRESULT __stdcall raw_SetFitPoint (
        int Index,
        VARIANT fitPoint ) = 0;
    virtual HRESULT __stdcall raw_GetFitPoint (
        int Index,
        VARIANT * fitPoint ) = 0;
    virtual HRESULT __stdcall raw_SetWeight (
        int Index,
        double weight ) = 0;
    virtual HRESULT __stdcall raw_GetWeight (
        int Index,
        double * weight ) = 0;
    virtual HRESULT __stdcall raw_AddFitPoint (
        int Index,
        VARIANT fitPoint ) = 0;
    virtual HRESULT __stdcall raw_DeleteFitPoint (
        int Index ) = 0;
    virtual HRESULT __stdcall raw_ElevateOrder (
        int Order ) = 0;
    virtual HRESULT __stdcall raw_Offset (
        double Distance,
        VARIANT * pOffsetCurves ) = 0;
    virtual HRESULT __stdcall raw_PurgeFitData ( ) = 0;
    virtual HRESULT __stdcall raw_Reverse ( ) = 0;
    virtual HRESULT __stdcall get_Knots (
        VARIANT * KnotValues ) = 0;
    virtual HRESULT __stdcall put_Knots (
        VARIANT KnotValues ) = 0;
    virtual HRESULT __stdcall get_Weights (
        VARIANT * WeightValues ) = 0;
    virtual HRESULT __stdcall put_Weights (
        VARIANT WeightValues ) = 0;
};

struct __declspec(uuid("e3fd8511-58af-43d4-9b16-c6941f7b245f"))
IAcadText : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTextString,put=PutTextString))
    _bstr_t TextString;
    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum AcAlignment Alignment;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum AcHorizontalAlignment HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum AcVerticalAlignment VerticalAlignment;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    ACAD_NOUNITS ScaleFactor;
    __declspec(property(get=GetObliqueAngle,put=PutObliqueAngle))
    ACAD_ANGLE ObliqueAngle;
    __declspec(property(get=GetTextAlignmentPoint,put=PutTextAlignmentPoint))
    _variant_t TextAlignmentPoint;
    __declspec(property(get=GetInsertionPoint,put=PutInsertionPoint))
    _variant_t InsertionPoint;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetTextGenerationFlag,put=PutTextGenerationFlag))
    long TextGenerationFlag;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetUpsideDown,put=PutUpsideDown))
    VARIANT_BOOL UpsideDown;
    __declspec(property(get=GetBackward,put=PutBackward))
    VARIANT_BOOL Backward;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTextString ( );
    void PutTextString (
        _bstr_t bstrText );
    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t bstrName );
    enum AcAlignment GetAlignment ( );
    void PutAlignment (
        enum AcAlignment align );
    enum AcHorizontalAlignment GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum AcHorizontalAlignment horizAlign );
    enum AcVerticalAlignment GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum AcVerticalAlignment vertiAlign );
    double GetHeight ( );
    void PutHeight (
        double Height );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rotAngle );
    ACAD_NOUNITS GetScaleFactor ( );
    void PutScaleFactor (
        ACAD_NOUNITS scalFactor );
    ACAD_ANGLE GetObliqueAngle ( );
    void PutObliqueAngle (
        ACAD_ANGLE obliAngle );
    _variant_t GetTextAlignmentPoint ( );
    void PutTextAlignmentPoint (
        const _variant_t & alignPoint );
    _variant_t GetInsertionPoint ( );
    void PutInsertionPoint (
        const _variant_t & insPoint );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    long GetTextGenerationFlag ( );
    void PutTextGenerationFlag (
        long textGenFlag );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    VARIANT_BOOL GetUpsideDown ( );
    void PutUpsideDown (
        VARIANT_BOOL UpsideDown );
    VARIANT_BOOL GetBackward ( );
    void PutBackward (
        VARIANT_BOOL Backward );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_TextString (
        BSTR * bstrText ) = 0;
    virtual HRESULT __stdcall put_TextString (
        BSTR bstrText ) = 0;
    virtual HRESULT __stdcall get_StyleName (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_StyleName (
        BSTR bstrName ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        enum AcAlignment * align ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        enum AcAlignment align ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        enum AcHorizontalAlignment * horizAlign ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        enum AcHorizontalAlignment horizAlign ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        enum AcVerticalAlignment * vertiAlign ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        enum AcVerticalAlignment vertiAlign ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * Height ) = 0;
    virtual HRESULT __stdcall put_Height (
        double Height ) = 0;
    virtual HRESULT __stdcall get_Rotation (
        ACAD_ANGLE * rotAngle ) = 0;
    virtual HRESULT __stdcall put_Rotation (
        ACAD_ANGLE rotAngle ) = 0;
    virtual HRESULT __stdcall get_ScaleFactor (
        ACAD_NOUNITS * scalFactor ) = 0;
    virtual HRESULT __stdcall put_ScaleFactor (
        ACAD_NOUNITS scalFactor ) = 0;
    virtual HRESULT __stdcall get_ObliqueAngle (
        ACAD_ANGLE * obliAngle ) = 0;
    virtual HRESULT __stdcall put_ObliqueAngle (
        ACAD_ANGLE obliAngle ) = 0;
    virtual HRESULT __stdcall get_TextAlignmentPoint (
        VARIANT * alignPoint ) = 0;
    virtual HRESULT __stdcall put_TextAlignmentPoint (
        VARIANT alignPoint ) = 0;
    virtual HRESULT __stdcall get_InsertionPoint (
        VARIANT * insPoint ) = 0;
    virtual HRESULT __stdcall put_InsertionPoint (
        VARIANT insPoint ) = 0;
    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall put_Normal (
        VARIANT Normal ) = 0;
    virtual HRESULT __stdcall get_TextGenerationFlag (
        long * textGenFlag ) = 0;
    virtual HRESULT __stdcall put_TextGenerationFlag (
        long textGenFlag ) = 0;
    virtual HRESULT __stdcall get_Thickness (
        double * Thickness ) = 0;
    virtual HRESULT __stdcall put_Thickness (
        double Thickness ) = 0;
    virtual HRESULT __stdcall get_UpsideDown (
        VARIANT_BOOL * UpsideDown ) = 0;
    virtual HRESULT __stdcall put_UpsideDown (
        VARIANT_BOOL UpsideDown ) = 0;
    virtual HRESULT __stdcall get_Backward (
        VARIANT_BOOL * Backward ) = 0;
    virtual HRESULT __stdcall put_Backward (
        VARIANT_BOOL Backward ) = 0;
};

struct __declspec(uuid("82a7fd1f-1fb7-411a-bca9-7074f9ad99eb"))
IAcadTolerance : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTextString,put=PutTextString))
    _bstr_t TextString;
    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetDimensionLineColor,put=PutDimensionLineColor))
    ACAD_COLOR DimensionLineColor;
    __declspec(property(get=GetDirectionVector,put=PutDirectionVector))
    _variant_t DirectionVector;
    __declspec(property(get=GetInsertionPoint,put=PutInsertionPoint))
    _variant_t InsertionPoint;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    ACAD_NOUNITS ScaleFactor;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    double TextHeight;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetDirectionVector ( );
    void PutDirectionVector (
        const _variant_t & dirVector );
    _variant_t GetInsertionPoint ( );
    void PutInsertionPoint (
        const _variant_t & insPoint );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t bstrName );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR color );
    _bstr_t GetTextString ( );
    void PutTextString (
        _bstr_t bstrText );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t style );
    double GetTextHeight ( );
    void PutTextHeight (
        double Height );
    ACAD_NOUNITS GetScaleFactor ( );
    void PutScaleFactor (
        ACAD_NOUNITS factor );
    ACAD_COLOR GetDimensionLineColor ( );
    void PutDimensionLineColor (
        ACAD_COLOR Type );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_DirectionVector (
        VARIANT * dirVector ) = 0;
    virtual HRESULT __stdcall put_DirectionVector (
        VARIANT dirVector ) = 0;
    virtual HRESULT __stdcall get_InsertionPoint (
        VARIANT * insPoint ) = 0;
    virtual HRESULT __stdcall put_InsertionPoint (
        VARIANT insPoint ) = 0;
    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall put_Normal (
        VARIANT Normal ) = 0;
    virtual HRESULT __stdcall get_StyleName (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_StyleName (
        BSTR bstrName ) = 0;
    virtual HRESULT __stdcall get_TextColor (
        ACAD_COLOR * color ) = 0;
    virtual HRESULT __stdcall put_TextColor (
        ACAD_COLOR color ) = 0;
    virtual HRESULT __stdcall get_TextString (
        BSTR * bstrText ) = 0;
    virtual HRESULT __stdcall put_TextString (
        BSTR bstrText ) = 0;
    virtual HRESULT __stdcall get_TextStyle (
        BSTR * style ) = 0;
    virtual HRESULT __stdcall put_TextStyle (
        BSTR style ) = 0;
    virtual HRESULT __stdcall get_TextHeight (
        double * Height ) = 0;
    virtual HRESULT __stdcall put_TextHeight (
        double Height ) = 0;
    virtual HRESULT __stdcall get_ScaleFactor (
        ACAD_NOUNITS * factor ) = 0;
    virtual HRESULT __stdcall put_ScaleFactor (
        ACAD_NOUNITS factor ) = 0;
    virtual HRESULT __stdcall get_DimensionLineColor (
        ACAD_COLOR * Type ) = 0;
    virtual HRESULT __stdcall put_DimensionLineColor (
        ACAD_COLOR Type ) = 0;
};

struct __declspec(uuid("506fed0c-4ff3-4550-ad8f-61614b334365"))
IAcadTrace : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & corners );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Coordinates (
        VARIANT * corners ) = 0;
    virtual HRESULT __stdcall put_Coordinates (
        VARIANT corners ) = 0;
    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall put_Normal (
        VARIANT Normal ) = 0;
    virtual HRESULT __stdcall get_Thickness (
        double * Thickness ) = 0;
    virtual HRESULT __stdcall put_Thickness (
        double Thickness ) = 0;
    virtual HRESULT __stdcall get_Coordinate (
        int Index,
        VARIANT * pVal ) = 0;
    virtual HRESULT __stdcall put_Coordinate (
        int Index,
        VARIANT pVal ) = 0;
};

struct __declspec(uuid("5e5bd910-4f2f-4765-a509-1562430c8705"))
IAcadXline : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetBasePoint,put=PutBasePoint))
    _variant_t BasePoint;
    __declspec(property(get=GetSecondPoint,put=PutSecondPoint))
    _variant_t SecondPoint;
    __declspec(property(get=GetDirectionVector,put=PutDirectionVector))
    _variant_t DirectionVector;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetBasePoint ( );
    void PutBasePoint (
        const _variant_t & BasePoint );
    _variant_t GetSecondPoint ( );
    void PutSecondPoint (
        const _variant_t & SecondPoint );
    _variant_t GetDirectionVector ( );
    void PutDirectionVector (
        const _variant_t & dirVector );
    _variant_t Offset (
        double Distance );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_BasePoint (
        VARIANT * BasePoint ) = 0;
    virtual HRESULT __stdcall put_BasePoint (
        VARIANT BasePoint ) = 0;
    virtual HRESULT __stdcall get_SecondPoint (
        VARIANT * SecondPoint ) = 0;
    virtual HRESULT __stdcall put_SecondPoint (
        VARIANT SecondPoint ) = 0;
    virtual HRESULT __stdcall get_DirectionVector (
        VARIANT * dirVector ) = 0;
    virtual HRESULT __stdcall put_DirectionVector (
        VARIANT dirVector ) = 0;
    virtual HRESULT __stdcall raw_Offset (
        double Distance,
        VARIANT * pOffsetCurves ) = 0;
};

struct __declspec(uuid("d50215e2-500b-4302-9c0e-991399b6c749"))
IAcadBlockReference : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetInsertionPoint,put=PutInsertionPoint))
    _variant_t InsertionPoint;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetXScaleFactor,put=PutXScaleFactor))
    ACAD_NOUNITS XScaleFactor;
    __declspec(property(get=GetYScaleFactor,put=PutYScaleFactor))
    ACAD_NOUNITS YScaleFactor;
    __declspec(property(get=GetZScaleFactor,put=PutZScaleFactor))
    ACAD_NOUNITS ZScaleFactor;
    __declspec(property(get=GetHasAttributes))
    VARIANT_BOOL HasAttributes;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetInsertionPoint ( );
    void PutInsertionPoint (
        const _variant_t & insPoint );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rotAngle );
    ACAD_NOUNITS GetXScaleFactor ( );
    void PutXScaleFactor (
        ACAD_NOUNITS ScaleFactor );
    ACAD_NOUNITS GetYScaleFactor ( );
    void PutYScaleFactor (
        ACAD_NOUNITS ScaleFactor );
    ACAD_NOUNITS GetZScaleFactor ( );
    void PutZScaleFactor (
        ACAD_NOUNITS ScaleFactor );
    _variant_t Explode ( );
    _variant_t GetAttributes ( );
    _variant_t GetConstantAttributes ( );
    VARIANT_BOOL GetHasAttributes ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_InsertionPoint (
        VARIANT * insPoint ) = 0;
    virtual HRESULT __stdcall put_InsertionPoint (
        VARIANT insPoint ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR bstrName ) = 0;
    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall put_Normal (
        VARIANT Normal ) = 0;
    virtual HRESULT __stdcall get_Rotation (
        ACAD_ANGLE * rotAngle ) = 0;
    virtual HRESULT __stdcall put_Rotation (
        ACAD_ANGLE rotAngle ) = 0;
    virtual HRESULT __stdcall get_XScaleFactor (
        ACAD_NOUNITS * ScaleFactor ) = 0;
    virtual HRESULT __stdcall put_XScaleFactor (
        ACAD_NOUNITS ScaleFactor ) = 0;
    virtual HRESULT __stdcall get_YScaleFactor (
        ACAD_NOUNITS * ScaleFactor ) = 0;
    virtual HRESULT __stdcall put_YScaleFactor (
        ACAD_NOUNITS ScaleFactor ) = 0;
    virtual HRESULT __stdcall get_ZScaleFactor (
        ACAD_NOUNITS * ScaleFactor ) = 0;
    virtual HRESULT __stdcall put_ZScaleFactor (
        ACAD_NOUNITS ScaleFactor ) = 0;
    virtual HRESULT __stdcall raw_Explode (
        VARIANT * pArrayObjs ) = 0;
    virtual HRESULT __stdcall raw_GetAttributes (
        VARIANT * pAttrObjs ) = 0;
    virtual HRESULT __stdcall raw_GetConstantAttributes (
        VARIANT * pAttrObjs ) = 0;
    virtual HRESULT __stdcall get_HasAttributes (
        VARIANT_BOOL * bHas ) = 0;
};

struct __declspec(uuid("37e8d218-ce9e-4ad1-a1db-b19a032ebed0"))
IAcadHatch : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetNumberOfLoops))
    long NumberOfLoops;
    __declspec(property(get=GetPatternType))
    enum AcPatternType PatternType;
    __declspec(property(get=GetPatternName))
    _bstr_t PatternName;
    __declspec(property(get=GetPatternAngle,put=PutPatternAngle))
    ACAD_ANGLE PatternAngle;
    __declspec(property(get=GetPatternScale,put=PutPatternScale))
    ACAD_NOUNITS PatternScale;
    __declspec(property(get=GetPatternSpace,put=PutPatternSpace))
    double PatternSpace;
    __declspec(property(get=GetISOPenWidth,put=PutISOPenWidth))
    enum AcISOPenWidth ISOPenWidth;
    __declspec(property(get=GetPatternDouble,put=PutPatternDouble))
    VARIANT_BOOL PatternDouble;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetAssociativeHatch,put=PutAssociativeHatch))
    VARIANT_BOOL AssociativeHatch;
    __declspec(property(get=GetHatchStyle,put=PutHatchStyle))
    enum AcHatchStyle HatchStyle;
    __declspec(property(get=GetGradientColor1,put=PutGradientColor1))
    IAcadAcCmColorPtr GradientColor1;
    __declspec(property(get=GetGradientColor2,put=PutGradientColor2))
    IAcadAcCmColorPtr GradientColor2;
    __declspec(property(get=GetGradientAngle,put=PutGradientAngle))
    ACAD_ANGLE GradientAngle;
    __declspec(property(get=GetGradientCentered,put=PutGradientCentered))
    VARIANT_BOOL GradientCentered;
    __declspec(property(get=GetGradientName,put=PutGradientName))
    _bstr_t GradientName;
    __declspec(property(get=GetHatchObjectType,put=PutHatchObjectType))
    enum AcHatchObjectType HatchObjectType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    long GetNumberOfLoops ( );
    enum AcPatternType GetPatternType ( );
    _bstr_t GetPatternName ( );
    ACAD_ANGLE GetPatternAngle ( );
    void PutPatternAngle (
        ACAD_ANGLE PatternAngle );
    ACAD_NOUNITS GetPatternScale ( );
    void PutPatternScale (
        ACAD_NOUNITS PatternScale );
    double GetPatternSpace ( );
    void PutPatternSpace (
        double PatternSpace );
    enum AcISOPenWidth GetISOPenWidth ( );
    void PutISOPenWidth (
        enum AcISOPenWidth penWidth );
    VARIANT_BOOL GetPatternDouble ( );
    void PutPatternDouble (
        VARIANT_BOOL bDouble );
    double GetElevation ( );
    void PutElevation (
        double Elevation );
    VARIANT_BOOL GetAssociativeHatch ( );
    void PutAssociativeHatch (
        VARIANT_BOOL fAssoc );
    enum AcHatchStyle GetHatchStyle ( );
    void PutHatchStyle (
        enum AcHatchStyle HatchStyle );
    HRESULT SetPattern (
        int PatternType,
        _bstr_t PatternName );
    HRESULT AppendOuterLoop (
        const _variant_t & ObjectArray );
    HRESULT AppendInnerLoop (
        const _variant_t & ObjectArray );
    HRESULT InsertLoopAt (
        int Index,
        enum AcLoopType LoopType,
        const _variant_t & ObjectArray );
    HRESULT GetLoopAt (
        int Index,
        VARIANT * ObjectArray );
    HRESULT Evaluate ( );
    IAcadAcCmColorPtr GetGradientColor1 ( );
    void PutGradientColor1 (
        struct IAcadAcCmColor * pColor );
    IAcadAcCmColorPtr GetGradientColor2 ( );
    void PutGradientColor2 (
        struct IAcadAcCmColor * pColor );
    ACAD_ANGLE GetGradientAngle ( );
    void PutGradientAngle (
        ACAD_ANGLE GradientAngle );
    VARIANT_BOOL GetGradientCentered ( );
    void PutGradientCentered (
        VARIANT_BOOL fCentered );
    _bstr_t GetGradientName ( );
    void PutGradientName (
        _bstr_t bstrName );
    enum AcHatchObjectType GetHatchObjectType ( );
    void PutHatchObjectType (
        enum AcHatchObjectType hatchType );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall put_Normal (
        VARIANT Normal ) = 0;
    virtual HRESULT __stdcall get_NumberOfLoops (
        long * numLoops ) = 0;
    virtual HRESULT __stdcall get_PatternType (
        enum AcPatternType * PatternType ) = 0;
    virtual HRESULT __stdcall get_PatternName (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall get_PatternAngle (
        ACAD_ANGLE * PatternAngle ) = 0;
    virtual HRESULT __stdcall put_PatternAngle (
        ACAD_ANGLE PatternAngle ) = 0;
    virtual HRESULT __stdcall get_PatternScale (
        ACAD_NOUNITS * PatternScale ) = 0;
    virtual HRESULT __stdcall put_PatternScale (
        ACAD_NOUNITS PatternScale ) = 0;
    virtual HRESULT __stdcall get_PatternSpace (
        double * PatternSpace ) = 0;
    virtual HRESULT __stdcall put_PatternSpace (
        double PatternSpace ) = 0;
    virtual HRESULT __stdcall get_ISOPenWidth (
        enum AcISOPenWidth * penWidth ) = 0;
    virtual HRESULT __stdcall put_ISOPenWidth (
        enum AcISOPenWidth penWidth ) = 0;
    virtual HRESULT __stdcall get_PatternDouble (
        VARIANT_BOOL * bDouble ) = 0;
    virtual HRESULT __stdcall put_PatternDouble (
        VARIANT_BOOL bDouble ) = 0;
    virtual HRESULT __stdcall get_Elevation (
        double * Elevation ) = 0;
    virtual HRESULT __stdcall put_Elevation (
        double Elevation ) = 0;
    virtual HRESULT __stdcall get_AssociativeHatch (
        VARIANT_BOOL * fAssoc ) = 0;
    virtual HRESULT __stdcall put_AssociativeHatch (
        VARIANT_BOOL fAssoc ) = 0;
    virtual HRESULT __stdcall get_HatchStyle (
        enum AcHatchStyle * HatchStyle ) = 0;
    virtual HRESULT __stdcall put_HatchStyle (
        enum AcHatchStyle HatchStyle ) = 0;
    virtual HRESULT __stdcall raw_SetPattern (
        int PatternType,
        BSTR PatternName ) = 0;
    virtual HRESULT __stdcall raw_AppendOuterLoop (
        VARIANT ObjectArray ) = 0;
    virtual HRESULT __stdcall raw_AppendInnerLoop (
        VARIANT ObjectArray ) = 0;
    virtual HRESULT __stdcall raw_InsertLoopAt (
        int Index,
        enum AcLoopType LoopType,
        VARIANT ObjectArray ) = 0;
    virtual HRESULT __stdcall raw_GetLoopAt (
        int Index,
        VARIANT * ObjectArray ) = 0;
    virtual HRESULT __stdcall raw_Evaluate ( ) = 0;
    virtual HRESULT __stdcall get_GradientColor1 (
        struct IAcadAcCmColor * * pColor ) = 0;
    virtual HRESULT __stdcall put_GradientColor1 (
        struct IAcadAcCmColor * pColor ) = 0;
    virtual HRESULT __stdcall get_GradientColor2 (
        struct IAcadAcCmColor * * pColor ) = 0;
    virtual HRESULT __stdcall put_GradientColor2 (
        struct IAcadAcCmColor * pColor ) = 0;
    virtual HRESULT __stdcall get_GradientAngle (
        ACAD_ANGLE * GradientAngle ) = 0;
    virtual HRESULT __stdcall put_GradientAngle (
        ACAD_ANGLE GradientAngle ) = 0;
    virtual HRESULT __stdcall get_GradientCentered (
        VARIANT_BOOL * fCentered ) = 0;
    virtual HRESULT __stdcall put_GradientCentered (
        VARIANT_BOOL fCentered ) = 0;
    virtual HRESULT __stdcall get_GradientName (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_GradientName (
        BSTR bstrName ) = 0;
    virtual HRESULT __stdcall get_HatchObjectType (
        enum AcHatchObjectType * hatchType ) = 0;
    virtual HRESULT __stdcall put_HatchObjectType (
        enum AcHatchObjectType hatchType ) = 0;
};

struct __declspec(uuid("6b8fa01d-b1d5-44c3-8bf3-b955a4964869"))
IAcadRasterImage : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetBrightness,put=PutBrightness))
    long Brightness;
    __declspec(property(get=GetContrast,put=PutContrast))
    long Contrast;
    __declspec(property(get=GetFade,put=PutFade))
    long Fade;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    _variant_t Origin;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetImageWidth,put=PutImageWidth))
    double ImageWidth;
    __declspec(property(get=GetImageHeight,put=PutImageHeight))
    double ImageHeight;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetImageFile,put=PutImageFile))
    _bstr_t ImageFile;
    __declspec(property(get=GetImageVisibility,put=PutImageVisibility))
    VARIANT_BOOL ImageVisibility;
    __declspec(property(get=GetClippingEnabled,put=PutClippingEnabled))
    VARIANT_BOOL ClippingEnabled;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    VARIANT_BOOL Transparency;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetShowRotation,put=PutShowRotation))
    VARIANT_BOOL ShowRotation;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    ACAD_NOUNITS ScaleFactor;

    //
    // Wrapper methods for error-handling
    //

    long GetBrightness ( );
    void PutBrightness (
        long Brightness );
    long GetContrast ( );
    void PutContrast (
        long Contrast );
    long GetFade ( );
    void PutFade (
        long Fade );
    _variant_t GetOrigin ( );
    void PutOrigin (
        const _variant_t & Origin );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rotAngle );
    double GetImageWidth ( );
    void PutImageWidth (
        double Width );
    double GetImageHeight ( );
    void PutImageHeight (
        double Height );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    void PutImageFile (
        _bstr_t imageFileName );
    _bstr_t GetImageFile ( );
    VARIANT_BOOL GetImageVisibility ( );
    void PutImageVisibility (
        VARIANT_BOOL fVisible );
    VARIANT_BOOL GetClippingEnabled ( );
    void PutClippingEnabled (
        VARIANT_BOOL kClip );
    VARIANT_BOOL GetTransparency ( );
    void PutTransparency (
        VARIANT_BOOL bTransp );
    HRESULT ClipBoundary (
        const _variant_t & boundry );
    double GetHeight ( );
    double GetWidth ( );
    VARIANT_BOOL GetShowRotation ( );
    void PutShowRotation (
        VARIANT_BOOL bShow );
    ACAD_NOUNITS GetScaleFactor ( );
    void PutScaleFactor (
        ACAD_NOUNITS ScaleFactor );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Brightness (
        long * Brightness ) = 0;
    virtual HRESULT __stdcall put_Brightness (
        long Brightness ) = 0;
    virtual HRESULT __stdcall get_Contrast (
        long * Contrast ) = 0;
    virtual HRESULT __stdcall put_Contrast (
        long Contrast ) = 0;
    virtual HRESULT __stdcall get_Fade (
        long * Fade ) = 0;
    virtual HRESULT __stdcall put_Fade (
        long Fade ) = 0;
    virtual HRESULT __stdcall get_Origin (
        VARIANT * Origin ) = 0;
    virtual HRESULT __stdcall put_Origin (
        VARIANT Origin ) = 0;
    virtual HRESULT __stdcall get_Rotation (
        ACAD_ANGLE * rotAngle ) = 0;
    virtual HRESULT __stdcall put_Rotation (
        ACAD_ANGLE rotAngle ) = 0;
    virtual HRESULT __stdcall get_ImageWidth (
        double * Width ) = 0;
    virtual HRESULT __stdcall put_ImageWidth (
        double Width ) = 0;
    virtual HRESULT __stdcall get_ImageHeight (
        double * Height ) = 0;
    virtual HRESULT __stdcall put_ImageHeight (
        double Height ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * Name ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall put_ImageFile (
        BSTR imageFileName ) = 0;
    virtual HRESULT __stdcall get_ImageFile (
        BSTR * imageFileName ) = 0;
    virtual HRESULT __stdcall get_ImageVisibility (
        VARIANT_BOOL * fVisible ) = 0;
    virtual HRESULT __stdcall put_ImageVisibility (
        VARIANT_BOOL fVisible ) = 0;
    virtual HRESULT __stdcall get_ClippingEnabled (
        VARIANT_BOOL * kClip ) = 0;
    virtual HRESULT __stdcall put_ClippingEnabled (
        VARIANT_BOOL kClip ) = 0;
    virtual HRESULT __stdcall get_Transparency (
        VARIANT_BOOL * bTransp ) = 0;
    virtual HRESULT __stdcall put_Transparency (
        VARIANT_BOOL bTransp ) = 0;
    virtual HRESULT __stdcall raw_ClipBoundary (
        VARIANT boundry ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * pixelHeight ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * pixelWidth ) = 0;
    virtual HRESULT __stdcall get_ShowRotation (
        VARIANT_BOOL * bShow ) = 0;
    virtual HRESULT __stdcall put_ShowRotation (
        VARIANT_BOOL bShow ) = 0;
    virtual HRESULT __stdcall get_ScaleFactor (
        ACAD_NOUNITS * ScaleFactor ) = 0;
    virtual HRESULT __stdcall put_ScaleFactor (
        ACAD_NOUNITS ScaleFactor ) = 0;
};

struct __declspec(uuid("0fc758cf-cf9c-4e17-b7f8-d550157ce289"))
IAcadLine : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStartPoint,put=PutStartPoint))
    _variant_t StartPoint;
    __declspec(property(get=GetEndPoint,put=PutEndPoint))
    _variant_t EndPoint;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetDelta))
    _variant_t Delta;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetAngle))
    ACAD_ANGLE Angle;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartPoint ( );
    void PutStartPoint (
        const _variant_t & StartPoint );
    _variant_t GetEndPoint ( );
    void PutEndPoint (
        const _variant_t & EndPoint );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    _variant_t Offset (
        double Distance );
    _variant_t GetDelta ( );
    double GetLength ( );
    ACAD_ANGLE GetAngle ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_StartPoint (
        VARIANT * StartPoint ) = 0;
    virtual HRESULT __stdcall put_StartPoint (
        VARIANT StartPoint ) = 0;
    virtual HRESULT __stdcall get_EndPoint (
        VARIANT * EndPoint ) = 0;
    virtual HRESULT __stdcall put_EndPoint (
        VARIANT EndPoint ) = 0;
    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall put_Normal (
        VARIANT Normal ) = 0;
    virtual HRESULT __stdcall get_Thickness (
        double * Thickness ) = 0;
    virtual HRESULT __stdcall put_Thickness (
        double Thickness ) = 0;
    virtual HRESULT __stdcall raw_Offset (
        double Distance,
        VARIANT * pOffsetCurves ) = 0;
    virtual HRESULT __stdcall get_Delta (
        VARIANT * Delta ) = 0;
    virtual HRESULT __stdcall get_Length (
        double * Length ) = 0;
    virtual HRESULT __stdcall get_Angle (
        ACAD_ANGLE * Angle ) = 0;
};

struct __declspec(uuid("719f05e7-6c78-47d0-a6ad-4489771dfea3"))
IAcadPlotConfiguration : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPlotWithPlotStyles,put=PutPlotWithPlotStyles))
    VARIANT_BOOL PlotWithPlotStyles;
    __declspec(property(get=GetConfigName,put=PutConfigName))
    _bstr_t ConfigName;
    __declspec(property(get=GetModelType))
    VARIANT_BOOL ModelType;
    __declspec(property(get=GetCanonicalMediaName,put=PutCanonicalMediaName))
    _bstr_t CanonicalMediaName;
    __declspec(property(get=GetPaperUnits,put=PutPaperUnits))
    enum AcPlotPaperUnits PaperUnits;
    __declspec(property(get=GetPlotViewportBorders,put=PutPlotViewportBorders))
    VARIANT_BOOL PlotViewportBorders;
    __declspec(property(get=GetShowPlotStyles,put=PutShowPlotStyles))
    VARIANT_BOOL ShowPlotStyles;
    __declspec(property(get=GetPlotRotation,put=PutPlotRotation))
    enum AcPlotRotation PlotRotation;
    __declspec(property(get=GetCenterPlot,put=PutCenterPlot))
    VARIANT_BOOL CenterPlot;
    __declspec(property(get=GetPlotHidden,put=PutPlotHidden))
    VARIANT_BOOL PlotHidden;
    __declspec(property(get=GetPlotType,put=PutPlotType))
    enum AcPlotType PlotType;
    __declspec(property(get=GetViewToPlot,put=PutViewToPlot))
    _bstr_t ViewToPlot;
    __declspec(property(get=GetUseStandardScale,put=PutUseStandardScale))
    VARIANT_BOOL UseStandardScale;
    __declspec(property(get=GetStandardScale,put=PutStandardScale))
    enum AcPlotScale StandardScale;
    __declspec(property(get=GetScaleLineweights,put=PutScaleLineweights))
    VARIANT_BOOL ScaleLineweights;
    __declspec(property(get=GetPlotWithLineweights,put=PutPlotWithLineweights))
    VARIANT_BOOL PlotWithLineweights;
    __declspec(property(get=GetPlotViewportsFirst,put=PutPlotViewportsFirst))
    VARIANT_BOOL PlotViewportsFirst;
    __declspec(property(get=GetStyleSheet,put=PutStyleSheet))
    _bstr_t StyleSheet;
    __declspec(property(get=GetPlotOrigin,put=PutPlotOrigin))
    _variant_t PlotOrigin;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pName );
    _bstr_t GetConfigName ( );
    void PutConfigName (
        _bstr_t pName );
    _bstr_t GetCanonicalMediaName ( );
    void PutCanonicalMediaName (
        _bstr_t pName );
    enum AcPlotPaperUnits GetPaperUnits ( );
    void PutPaperUnits (
        enum AcPlotPaperUnits pPaperUnits );
    VARIANT_BOOL GetPlotViewportBorders ( );
    void PutPlotViewportBorders (
        VARIANT_BOOL pViewportBorders );
    VARIANT_BOOL GetShowPlotStyles ( );
    void PutShowPlotStyles (
        VARIANT_BOOL pStyles );
    enum AcPlotRotation GetPlotRotation ( );
    void PutPlotRotation (
        enum AcPlotRotation pRotation );
    VARIANT_BOOL GetCenterPlot ( );
    void PutCenterPlot (
        VARIANT_BOOL pCentered );
    VARIANT_BOOL GetPlotHidden ( );
    void PutPlotHidden (
        VARIANT_BOOL pHidden );
    enum AcPlotType GetPlotType ( );
    void PutPlotType (
        enum AcPlotType pType );
    _bstr_t GetViewToPlot ( );
    void PutViewToPlot (
        _bstr_t pName );
    VARIANT_BOOL GetUseStandardScale ( );
    void PutUseStandardScale (
        VARIANT_BOOL pUseStdScale );
    enum AcPlotScale GetStandardScale ( );
    void PutStandardScale (
        enum AcPlotScale pStdScale );
    HRESULT GetCustomScale (
        double * Numerator,
        double * Denominator );
    HRESULT SetCustomScale (
        double Numerator,
        double Denominator );
    VARIANT_BOOL GetScaleLineweights ( );
    void PutScaleLineweights (
        VARIANT_BOOL pScale );
    VARIANT_BOOL GetPlotWithLineweights ( );
    void PutPlotWithLineweights (
        VARIANT_BOOL pPlot );
    VARIANT_BOOL GetPlotViewportsFirst ( );
    void PutPlotViewportsFirst (
        VARIANT_BOOL pViewportsFirst );
    _bstr_t GetStyleSheet ( );
    void PutStyleSheet (
        _bstr_t pName );
    HRESULT GetPaperMargins (
        VARIANT * LowerLeft,
        VARIANT * UpperRight );
    HRESULT GetPaperSize (
        double * Width,
        double * Height );
    _variant_t GetPlotOrigin ( );
    void PutPlotOrigin (
        const _variant_t & pOrigin );
    HRESULT GetWindowToPlot (
        VARIANT * LowerLeft,
        VARIANT * UpperRight );
    HRESULT SetWindowToPlot (
        const _variant_t & LowerLeft,
        const _variant_t & UpperRight );
    VARIANT_BOOL GetPlotWithPlotStyles ( );
    void PutPlotWithPlotStyles (
        VARIANT_BOOL pStyles );
    VARIANT_BOOL GetModelType ( );
    HRESULT CopyFrom (
        struct IAcadPlotConfiguration * pPlotConfig );
    _variant_t GetCanonicalMediaNames ( );
    _variant_t GetPlotDeviceNames ( );
    _variant_t GetPlotStyleTableNames ( );
    HRESULT RefreshPlotDeviceInfo ( );
    _bstr_t GetLocaleMediaName (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * pName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR pName ) = 0;
    virtual HRESULT __stdcall get_ConfigName (
        BSTR * pName ) = 0;
    virtual HRESULT __stdcall put_ConfigName (
        BSTR pName ) = 0;
    virtual HRESULT __stdcall get_CanonicalMediaName (
        BSTR * pName ) = 0;
    virtual HRESULT __stdcall put_CanonicalMediaName (
        BSTR pName ) = 0;
    virtual HRESULT __stdcall get_PaperUnits (
        enum AcPlotPaperUnits * pPaperUnits ) = 0;
    virtual HRESULT __stdcall put_PaperUnits (
        enum AcPlotPaperUnits pPaperUnits ) = 0;
    virtual HRESULT __stdcall get_PlotViewportBorders (
        VARIANT_BOOL * pViewportBorders ) = 0;
    virtual HRESULT __stdcall put_PlotViewportBorders (
        VARIANT_BOOL pViewportBorders ) = 0;
    virtual HRESULT __stdcall get_ShowPlotStyles (
        VARIANT_BOOL * pStyles ) = 0;
    virtual HRESULT __stdcall put_ShowPlotStyles (
        VARIANT_BOOL pStyles ) = 0;
    virtual HRESULT __stdcall get_PlotRotation (
        enum AcPlotRotation * pRotation ) = 0;
    virtual HRESULT __stdcall put_PlotRotation (
        enum AcPlotRotation pRotation ) = 0;
    virtual HRESULT __stdcall get_CenterPlot (
        VARIANT_BOOL * pCentered ) = 0;
    virtual HRESULT __stdcall put_CenterPlot (
        VARIANT_BOOL pCentered ) = 0;
    virtual HRESULT __stdcall get_PlotHidden (
        VARIANT_BOOL * pHidden ) = 0;
    virtual HRESULT __stdcall put_PlotHidden (
        VARIANT_BOOL pHidden ) = 0;
    virtual HRESULT __stdcall get_PlotType (
        enum AcPlotType * pType ) = 0;
    virtual HRESULT __stdcall put_PlotType (
        enum AcPlotType pType ) = 0;
    virtual HRESULT __stdcall get_ViewToPlot (
        BSTR * pName ) = 0;
    virtual HRESULT __stdcall put_ViewToPlot (
        BSTR pName ) = 0;
    virtual HRESULT __stdcall get_UseStandardScale (
        VARIANT_BOOL * pUseStdScale ) = 0;
    virtual HRESULT __stdcall put_UseStandardScale (
        VARIANT_BOOL pUseStdScale ) = 0;
    virtual HRESULT __stdcall get_StandardScale (
        enum AcPlotScale * pStdScale ) = 0;
    virtual HRESULT __stdcall put_StandardScale (
        enum AcPlotScale pStdScale ) = 0;
    virtual HRESULT __stdcall raw_GetCustomScale (
        double * Numerator,
        double * Denominator ) = 0;
    virtual HRESULT __stdcall raw_SetCustomScale (
        double Numerator,
        double Denominator ) = 0;
    virtual HRESULT __stdcall get_ScaleLineweights (
        VARIANT_BOOL * pScale ) = 0;
    virtual HRESULT __stdcall put_ScaleLineweights (
        VARIANT_BOOL pScale ) = 0;
    virtual HRESULT __stdcall get_PlotWithLineweights (
        VARIANT_BOOL * pPlot ) = 0;
    virtual HRESULT __stdcall put_PlotWithLineweights (
        VARIANT_BOOL pPlot ) = 0;
    virtual HRESULT __stdcall get_PlotViewportsFirst (
        VARIANT_BOOL * pViewportsFirst ) = 0;
    virtual HRESULT __stdcall put_PlotViewportsFirst (
        VARIANT_BOOL pViewportsFirst ) = 0;
    virtual HRESULT __stdcall get_StyleSheet (
        BSTR * pName ) = 0;
    virtual HRESULT __stdcall put_StyleSheet (
        BSTR pName ) = 0;
    virtual HRESULT __stdcall raw_GetPaperMargins (
        VARIANT * LowerLeft,
        VARIANT * UpperRight ) = 0;
    virtual HRESULT __stdcall raw_GetPaperSize (
        double * Width,
        double * Height ) = 0;
    virtual HRESULT __stdcall get_PlotOrigin (
        VARIANT * pOrigin ) = 0;
    virtual HRESULT __stdcall put_PlotOrigin (
        VARIANT pOrigin ) = 0;
    virtual HRESULT __stdcall raw_GetWindowToPlot (
        VARIANT * LowerLeft,
        VARIANT * UpperRight ) = 0;
    virtual HRESULT __stdcall raw_SetWindowToPlot (
        VARIANT LowerLeft,
        VARIANT UpperRight ) = 0;
    virtual HRESULT __stdcall get_PlotWithPlotStyles (
        VARIANT_BOOL * pStyles ) = 0;
    virtual HRESULT __stdcall put_PlotWithPlotStyles (
        VARIANT_BOOL pStyles ) = 0;
    virtual HRESULT __stdcall get_ModelType (
        VARIANT_BOOL * pType ) = 0;
    virtual HRESULT __stdcall raw_CopyFrom (
        struct IAcadPlotConfiguration * pPlotConfig ) = 0;
    virtual HRESULT __stdcall raw_GetCanonicalMediaNames (
        VARIANT * pNames ) = 0;
    virtual HRESULT __stdcall raw_GetPlotDeviceNames (
        VARIANT * pNames ) = 0;
    virtual HRESULT __stdcall raw_GetPlotStyleTableNames (
        VARIANT * pNames ) = 0;
    virtual HRESULT __stdcall raw_RefreshPlotDeviceInfo ( ) = 0;
    virtual HRESULT __stdcall raw_GetLocaleMediaName (
        BSTR Name,
        BSTR * pLocalName ) = 0;
};

struct __declspec(uuid("46fc0058-178d-4c7d-869d-b3c97ba6bd26"))
IAcadLayout : IAcadPlotConfiguration
{
    //
    // Property data
    //

    __declspec(property(get=GetBlock))
    IAcadBlockPtr Block;
    __declspec(property(get=GetTabOrder,put=PutTabOrder))
    long TabOrder;

    //
    // Wrapper methods for error-handling
    //

    IAcadBlockPtr GetBlock ( );
    long GetTabOrder ( );
    void PutTabOrder (
        long pOrder );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Block (
        struct IAcadBlock * * pBlock ) = 0;
    virtual HRESULT __stdcall get_TabOrder (
        long * pOrder ) = 0;
    virtual HRESULT __stdcall put_TabOrder (
        long pOrder ) = 0;
};

struct __declspec(uuid("9229e352-e850-403e-88d1-3333aaec3769"))
IAcadMInsertBlock : IAcadBlockReference
{
    //
    // Property data
    //

    __declspec(property(get=GetColumns,put=PutColumns))
    long Columns;
    __declspec(property(get=GetColumnSpacing,put=PutColumnSpacing))
    double ColumnSpacing;
    __declspec(property(get=GetRows,put=PutRows))
    long Rows;
    __declspec(property(get=GetRowSpacing,put=PutRowSpacing))
    double RowSpacing;

    //
    // Wrapper methods for error-handling
    //

    void PutColumns (
        long NumColumns );
    long GetColumns ( );
    void PutColumnSpacing (
        double Spacing );
    double GetColumnSpacing ( );
    void PutRows (
        long NumRows );
    long GetRows ( );
    void PutRowSpacing (
        double Spacing );
    double GetRowSpacing ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall put_Columns (
        long NumColumns ) = 0;
    virtual HRESULT __stdcall get_Columns (
        long * NumColumns ) = 0;
    virtual HRESULT __stdcall put_ColumnSpacing (
        double Spacing ) = 0;
    virtual HRESULT __stdcall get_ColumnSpacing (
        double * Spacing ) = 0;
    virtual HRESULT __stdcall put_Rows (
        long NumRows ) = 0;
    virtual HRESULT __stdcall get_Rows (
        long * NumRows ) = 0;
    virtual HRESULT __stdcall put_RowSpacing (
        double Spacing ) = 0;
    virtual HRESULT __stdcall get_RowSpacing (
        double * Spacing ) = 0;
};

struct __declspec(uuid("058b7d06-fcb3-4b36-b39a-f3af39435604"))
IAcadPolyfaceMesh : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];
    __declspec(property(get=GetNumberOfVertices))
    long NumberOfVertices;
    __declspec(property(get=GetNumberOfFaces))
    long NumberOfFaces;
    __declspec(property(put=PutFaces))
    _variant_t Faces;

    //
    // Wrapper methods for error-handling
    //

    void PutCoordinates (
        const _variant_t & Vertices );
    _variant_t GetCoordinates ( );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );
    long GetNumberOfVertices ( );
    long GetNumberOfFaces ( );
    void PutFaces (
        const _variant_t & _arg1 );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall put_Coordinates (
        VARIANT Vertices ) = 0;
    virtual HRESULT __stdcall get_Coordinates (
        VARIANT * Vertices ) = 0;
    virtual HRESULT __stdcall get_Coordinate (
        int Index,
        VARIANT * pVal ) = 0;
    virtual HRESULT __stdcall put_Coordinate (
        int Index,
        VARIANT pVal ) = 0;
    virtual HRESULT __stdcall get_NumberOfVertices (
        long * NumVertices ) = 0;
    virtual HRESULT __stdcall get_NumberOfFaces (
        long * NumFaces ) = 0;
    virtual HRESULT __stdcall put_Faces (
        VARIANT _arg1 ) = 0;
};

struct __declspec(uuid("7c0ed309-aa19-4d81-9e92-adbbf964835f"))
IAcadMLine : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetStyleName ( );
    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & Vertices );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_StyleName (
        BSTR * Name ) = 0;
    virtual HRESULT __stdcall get_Coordinates (
        VARIANT * Vertices ) = 0;
    virtual HRESULT __stdcall put_Coordinates (
        VARIANT Vertices ) = 0;
};

struct __declspec(uuid("1908be81-e5fd-44ab-b9e0-24df76b198ed"))
IAcadDim3PointAngular : IAcadDimension
{
    //
    // Property data
    //

    __declspec(property(get=GetAngleVertex,put=PutAngleVertex))
    _variant_t AngleVertex;
    __declspec(property(get=GetDimensionLineColor,put=PutDimensionLineColor))
    ACAD_COLOR DimensionLineColor;
    __declspec(property(get=GetExtensionLineColor,put=PutExtensionLineColor))
    ACAD_COLOR ExtensionLineColor;
    __declspec(property(get=GetDimensionLineWeight,put=PutDimensionLineWeight))
    ACAD_LWEIGHT DimensionLineWeight;
    __declspec(property(get=GetExtensionLineExtend,put=PutExtensionLineExtend))
    double ExtensionLineExtend;
    __declspec(property(get=GetFit,put=PutFit))
    enum AcDimFit Fit;
    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetHorizontalTextPosition,put=PutHorizontalTextPosition))
    enum AcDimHorizontalJustification HorizontalTextPosition;
    __declspec(property(get=GetArrowhead1Type,put=PutArrowhead1Type))
    enum AcDimArrowheadType Arrowhead1Type;
    __declspec(property(get=GetArrowhead2Type,put=PutArrowhead2Type))
    enum AcDimArrowheadType Arrowhead2Type;
    __declspec(property(get=GetExtensionLineWeight,put=PutExtensionLineWeight))
    ACAD_LWEIGHT ExtensionLineWeight;
    __declspec(property(get=GetMeasurement))
    ACAD_ANGLE Measurement;
    __declspec(property(get=GetDimLine1Suppress,put=PutDimLine1Suppress))
    VARIANT_BOOL DimLine1Suppress;
    __declspec(property(get=GetDimLine2Suppress,put=PutDimLine2Suppress))
    VARIANT_BOOL DimLine2Suppress;
    __declspec(property(get=GetExtLine1Suppress,put=PutExtLine1Suppress))
    VARIANT_BOOL ExtLine1Suppress;
    __declspec(property(get=GetExtLine2Suppress,put=PutExtLine2Suppress))
    VARIANT_BOOL ExtLine2Suppress;
    __declspec(property(get=GetDimLineInside,put=PutDimLineInside))
    VARIANT_BOOL DimLineInside;
    __declspec(property(get=GetTextInsideAlign,put=PutTextInsideAlign))
    VARIANT_BOOL TextInsideAlign;
    __declspec(property(get=GetTextInside,put=PutTextInside))
    VARIANT_BOOL TextInside;
    __declspec(property(get=GetForceLineInside,put=PutForceLineInside))
    VARIANT_BOOL ForceLineInside;
    __declspec(property(get=GetTextOutsideAlign,put=PutTextOutsideAlign))
    VARIANT_BOOL TextOutsideAlign;
    __declspec(property(get=GetArrowhead1Block,put=PutArrowhead1Block))
    _bstr_t Arrowhead1Block;
    __declspec(property(get=GetExtensionLineOffset,put=PutExtensionLineOffset))
    double ExtensionLineOffset;
    __declspec(property(get=GetTextPrecision,put=PutTextPrecision))
    enum AcDimPrecision TextPrecision;
    __declspec(property(get=GetArrowhead2Block,put=PutArrowhead2Block))
    _bstr_t Arrowhead2Block;
    __declspec(property(get=GetExtLine1EndPoint,put=PutExtLine1EndPoint))
    _variant_t ExtLine1EndPoint;
    __declspec(property(get=GetExtLine2EndPoint,put=PutExtLine2EndPoint))
    _variant_t ExtLine2EndPoint;
    __declspec(property(get=GetAngleFormat,put=PutAngleFormat))
    enum AcAngleUnits AngleFormat;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetExtLine1EndPoint ( );
    void PutExtLine1EndPoint (
        const _variant_t & xLine1Point );
    _variant_t GetExtLine2EndPoint ( );
    void PutExtLine2EndPoint (
        const _variant_t & xLine2Point );
    _variant_t GetAngleVertex ( );
    void PutAngleVertex (
        const _variant_t & AngleVertex );
    enum AcDimPrecision GetTextPrecision ( );
    void PutTextPrecision (
        enum AcDimPrecision AngleVertex );
    enum AcAngleUnits GetAngleFormat ( );
    void PutAngleFormat (
        enum AcAngleUnits format );
    ACAD_COLOR GetDimensionLineColor ( );
    void PutDimensionLineColor (
        ACAD_COLOR Type );
    ACAD_COLOR GetExtensionLineColor ( );
    void PutExtensionLineColor (
        ACAD_COLOR Type );
    double GetExtensionLineExtend ( );
    void PutExtensionLineExtend (
        double extend );
    enum AcDimFit GetFit ( );
    void PutFit (
        enum AcDimFit fittype );
    enum AcDimHorizontalJustification GetHorizontalTextPosition ( );
    void PutHorizontalTextPosition (
        enum AcDimHorizontalJustification Type );
    ACAD_LWEIGHT GetExtensionLineWeight ( );
    void PutExtensionLineWeight (
        ACAD_LWEIGHT lweight );
    VARIANT_BOOL GetDimLine1Suppress ( );
    void PutDimLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLine2Suppress ( );
    void PutDimLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetExtLine1Suppress ( );
    void PutExtLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetExtLine2Suppress ( );
    void PutExtLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLineInside ( );
    void PutDimLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInsideAlign ( );
    void PutTextInsideAlign (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInside ( );
    void PutTextInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetForceLineInside ( );
    void PutForceLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextOutsideAlign ( );
    void PutTextOutsideAlign (
        VARIANT_BOOL bInside );
    double GetExtensionLineOffset ( );
    void PutExtensionLineOffset (
        double Offset );
    ACAD_LWEIGHT GetDimensionLineWeight ( );
    void PutDimensionLineWeight (
        ACAD_LWEIGHT weight );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    enum AcDimArrowheadType GetArrowhead1Type ( );
    void PutArrowhead1Type (
        enum AcDimArrowheadType Type );
    enum AcDimArrowheadType GetArrowhead2Type ( );
    void PutArrowhead2Type (
        enum AcDimArrowheadType Type );
    ACAD_ANGLE GetMeasurement ( );
    _bstr_t GetArrowhead1Block ( );
    void PutArrowhead1Block (
        _bstr_t BlockName );
    _bstr_t GetArrowhead2Block ( );
    void PutArrowhead2Block (
        _bstr_t BlockName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ExtLine1EndPoint (
        VARIANT * xLine1Point ) = 0;
    virtual HRESULT __stdcall put_ExtLine1EndPoint (
        VARIANT xLine1Point ) = 0;
    virtual HRESULT __stdcall get_ExtLine2EndPoint (
        VARIANT * xLine2Point ) = 0;
    virtual HRESULT __stdcall put_ExtLine2EndPoint (
        VARIANT xLine2Point ) = 0;
    virtual HRESULT __stdcall get_AngleVertex (
        VARIANT * AngleVertex ) = 0;
    virtual HRESULT __stdcall put_AngleVertex (
        VARIANT AngleVertex ) = 0;
    virtual HRESULT __stdcall get_TextPrecision (
        enum AcDimPrecision * AngleVertex ) = 0;
    virtual HRESULT __stdcall put_TextPrecision (
        enum AcDimPrecision AngleVertex ) = 0;
    virtual HRESULT __stdcall get_AngleFormat (
        enum AcAngleUnits * format ) = 0;
    virtual HRESULT __stdcall put_AngleFormat (
        enum AcAngleUnits format ) = 0;
    virtual HRESULT __stdcall get_DimensionLineColor (
        ACAD_COLOR * Type ) = 0;
    virtual HRESULT __stdcall put_DimensionLineColor (
        ACAD_COLOR Type ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineColor (
        ACAD_COLOR * Type ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineColor (
        ACAD_COLOR Type ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineExtend (
        double * extend ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineExtend (
        double extend ) = 0;
    virtual HRESULT __stdcall get_Fit (
        enum AcDimFit * fittype ) = 0;
    virtual HRESULT __stdcall put_Fit (
        enum AcDimFit fittype ) = 0;
    virtual HRESULT __stdcall get_HorizontalTextPosition (
        enum AcDimHorizontalJustification * Type ) = 0;
    virtual HRESULT __stdcall put_HorizontalTextPosition (
        enum AcDimHorizontalJustification Type ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineWeight (
        ACAD_LWEIGHT * lweight ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineWeight (
        ACAD_LWEIGHT lweight ) = 0;
    virtual HRESULT __stdcall get_DimLine1Suppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_DimLine1Suppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_DimLine2Suppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_DimLine2Suppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_ExtLine1Suppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_ExtLine1Suppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_ExtLine2Suppress (
        VARIANT_BOOL * bSuppress ) = 0;
    virtual HRESULT __stdcall put_ExtLine2Suppress (
        VARIANT_BOOL bSuppress ) = 0;
    virtual HRESULT __stdcall get_DimLineInside (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_DimLineInside (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_TextInsideAlign (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_TextInsideAlign (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_TextInside (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_TextInside (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_ForceLineInside (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_ForceLineInside (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_TextOutsideAlign (
        VARIANT_BOOL * bInside ) = 0;
    virtual HRESULT __stdcall put_TextOutsideAlign (
        VARIANT_BOOL bInside ) = 0;
    virtual HRESULT __stdcall get_ExtensionLineOffset (
        double * Offset ) = 0;
    virtual HRESULT __stdcall put_ExtensionLineOffset (
        double Offset ) = 0;
    virtual HRESULT __stdcall get_DimensionLineWeight (
        ACAD_LWEIGHT * weight ) = 0;
    virtual HRESULT __stdcall put_DimensionLineWeight (
        ACAD_LWEIGHT weight ) = 0;
    virtual HRESULT __stdcall get_ArrowheadSize (
        double * size ) = 0;
    virtual HRESULT __stdcall put_ArrowheadSize (
        double size ) = 0;
    virtual HRESULT __stdcall get_Arrowhead1Type (
        enum AcDimArrowheadType * Type ) = 0;
    virtual HRESULT __stdcall put_Arrowhead1Type (
        enum AcDimArrowheadType Type ) = 0;
    virtual HRESULT __stdcall get_Arrowhead2Type (
        enum AcDimArrowheadType * Type ) = 0;
    virtual HRESULT __stdcall put_Arrowhead2Type (
        enum AcDimArrowheadType Type ) = 0;
    virtual HRESULT __stdcall get_Measurement (
        ACAD_ANGLE * bVal ) = 0;
    virtual HRESULT __stdcall get_Arrowhead1Block (
        BSTR * BlockName ) = 0;
    virtual HRESULT __stdcall put_Arrowhead1Block (
        BSTR BlockName ) = 0;
    virtual HRESULT __stdcall get_Arrowhead2Block (
        BSTR * BlockName ) = 0;
    virtual HRESULT __stdcall put_Arrowhead2Block (
        BSTR BlockName ) = 0;
};

struct __declspec(uuid("2d21020d-78c5-431b-b6a2-3301a4385dea"))
IAcadExternalReference : IAcadBlockReference
{
    //
    // Property data
    //

    __declspec(property(get=GetPath,put=PutPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );
    void PutPath (
        _bstr_t bstrName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Path (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_Path (
        BSTR bstrName ) = 0;
};

struct __declspec(uuid("4d4d9c1e-ef26-48b3-8af7-f2d8e6bab9f6"))
IAcadPaperSpace : IAcadBlock
{
    //
    // Wrapper methods for error-handling
    //

    IAcadPViewportPtr AddPViewport (
        const _variant_t & Center,
        double Width,
        double Height );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_AddPViewport (
        VARIANT Center,
        double Width,
        double Height,
        struct IAcadPViewport * * pPViewport ) = 0;
};

struct __declspec(uuid("fdf8da1e-dce0-4c2a-86c8-28f472755744"))
IAcadPViewport : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter,put=PutCenter))
    _variant_t Center;
    __declspec(property(get=GetDirection,put=PutDirection))
    _variant_t Direction;
    __declspec(property(get=GetGridOn,put=PutGridOn))
    VARIANT_BOOL GridOn;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetViewportOn,put=PutViewportOn))
    VARIANT_BOOL ViewportOn;
    __declspec(property(get=GetClipped))
    VARIANT_BOOL Clipped;
    __declspec(property(get=GetDisplayLocked,put=PutDisplayLocked))
    VARIANT_BOOL DisplayLocked;
    __declspec(property(get=GetStandardScale,put=PutStandardScale))
    enum AcViewportScale StandardScale;
    __declspec(property(get=GetCustomScale,put=PutCustomScale))
    double CustomScale;
    __declspec(property(get=GetStyleSheet,put=PutStyleSheet))
    _bstr_t StyleSheet;
    __declspec(property(get=GetUCSPerViewport,put=PutUCSPerViewport))
    VARIANT_BOOL UCSPerViewport;
    __declspec(property(get=GetSnapBasePoint,put=PutSnapBasePoint))
    _variant_t SnapBasePoint;
    __declspec(property(get=GetSnapOn,put=PutSnapOn))
    VARIANT_BOOL SnapOn;
    __declspec(property(get=GetSnapRotationAngle,put=PutSnapRotationAngle))
    double SnapRotationAngle;
    __declspec(property(get=GetUCSIconOn,put=PutUCSIconOn))
    VARIANT_BOOL UCSIconOn;
    __declspec(property(get=GetUCSIconAtOrigin,put=PutUCSIconAtOrigin))
    VARIANT_BOOL UCSIconAtOrigin;
    __declspec(property(get=GetTwistAngle,put=PutTwistAngle))
    ACAD_ANGLE TwistAngle;
    __declspec(property(get=GetLensLength,put=PutLensLength))
    double LensLength;
    __declspec(property(get=GetRemoveHiddenLines,put=PutRemoveHiddenLines))
    VARIANT_BOOL RemoveHiddenLines;
    __declspec(property(get=GetTarget,put=PutTarget))
    _variant_t Target;
    __declspec(property(get=GetArcSmoothness,put=PutArcSmoothness))
    long ArcSmoothness;
    __declspec(property(get=GetShadePlot,put=PutShadePlot))
    enum AcShadePlot ShadePlot;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCenter ( );
    void PutCenter (
        const _variant_t & CenterPoint );
    _variant_t GetDirection ( );
    void PutDirection (
        const _variant_t & dirVector );
    VARIANT_BOOL GetGridOn ( );
    void PutGridOn (
        VARIANT_BOOL bGridOn );
    double GetHeight ( );
    void PutHeight (
        double Height );
    double GetWidth ( );
    void PutWidth (
        double Width );
    VARIANT_BOOL GetViewportOn ( );
    void PutViewportOn (
        VARIANT_BOOL bOn );
    VARIANT_BOOL GetClipped ( );
    VARIANT_BOOL GetDisplayLocked ( );
    void PutDisplayLocked (
        VARIANT_BOOL bLocked );
    enum AcViewportScale GetStandardScale ( );
    void PutStandardScale (
        enum AcViewportScale scale );
    double GetCustomScale ( );
    void PutCustomScale (
        double scale );
    _bstr_t GetStyleSheet ( );
    void PutStyleSheet (
        _bstr_t pName );
    VARIANT_BOOL GetUCSPerViewport ( );
    void PutUCSPerViewport (
        VARIANT_BOOL UCSSaved );
    _variant_t GetSnapBasePoint ( );
    void PutSnapBasePoint (
        const _variant_t & lowLeft );
    VARIANT_BOOL GetSnapOn ( );
    void PutSnapOn (
        VARIANT_BOOL bSnapOn );
    double GetSnapRotationAngle ( );
    void PutSnapRotationAngle (
        double Angle );
    VARIANT_BOOL GetUCSIconOn ( );
    void PutUCSIconOn (
        VARIANT_BOOL bIconOn );
    VARIANT_BOOL GetUCSIconAtOrigin ( );
    void PutUCSIconAtOrigin (
        VARIANT_BOOL bIconAtOrigin );
    HRESULT GetGridSpacing (
        double * XSpacing,
        double * YSpacing );
    HRESULT SetGridSpacing (
        double XSpacing,
        double YSpacing );
    HRESULT GetSnapSpacing (
        double * XSpacing,
        double * YSpacing );
    HRESULT SetSnapSpacing (
        double XSpacing,
        double YSpacing );
    HRESULT Display (
        VARIANT_BOOL bStatus );
    ACAD_ANGLE GetTwistAngle ( );
    void PutTwistAngle (
        ACAD_ANGLE Angle );
    double GetLensLength ( );
    void PutLensLength (
        double Length );
    VARIANT_BOOL GetRemoveHiddenLines ( );
    void PutRemoveHiddenLines (
        VARIANT_BOOL bRemoval );
    _variant_t GetTarget ( );
    void PutTarget (
        const _variant_t & targetPoint );
    long GetArcSmoothness ( );
    void PutArcSmoothness (
        long arcSmooth );
    enum AcShadePlot GetShadePlot ( );
    void PutShadePlot (
        enum AcShadePlot ShadePlot );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Center (
        VARIANT * CenterPoint ) = 0;
    virtual HRESULT __stdcall put_Center (
        VARIANT CenterPoint ) = 0;
    virtual HRESULT __stdcall get_Direction (
        VARIANT * dirVector ) = 0;
    virtual HRESULT __stdcall put_Direction (
        VARIANT dirVector ) = 0;
    virtual HRESULT __stdcall get_GridOn (
        VARIANT_BOOL * bGridOn ) = 0;
    virtual HRESULT __stdcall put_GridOn (
        VARIANT_BOOL bGridOn ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * Height ) = 0;
    virtual HRESULT __stdcall put_Height (
        double Height ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * Width ) = 0;
    virtual HRESULT __stdcall put_Width (
        double Width ) = 0;
    virtual HRESULT __stdcall get_ViewportOn (
        VARIANT_BOOL * bOn ) = 0;
    virtual HRESULT __stdcall put_ViewportOn (
        VARIANT_BOOL bOn ) = 0;
    virtual HRESULT __stdcall get_Clipped (
        VARIANT_BOOL * bClipped ) = 0;
    virtual HRESULT __stdcall get_DisplayLocked (
        VARIANT_BOOL * bLocked ) = 0;
    virtual HRESULT __stdcall put_DisplayLocked (
        VARIANT_BOOL bLocked ) = 0;
    virtual HRESULT __stdcall get_StandardScale (
        enum AcViewportScale * scale ) = 0;
    virtual HRESULT __stdcall put_StandardScale (
        enum AcViewportScale scale ) = 0;
    virtual HRESULT __stdcall get_CustomScale (
        double * scale ) = 0;
    virtual HRESULT __stdcall put_CustomScale (
        double scale ) = 0;
    virtual HRESULT __stdcall get_StyleSheet (
        BSTR * pName ) = 0;
    virtual HRESULT __stdcall put_StyleSheet (
        BSTR pName ) = 0;
    virtual HRESULT __stdcall get_UCSPerViewport (
        VARIANT_BOOL * UCSSaved ) = 0;
    virtual HRESULT __stdcall put_UCSPerViewport (
        VARIANT_BOOL UCSSaved ) = 0;
    virtual HRESULT __stdcall get_SnapBasePoint (
        VARIANT * lowLeft ) = 0;
    virtual HRESULT __stdcall put_SnapBasePoint (
        VARIANT lowLeft ) = 0;
    virtual HRESULT __stdcall get_SnapOn (
        VARIANT_BOOL * bSnapOn ) = 0;
    virtual HRESULT __stdcall put_SnapOn (
        VARIANT_BOOL bSnapOn ) = 0;
    virtual HRESULT __stdcall get_SnapRotationAngle (
        double * Angle ) = 0;
    virtual HRESULT __stdcall put_SnapRotationAngle (
        double Angle ) = 0;
    virtual HRESULT __stdcall get_UCSIconOn (
        VARIANT_BOOL * bIconOn ) = 0;
    virtual HRESULT __stdcall put_UCSIconOn (
        VARIANT_BOOL bIconOn ) = 0;
    virtual HRESULT __stdcall get_UCSIconAtOrigin (
        VARIANT_BOOL * bIconAtOrigin ) = 0;
    virtual HRESULT __stdcall put_UCSIconAtOrigin (
        VARIANT_BOOL bIconAtOrigin ) = 0;
    virtual HRESULT __stdcall raw_GetGridSpacing (
        double * XSpacing,
        double * YSpacing ) = 0;
    virtual HRESULT __stdcall raw_SetGridSpacing (
        double XSpacing,
        double YSpacing ) = 0;
    virtual HRESULT __stdcall raw_GetSnapSpacing (
        double * XSpacing,
        double * YSpacing ) = 0;
    virtual HRESULT __stdcall raw_SetSnapSpacing (
        double XSpacing,
        double YSpacing ) = 0;
    virtual HRESULT __stdcall raw_Display (
        VARIANT_BOOL bStatus ) = 0;
    virtual HRESULT __stdcall get_TwistAngle (
        ACAD_ANGLE * Angle ) = 0;
    virtual HRESULT __stdcall put_TwistAngle (
        ACAD_ANGLE Angle ) = 0;
    virtual HRESULT __stdcall get_LensLength (
        double * Length ) = 0;
    virtual HRESULT __stdcall put_LensLength (
        double Length ) = 0;
    virtual HRESULT __stdcall get_RemoveHiddenLines (
        VARIANT_BOOL * bRemoval ) = 0;
    virtual HRESULT __stdcall put_RemoveHiddenLines (
        VARIANT_BOOL bRemoval ) = 0;
    virtual HRESULT __stdcall get_Target (
        VARIANT * targetPoint ) = 0;
    virtual HRESULT __stdcall put_Target (
        VARIANT targetPoint ) = 0;
    virtual HRESULT __stdcall get_ArcSmoothness (
        long * arcSmooth ) = 0;
    virtual HRESULT __stdcall put_ArcSmoothness (
        long arcSmooth ) = 0;
    virtual HRESULT __stdcall get_ShadePlot (
        enum AcShadePlot * ShadePlot ) = 0;
    virtual HRESULT __stdcall put_ShadePlot (
        enum AcShadePlot ShadePlot ) = 0;
};

struct __declspec(uuid("704eea43-2e4f-4b19-95f7-6ed2a5aeed2d"))
IAcadBlocks : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadBlockPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadBlockPtr Add (
        const _variant_t & InsertionPoint,
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadBlock * * pItem ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT InsertionPoint,
        BSTR Name,
        struct IAcadBlock * * pBlock ) = 0;
};

struct __declspec(uuid("cc54aea3-cbeb-4a72-befd-41d2cddd96b3"))
IAcadGroups : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadGroupPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadGroupPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadGroup * * pItem ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        struct IAcadGroup * * pDimStyle ) = 0;
};

struct __declspec(uuid("6e8401d2-0722-4ffa-b1f6-f75d0eaced05"))
IAcadGroup : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(put=Putcolor))
    enum AcColor color;
    __declspec(property(put=PutLayer))
    _bstr_t Layer;
    __declspec(property(put=PutLinetype))
    _bstr_t Linetype;
    __declspec(property(put=PutLinetypeScale))
    ACAD_NOUNITS LinetypeScale;
    __declspec(property(put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(put=PutPlotStyleName))
    _bstr_t PlotStyleName;
    __declspec(property(put=PutLineweight))
    ACAD_LWEIGHT Lineweight;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(put=PutTrueColor))
    IAcadAcCmColorPtr TrueColor;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadEntityPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    void PutTrueColor (
        struct IAcadAcCmColor * _arg1 );
    void PutLayer (
        _bstr_t _arg1 );
    void PutLinetype (
        _bstr_t _arg1 );
    void PutLinetypeScale (
        ACAD_NOUNITS _arg1 );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    HRESULT Highlight (
        VARIANT_BOOL HighlightFlag );
    void PutPlotStyleName (
        _bstr_t _arg1 );
    void PutLineweight (
        ACAD_LWEIGHT _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    HRESULT AppendItems (
        const _variant_t & Objects );
    HRESULT RemoveItems (
        const _variant_t & Objects );
    HRESULT Update ( );
    void Putcolor (
        enum AcColor _arg1 );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadEntity * * ppEntity ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_TrueColor (
        struct IAcadAcCmColor * _arg1 ) = 0;
    virtual HRESULT __stdcall put_Layer (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall put_Linetype (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall put_LinetypeScale (
        ACAD_NOUNITS _arg1 ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL _arg1 ) = 0;
    virtual HRESULT __stdcall raw_Highlight (
        VARIANT_BOOL HighlightFlag ) = 0;
    virtual HRESULT __stdcall put_PlotStyleName (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall put_Lineweight (
        ACAD_LWEIGHT _arg1 ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall raw_AppendItems (
        VARIANT Objects ) = 0;
    virtual HRESULT __stdcall raw_RemoveItems (
        VARIANT Objects ) = 0;
    virtual HRESULT __stdcall raw_Update ( ) = 0;
    virtual HRESULT __stdcall put_color (
        enum AcColor _arg1 ) = 0;
};

struct __declspec(uuid("722a6eb9-a6a7-40d5-9db3-4f4b2ba2c6fe"))
IAcadDimStyles : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadDimStylePtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadDimStylePtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadDimStyle * * pItem ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        struct IAcadDimStyle * * pDimStyle ) = 0;
};

struct __declspec(uuid("df7932cd-4e3a-4de1-b9be-b90a4005db44"))
IAcadDimStyle : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    HRESULT CopyFrom (
        IDispatch * StyleSource );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR bstrName ) = 0;
    virtual HRESULT __stdcall raw_CopyFrom (
        IDispatch * StyleSource ) = 0;
};

struct __declspec(uuid("c347dcbd-d10d-4e35-8509-463a47f6f197"))
IAcadLayers : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadLayerPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadLayerPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadLayer * * pItem ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        struct IAcadLayer * * pLayer ) = 0;
};

struct __declspec(uuid("7f210ba8-5ac1-41b1-b3ab-f05c5a261118"))
IAcadLayer : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=Getcolor,put=Putcolor))
    enum AcColor color;
    __declspec(property(get=GetFreeze,put=PutFreeze))
    VARIANT_BOOL Freeze;
    __declspec(property(get=GetLayerOn,put=PutLayerOn))
    VARIANT_BOOL LayerOn;
    __declspec(property(get=GetLinetype,put=PutLinetype))
    _bstr_t Linetype;
    __declspec(property(get=GetLock,put=PutLock))
    VARIANT_BOOL Lock;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPlottable,put=PutPlottable))
    VARIANT_BOOL Plottable;
    __declspec(property(get=GetViewportDefault,put=PutViewportDefault))
    VARIANT_BOOL ViewportDefault;
    __declspec(property(get=GetPlotStyleName,put=PutPlotStyleName))
    _bstr_t PlotStyleName;
    __declspec(property(get=GetLineweight,put=PutLineweight))
    ACAD_LWEIGHT Lineweight;
    __declspec(property(get=GetTrueColor,put=PutTrueColor))
    IAcadAcCmColorPtr TrueColor;

    //
    // Wrapper methods for error-handling
    //

    enum AcColor Getcolor ( );
    void Putcolor (
        enum AcColor color );
    IAcadAcCmColorPtr GetTrueColor ( );
    void PutTrueColor (
        struct IAcadAcCmColor * pColor );
    VARIANT_BOOL GetFreeze ( );
    void PutFreeze (
        VARIANT_BOOL bFreeze );
    VARIANT_BOOL GetLayerOn ( );
    void PutLayerOn (
        VARIANT_BOOL bOn );
    _bstr_t GetLinetype ( );
    void PutLinetype (
        _bstr_t Linetype );
    VARIANT_BOOL GetLock ( );
    void PutLock (
        VARIANT_BOOL Block );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    VARIANT_BOOL GetPlottable ( );
    void PutPlottable (
        VARIANT_BOOL bPlottable );
    VARIANT_BOOL GetViewportDefault ( );
    void PutViewportDefault (
        VARIANT_BOOL bDefault );
    _bstr_t GetPlotStyleName ( );
    void PutPlotStyleName (
        _bstr_t plotStyle );
    ACAD_LWEIGHT GetLineweight ( );
    void PutLineweight (
        ACAD_LWEIGHT Lineweight );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_color (
        enum AcColor * color ) = 0;
    virtual HRESULT __stdcall put_color (
        enum AcColor color ) = 0;
    virtual HRESULT __stdcall get_TrueColor (
        struct IAcadAcCmColor * * pColor ) = 0;
    virtual HRESULT __stdcall put_TrueColor (
        struct IAcadAcCmColor * pColor ) = 0;
    virtual HRESULT __stdcall get_Freeze (
        VARIANT_BOOL * bFreeze ) = 0;
    virtual HRESULT __stdcall put_Freeze (
        VARIANT_BOOL bFreeze ) = 0;
    virtual HRESULT __stdcall get_LayerOn (
        VARIANT_BOOL * bOn ) = 0;
    virtual HRESULT __stdcall put_LayerOn (
        VARIANT_BOOL bOn ) = 0;
    virtual HRESULT __stdcall get_Linetype (
        BSTR * Linetype ) = 0;
    virtual HRESULT __stdcall put_Linetype (
        BSTR Linetype ) = 0;
    virtual HRESULT __stdcall get_Lock (
        VARIANT_BOOL * Block ) = 0;
    virtual HRESULT __stdcall put_Lock (
        VARIANT_BOOL Block ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR bstrName ) = 0;
    virtual HRESULT __stdcall get_Plottable (
        VARIANT_BOOL * bPlottable ) = 0;
    virtual HRESULT __stdcall put_Plottable (
        VARIANT_BOOL bPlottable ) = 0;
    virtual HRESULT __stdcall get_ViewportDefault (
        VARIANT_BOOL * bDefault ) = 0;
    virtual HRESULT __stdcall put_ViewportDefault (
        VARIANT_BOOL bDefault ) = 0;
    virtual HRESULT __stdcall get_PlotStyleName (
        BSTR * plotStyle ) = 0;
    virtual HRESULT __stdcall put_PlotStyleName (
        BSTR plotStyle ) = 0;
    virtual HRESULT __stdcall get_Lineweight (
        ACAD_LWEIGHT * Lineweight ) = 0;
    virtual HRESULT __stdcall put_Lineweight (
        ACAD_LWEIGHT Lineweight ) = 0;
};

struct __declspec(uuid("96a72a20-a6c9-470b-ac3d-a0ae3813068a"))
IAcadLineTypes : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadLineTypePtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadLineTypePtr Add (
        _bstr_t Name );
    HRESULT Load (
        _bstr_t Name,
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadLineType * * pItem ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        struct IAcadLineType * * pLinetype ) = 0;
    virtual HRESULT __stdcall raw_Load (
        BSTR Name,
        BSTR FileName ) = 0;
};

struct __declspec(uuid("09006fdc-9bc1-4ab8-93ff-78b7790dd467"))
IAcadLineType : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t bstrDes );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Description (
        BSTR * bstrDes ) = 0;
    virtual HRESULT __stdcall put_Description (
        BSTR bstrDes ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR bstrName ) = 0;
};

struct __declspec(uuid("c13c2c5e-671c-4674-a602-ecc41fef21f7"))
IAcadDictionaries : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadObjectPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadDictionaryPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadObject * * pItem ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        struct IAcadDictionary * * pDimStyle ) = 0;
};

struct __declspec(uuid("1b67bda6-499e-44d5-b839-b60a141d6ccd"))
IAcadDictionary : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    IAcadObjectPtr AddObject (
        _bstr_t Keyword,
        _bstr_t ObjectName );
    _bstr_t GetName (
        struct IAcadObject * Object );
    IAcadObjectPtr GetObject (
        _bstr_t Name );
    IAcadObjectPtr Remove (
        _bstr_t Name );
    HRESULT Rename (
        _bstr_t OldName,
        _bstr_t NewName );
    HRESULT Replace (
        _bstr_t OldName,
        struct IAcadObject * pObj );
    IAcadObjectPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAcadXRecordPtr AddXRecord (
        _bstr_t Keyword );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall raw_AddObject (
        BSTR Keyword,
        BSTR ObjectName,
        struct IAcadObject * * pNewObj ) = 0;
    virtual HRESULT __stdcall raw_GetName (
        struct IAcadObject * Object,
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall raw_GetObject (
        BSTR Name,
        struct IAcadObject * * pObj ) = 0;
    virtual HRESULT __stdcall raw_Remove (
        BSTR Name,
        struct IAcadObject * * pObj ) = 0;
    virtual HRESULT __stdcall raw_Rename (
        BSTR OldName,
        BSTR NewName ) = 0;
    virtual HRESULT __stdcall raw_Replace (
        BSTR OldName,
        struct IAcadObject * pObj ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadObject * * pItem ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pVal ) = 0;
    virtual HRESULT __stdcall raw_AddXRecord (
        BSTR Keyword,
        struct IAcadXRecord * * pNewXRecord ) = 0;
};

struct __declspec(uuid("a90a35e1-d3d9-4254-bdb6-4a1dedaf6054"))
IAcadXRecord : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetTranslateIDs,put=PutTranslateIDs))
    VARIANT_BOOL TranslateIDs;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    HRESULT GetXRecordData (
        VARIANT * XRecordDataType,
        VARIANT * XRecordDataValue );
    HRESULT SetXRecordData (
        const _variant_t & XRecordDataType,
        const _variant_t & XRecordDataValue );
    VARIANT_BOOL GetTranslateIDs ( );
    void PutTranslateIDs (
        VARIANT_BOOL xlateIds );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR bstrName ) = 0;
    virtual HRESULT __stdcall raw_GetXRecordData (
        VARIANT * XRecordDataType,
        VARIANT * XRecordDataValue ) = 0;
    virtual HRESULT __stdcall raw_SetXRecordData (
        VARIANT XRecordDataType,
        VARIANT XRecordDataValue ) = 0;
    virtual HRESULT __stdcall get_TranslateIDs (
        VARIANT_BOOL * xlateIds ) = 0;
    virtual HRESULT __stdcall put_TranslateIDs (
        VARIANT_BOOL xlateIds ) = 0;
};

struct __declspec(uuid("801cc2fa-39b3-4846-8e23-7d4404426f84"))
IAcadRegisteredApplications : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadRegisteredApplicationPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadRegisteredApplicationPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadRegisteredApplication * * pItem ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        struct IAcadRegisteredApplication * * pRegApp ) = 0;
};

struct __declspec(uuid("55c46ac7-115f-4c53-b569-6a6a033b66a7"))
IAcadRegisteredApplication : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR bstrName ) = 0;
};

struct __declspec(uuid("0d40004a-b71d-40b3-9c87-3c98427b9d39"))
IAcadTextStyles : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadTextStylePtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadTextStylePtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadTextStyle * * pItem ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        struct IAcadTextStyle * * pTextStyle ) = 0;
};

struct __declspec(uuid("3b272fdc-c510-44fc-b4f5-c2b2751b8daa"))
IAcadTextStyle : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBigFontFile,put=PutBigFontFile))
    _bstr_t BigFontFile;
    __declspec(property(get=GetfontFile,put=PutfontFile))
    _bstr_t fontFile;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetLastHeight,put=PutLastHeight))
    double LastHeight;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetObliqueAngle,put=PutObliqueAngle))
    ACAD_ANGLE ObliqueAngle;
    __declspec(property(get=GetTextGenerationFlag,put=PutTextGenerationFlag))
    long TextGenerationFlag;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetBigFontFile ( );
    void PutBigFontFile (
        _bstr_t fontFile );
    _bstr_t GetfontFile ( );
    void PutfontFile (
        _bstr_t fontFile );
    double GetHeight ( );
    void PutHeight (
        double Height );
    double GetLastHeight ( );
    void PutLastHeight (
        double Height );
    _bstr_t GetName ( );
    ACAD_ANGLE GetObliqueAngle ( );
    void PutObliqueAngle (
        ACAD_ANGLE obliAngle );
    long GetTextGenerationFlag ( );
    void PutTextGenerationFlag (
        long textGenFlag );
    double GetWidth ( );
    void PutWidth (
        double Width );
    HRESULT GetFont (
        BSTR * TypeFace,
        VARIANT_BOOL * Bold,
        VARIANT_BOOL * Italic,
        long * Charset,
        long * PitchAndFamily );
    HRESULT SetFont (
        _bstr_t TypeFace,
        VARIANT_BOOL Bold,
        VARIANT_BOOL Italic,
        long Charset,
        long PitchAndFamily );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_BigFontFile (
        BSTR * fontFile ) = 0;
    virtual HRESULT __stdcall put_BigFontFile (
        BSTR fontFile ) = 0;
    virtual HRESULT __stdcall get_fontFile (
        BSTR * fontFile ) = 0;
    virtual HRESULT __stdcall put_fontFile (
        BSTR fontFile ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * Height ) = 0;
    virtual HRESULT __stdcall put_Height (
        double Height ) = 0;
    virtual HRESULT __stdcall get_LastHeight (
        double * Height ) = 0;
    virtual HRESULT __stdcall put_LastHeight (
        double Height ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall get_ObliqueAngle (
        ACAD_ANGLE * obliAngle ) = 0;
    virtual HRESULT __stdcall put_ObliqueAngle (
        ACAD_ANGLE obliAngle ) = 0;
    virtual HRESULT __stdcall get_TextGenerationFlag (
        long * textGenFlag ) = 0;
    virtual HRESULT __stdcall put_TextGenerationFlag (
        long textGenFlag ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * Width ) = 0;
    virtual HRESULT __stdcall put_Width (
        double Width ) = 0;
    virtual HRESULT __stdcall raw_GetFont (
        BSTR * TypeFace,
        VARIANT_BOOL * Bold,
        VARIANT_BOOL * Italic,
        long * Charset,
        long * PitchAndFamily ) = 0;
    virtual HRESULT __stdcall raw_SetFont (
        BSTR TypeFace,
        VARIANT_BOOL Bold,
        VARIANT_BOOL Italic,
        long Charset,
        long PitchAndFamily ) = 0;
};

struct __declspec(uuid("ba5a4d4d-15a4-4b95-a19f-d00b7d0b54fb"))
IAcadUCSs : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadUCSPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadUCSPtr Add (
        const _variant_t & Origin,
        const _variant_t & XAxisPoint,
        const _variant_t & YAxisPoint,
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadUCS * * pItem ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT Origin,
        VARIANT XAxisPoint,
        VARIANT YAxisPoint,
        BSTR Name,
        struct IAcadUCS * * pUCS ) = 0;
};

struct __declspec(uuid("0dddb5f6-d8da-4f44-81e1-33dbda981ca1"))
IAcadUCS : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    _variant_t Origin;
    __declspec(property(get=GetXVector,put=PutXVector))
    _variant_t XVector;
    __declspec(property(get=GetYVector,put=PutYVector))
    _variant_t YVector;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    _variant_t GetOrigin ( );
    void PutOrigin (
        const _variant_t & Origin );
    _variant_t GetXVector ( );
    void PutXVector (
        const _variant_t & XVector );
    _variant_t GetYVector ( );
    void PutYVector (
        const _variant_t & YVector );
    _variant_t GetUCSMatrix ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR bstrName ) = 0;
    virtual HRESULT __stdcall get_Origin (
        VARIANT * Origin ) = 0;
    virtual HRESULT __stdcall put_Origin (
        VARIANT Origin ) = 0;
    virtual HRESULT __stdcall get_XVector (
        VARIANT * XVector ) = 0;
    virtual HRESULT __stdcall put_XVector (
        VARIANT XVector ) = 0;
    virtual HRESULT __stdcall get_YVector (
        VARIANT * YVector ) = 0;
    virtual HRESULT __stdcall put_YVector (
        VARIANT YVector ) = 0;
    virtual HRESULT __stdcall raw_GetUCSMatrix (
        VARIANT * transMatrix ) = 0;
};

struct __declspec(uuid("ddec76c4-e07a-46a9-89f2-b1d1954736ca"))
IAcadViews : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadViewPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadViewPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadView * * pItem ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        struct IAcadView * * pRegApp ) = 0;
};

struct __declspec(uuid("186c8834-89d2-4939-b506-ca0f234279f8"))
IAcadView : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter,put=PutCenter))
    _variant_t Center;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetTarget,put=PutTarget))
    _variant_t Target;
    __declspec(property(get=GetDirection,put=PutDirection))
    _variant_t Direction;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCenter ( );
    void PutCenter (
        const _variant_t & Center );
    double GetHeight ( );
    void PutHeight (
        double Height );
    double GetWidth ( );
    void PutWidth (
        double Width );
    _variant_t GetTarget ( );
    void PutTarget (
        const _variant_t & targetPoint );
    _variant_t GetDirection ( );
    void PutDirection (
        const _variant_t & dirVec );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Center (
        VARIANT * Center ) = 0;
    virtual HRESULT __stdcall put_Center (
        VARIANT Center ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * Height ) = 0;
    virtual HRESULT __stdcall put_Height (
        double Height ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * Width ) = 0;
    virtual HRESULT __stdcall put_Width (
        double Width ) = 0;
    virtual HRESULT __stdcall get_Target (
        VARIANT * targetPoint ) = 0;
    virtual HRESULT __stdcall put_Target (
        VARIANT targetPoint ) = 0;
    virtual HRESULT __stdcall get_Direction (
        VARIANT * dirVec ) = 0;
    virtual HRESULT __stdcall put_Direction (
        VARIANT dirVec ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR bstrName ) = 0;
};

struct __declspec(uuid("5ef9cf1c-db3d-4a14-84cd-bab3f372b779"))
IAcadViewports : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadViewportPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadViewportPtr Add (
        _bstr_t Name );
    HRESULT DeleteConfiguration (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadViewport * * pItem ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        struct IAcadViewport * * pRegApp ) = 0;
    virtual HRESULT __stdcall raw_DeleteConfiguration (
        BSTR Name ) = 0;
};

struct __declspec(uuid("8e05f37a-ccdf-40ec-9afa-824272ad24c4"))
IAcadViewport : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter,put=PutCenter))
    _variant_t Center;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetTarget,put=PutTarget))
    _variant_t Target;
    __declspec(property(get=GetDirection,put=PutDirection))
    _variant_t Direction;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetGridOn,put=PutGridOn))
    VARIANT_BOOL GridOn;
    __declspec(property(get=GetOrthoOn,put=PutOrthoOn))
    VARIANT_BOOL OrthoOn;
    __declspec(property(get=GetSnapBasePoint,put=PutSnapBasePoint))
    _variant_t SnapBasePoint;
    __declspec(property(get=GetSnapOn,put=PutSnapOn))
    VARIANT_BOOL SnapOn;
    __declspec(property(get=GetSnapRotationAngle,put=PutSnapRotationAngle))
    ACAD_ANGLE SnapRotationAngle;
    __declspec(property(get=GetUCSIconOn,put=PutUCSIconOn))
    VARIANT_BOOL UCSIconOn;
    __declspec(property(get=GetUCSIconAtOrigin,put=PutUCSIconAtOrigin))
    VARIANT_BOOL UCSIconAtOrigin;
    __declspec(property(get=GetLowerLeftCorner))
    _variant_t LowerLeftCorner;
    __declspec(property(get=GetUpperRightCorner))
    _variant_t UpperRightCorner;
    __declspec(property(get=GetArcSmoothness,put=PutArcSmoothness))
    long ArcSmoothness;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCenter ( );
    void PutCenter (
        const _variant_t & Center );
    double GetHeight ( );
    void PutHeight (
        double Height );
    double GetWidth ( );
    void PutWidth (
        double Width );
    _variant_t GetTarget ( );
    void PutTarget (
        const _variant_t & targetPoint );
    _variant_t GetDirection ( );
    void PutDirection (
        const _variant_t & dirVec );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    VARIANT_BOOL GetGridOn ( );
    void PutGridOn (
        VARIANT_BOOL bGridOn );
    VARIANT_BOOL GetOrthoOn ( );
    void PutOrthoOn (
        VARIANT_BOOL bOrthoOn );
    _variant_t GetSnapBasePoint ( );
    void PutSnapBasePoint (
        const _variant_t & lowLeft );
    VARIANT_BOOL GetSnapOn ( );
    void PutSnapOn (
        VARIANT_BOOL bSnapOn );
    ACAD_ANGLE GetSnapRotationAngle ( );
    void PutSnapRotationAngle (
        ACAD_ANGLE Angle );
    VARIANT_BOOL GetUCSIconOn ( );
    void PutUCSIconOn (
        VARIANT_BOOL bIconOn );
    VARIANT_BOOL GetUCSIconAtOrigin ( );
    void PutUCSIconAtOrigin (
        VARIANT_BOOL bIconAtOrigin );
    _variant_t GetLowerLeftCorner ( );
    _variant_t GetUpperRightCorner ( );
    HRESULT Split (
        enum AcViewportSplitType NumWins );
    HRESULT GetGridSpacing (
        double * XSpacing,
        double * YSpacing );
    HRESULT SetGridSpacing (
        double XSpacing,
        double YSpacing );
    HRESULT GetSnapSpacing (
        double * XSpacing,
        double * YSpacing );
    HRESULT SetSnapSpacing (
        double XSpacing,
        double YSpacing );
    HRESULT SetView (
        struct IAcadView * View );
    long GetArcSmoothness ( );
    void PutArcSmoothness (
        long arcSmooth );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Center (
        VARIANT * Center ) = 0;
    virtual HRESULT __stdcall put_Center (
        VARIANT Center ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * Height ) = 0;
    virtual HRESULT __stdcall put_Height (
        double Height ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * Width ) = 0;
    virtual HRESULT __stdcall put_Width (
        double Width ) = 0;
    virtual HRESULT __stdcall get_Target (
        VARIANT * targetPoint ) = 0;
    virtual HRESULT __stdcall put_Target (
        VARIANT targetPoint ) = 0;
    virtual HRESULT __stdcall get_Direction (
        VARIANT * dirVec ) = 0;
    virtual HRESULT __stdcall put_Direction (
        VARIANT dirVec ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR bstrName ) = 0;
    virtual HRESULT __stdcall get_GridOn (
        VARIANT_BOOL * bGridOn ) = 0;
    virtual HRESULT __stdcall put_GridOn (
        VARIANT_BOOL bGridOn ) = 0;
    virtual HRESULT __stdcall get_OrthoOn (
        VARIANT_BOOL * bOrthoOn ) = 0;
    virtual HRESULT __stdcall put_OrthoOn (
        VARIANT_BOOL bOrthoOn ) = 0;
    virtual HRESULT __stdcall get_SnapBasePoint (
        VARIANT * lowLeft ) = 0;
    virtual HRESULT __stdcall put_SnapBasePoint (
        VARIANT lowLeft ) = 0;
    virtual HRESULT __stdcall get_SnapOn (
        VARIANT_BOOL * bSnapOn ) = 0;
    virtual HRESULT __stdcall put_SnapOn (
        VARIANT_BOOL bSnapOn ) = 0;
    virtual HRESULT __stdcall get_SnapRotationAngle (
        ACAD_ANGLE * Angle ) = 0;
    virtual HRESULT __stdcall put_SnapRotationAngle (
        ACAD_ANGLE Angle ) = 0;
    virtual HRESULT __stdcall get_UCSIconOn (
        VARIANT_BOOL * bIconOn ) = 0;
    virtual HRESULT __stdcall put_UCSIconOn (
        VARIANT_BOOL bIconOn ) = 0;
    virtual HRESULT __stdcall get_UCSIconAtOrigin (
        VARIANT_BOOL * bIconAtOrigin ) = 0;
    virtual HRESULT __stdcall put_UCSIconAtOrigin (
        VARIANT_BOOL bIconAtOrigin ) = 0;
    virtual HRESULT __stdcall get_LowerLeftCorner (
        VARIANT * lowLeft ) = 0;
    virtual HRESULT __stdcall get_UpperRightCorner (
        VARIANT * UpperRight ) = 0;
    virtual HRESULT __stdcall raw_Split (
        enum AcViewportSplitType NumWins ) = 0;
    virtual HRESULT __stdcall raw_GetGridSpacing (
        double * XSpacing,
        double * YSpacing ) = 0;
    virtual HRESULT __stdcall raw_SetGridSpacing (
        double XSpacing,
        double YSpacing ) = 0;
    virtual HRESULT __stdcall raw_GetSnapSpacing (
        double * XSpacing,
        double * YSpacing ) = 0;
    virtual HRESULT __stdcall raw_SetSnapSpacing (
        double XSpacing,
        double YSpacing ) = 0;
    virtual HRESULT __stdcall raw_SetView (
        struct IAcadView * View ) = 0;
    virtual HRESULT __stdcall get_ArcSmoothness (
        long * arcSmooth ) = 0;
    virtual HRESULT __stdcall put_ArcSmoothness (
        long arcSmooth ) = 0;
};

struct __declspec(uuid("d0d2dfd9-f8da-4f72-a44d-8c503100a3c2"))
IAcadLayouts : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadLayoutPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadLayoutPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadLayout * * pItem ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        struct IAcadLayout * * pLayout ) = 0;
};

struct __declspec(uuid("e0b3c996-314e-4f29-89e9-ca75c7de9985"))
IAcadPlotConfigurations : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadPlotConfigurationPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadPlotConfigurationPtr Add (
        _bstr_t Name,
        const _variant_t & ModelType = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadPlotConfiguration * * pItem ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        VARIANT ModelType,
        struct IAcadPlotConfiguration * * pPlotConfig ) = 0;
};

struct __declspec(uuid("7c526650-42e8-44c2-b6f6-d113781226bf"))
IAcadDatabasePreferences : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetSolidFill,put=PutSolidFill))
    VARIANT_BOOL SolidFill;
    __declspec(property(get=GetXRefEdit,put=PutXRefEdit))
    VARIANT_BOOL XRefEdit;
    __declspec(property(get=GetXRefLayerVisibility,put=PutXRefLayerVisibility))
    VARIANT_BOOL XRefLayerVisibility;
    __declspec(property(get=GetOLELaunch,put=PutOLELaunch))
    VARIANT_BOOL OLELaunch;
    __declspec(property(get=GetAllowLongSymbolNames,put=PutAllowLongSymbolNames))
    VARIANT_BOOL AllowLongSymbolNames;
    __declspec(property(get=GetObjectSortBySelection,put=PutObjectSortBySelection))
    VARIANT_BOOL ObjectSortBySelection;
    __declspec(property(get=GetObjectSortBySnap,put=PutObjectSortBySnap))
    VARIANT_BOOL ObjectSortBySnap;
    __declspec(property(get=GetObjectSortByRedraws,put=PutObjectSortByRedraws))
    VARIANT_BOOL ObjectSortByRedraws;
    __declspec(property(get=GetObjectSortByRegens,put=PutObjectSortByRegens))
    VARIANT_BOOL ObjectSortByRegens;
    __declspec(property(get=GetObjectSortByPlotting,put=PutObjectSortByPlotting))
    VARIANT_BOOL ObjectSortByPlotting;
    __declspec(property(get=GetObjectSortByPSOutput,put=PutObjectSortByPSOutput))
    VARIANT_BOOL ObjectSortByPSOutput;
    __declspec(property(get=GetContourLinesPerSurface,put=PutContourLinesPerSurface))
    long ContourLinesPerSurface;
    __declspec(property(get=GetDisplaySilhouette,put=PutDisplaySilhouette))
    VARIANT_BOOL DisplaySilhouette;
    __declspec(property(get=GetMaxActiveViewports,put=PutMaxActiveViewports))
    long MaxActiveViewports;
    __declspec(property(get=GetRenderSmoothness,put=PutRenderSmoothness))
    double RenderSmoothness;
    __declspec(property(get=GetSegmentPerPolyline,put=PutSegmentPerPolyline))
    long SegmentPerPolyline;
    __declspec(property(get=GetTextFrameDisplay,put=PutTextFrameDisplay))
    VARIANT_BOOL TextFrameDisplay;
    __declspec(property(get=GetLineweight,put=PutLineweight))
    enum AcLineWeight Lineweight;
    __declspec(property(get=GetLineWeightDisplay,put=PutLineWeightDisplay))
    VARIANT_BOOL LineWeightDisplay;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    VARIANT_BOOL GetSolidFill ( );
    void PutSolidFill (
        VARIANT_BOOL Fill );
    VARIANT_BOOL GetXRefEdit ( );
    void PutXRefEdit (
        VARIANT_BOOL Edit );
    VARIANT_BOOL GetXRefLayerVisibility ( );
    void PutXRefLayerVisibility (
        VARIANT_BOOL XRefLayerVis );
    VARIANT_BOOL GetOLELaunch ( );
    void PutOLELaunch (
        VARIANT_BOOL Launch );
    VARIANT_BOOL GetAllowLongSymbolNames ( );
    void PutAllowLongSymbolNames (
        VARIANT_BOOL LongNames );
    VARIANT_BOOL GetObjectSortBySelection ( );
    void PutObjectSortBySelection (
        VARIANT_BOOL Sort );
    VARIANT_BOOL GetObjectSortBySnap ( );
    void PutObjectSortBySnap (
        VARIANT_BOOL Sort );
    VARIANT_BOOL GetObjectSortByRedraws ( );
    void PutObjectSortByRedraws (
        VARIANT_BOOL Sort );
    VARIANT_BOOL GetObjectSortByRegens ( );
    void PutObjectSortByRegens (
        VARIANT_BOOL Sort );
    VARIANT_BOOL GetObjectSortByPlotting ( );
    void PutObjectSortByPlotting (
        VARIANT_BOOL Sort );
    VARIANT_BOOL GetObjectSortByPSOutput ( );
    void PutObjectSortByPSOutput (
        VARIANT_BOOL Sort );
    void PutContourLinesPerSurface (
        long Path );
    long GetContourLinesPerSurface ( );
    void PutDisplaySilhouette (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetDisplaySilhouette ( );
    void PutMaxActiveViewports (
        long Path );
    long GetMaxActiveViewports ( );
    void PutRenderSmoothness (
        double Path );
    double GetRenderSmoothness ( );
    void PutSegmentPerPolyline (
        long Path );
    long GetSegmentPerPolyline ( );
    void PutTextFrameDisplay (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetTextFrameDisplay ( );
    void PutLineweight (
        enum AcLineWeight Path );
    enum AcLineWeight GetLineweight ( );
    void PutLineWeightDisplay (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetLineWeightDisplay ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        IDispatch * * pAppObj ) = 0;
    virtual HRESULT __stdcall get_SolidFill (
        VARIANT_BOOL * Fill ) = 0;
    virtual HRESULT __stdcall put_SolidFill (
        VARIANT_BOOL Fill ) = 0;
    virtual HRESULT __stdcall get_XRefEdit (
        VARIANT_BOOL * Edit ) = 0;
    virtual HRESULT __stdcall put_XRefEdit (
        VARIANT_BOOL Edit ) = 0;
    virtual HRESULT __stdcall get_XRefLayerVisibility (
        VARIANT_BOOL * XRefLayerVis ) = 0;
    virtual HRESULT __stdcall put_XRefLayerVisibility (
        VARIANT_BOOL XRefLayerVis ) = 0;
    virtual HRESULT __stdcall get_OLELaunch (
        VARIANT_BOOL * Launch ) = 0;
    virtual HRESULT __stdcall put_OLELaunch (
        VARIANT_BOOL Launch ) = 0;
    virtual HRESULT __stdcall get_AllowLongSymbolNames (
        VARIANT_BOOL * LongNames ) = 0;
    virtual HRESULT __stdcall put_AllowLongSymbolNames (
        VARIANT_BOOL LongNames ) = 0;
    virtual HRESULT __stdcall get_ObjectSortBySelection (
        VARIANT_BOOL * Sort ) = 0;
    virtual HRESULT __stdcall put_ObjectSortBySelection (
        VARIANT_BOOL Sort ) = 0;
    virtual HRESULT __stdcall get_ObjectSortBySnap (
        VARIANT_BOOL * Sort ) = 0;
    virtual HRESULT __stdcall put_ObjectSortBySnap (
        VARIANT_BOOL Sort ) = 0;
    virtual HRESULT __stdcall get_ObjectSortByRedraws (
        VARIANT_BOOL * Sort ) = 0;
    virtual HRESULT __stdcall put_ObjectSortByRedraws (
        VARIANT_BOOL Sort ) = 0;
    virtual HRESULT __stdcall get_ObjectSortByRegens (
        VARIANT_BOOL * Sort ) = 0;
    virtual HRESULT __stdcall put_ObjectSortByRegens (
        VARIANT_BOOL Sort ) = 0;
    virtual HRESULT __stdcall get_ObjectSortByPlotting (
        VARIANT_BOOL * Sort ) = 0;
    virtual HRESULT __stdcall put_ObjectSortByPlotting (
        VARIANT_BOOL Sort ) = 0;
    virtual HRESULT __stdcall get_ObjectSortByPSOutput (
        VARIANT_BOOL * Sort ) = 0;
    virtual HRESULT __stdcall put_ObjectSortByPSOutput (
        VARIANT_BOOL Sort ) = 0;
    virtual HRESULT __stdcall put_ContourLinesPerSurface (
        long Path ) = 0;
    virtual HRESULT __stdcall get_ContourLinesPerSurface (
        long * Path ) = 0;
    virtual HRESULT __stdcall put_DisplaySilhouette (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_DisplaySilhouette (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_MaxActiveViewports (
        long Path ) = 0;
    virtual HRESULT __stdcall get_MaxActiveViewports (
        long * Path ) = 0;
    virtual HRESULT __stdcall put_RenderSmoothness (
        double Path ) = 0;
    virtual HRESULT __stdcall get_RenderSmoothness (
        double * Path ) = 0;
    virtual HRESULT __stdcall put_SegmentPerPolyline (
        long Path ) = 0;
    virtual HRESULT __stdcall get_SegmentPerPolyline (
        long * Path ) = 0;
    virtual HRESULT __stdcall put_TextFrameDisplay (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_TextFrameDisplay (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_Lineweight (
        enum AcLineWeight Path ) = 0;
    virtual HRESULT __stdcall get_Lineweight (
        enum AcLineWeight * Path ) = 0;
    virtual HRESULT __stdcall put_LineWeightDisplay (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_LineWeightDisplay (
        VARIANT_BOOL * Path ) = 0;
};

struct __declspec(uuid("c8985250-c2a1-47b4-8928-ca81a496eb27"))
IAcadFileDependencies : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadFileDependencyPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr GetApplication ( );
    long GetCount ( );
    long CreateEntry (
        _bstr_t Feature,
        _bstr_t FullFileName,
        VARIANT_BOOL AffectsGraphics,
        VARIANT_BOOL noIncrement );
    long IndexOf (
        _bstr_t Feature,
        _bstr_t FullFileName );
    HRESULT RemoveEntry (
        long Index,
        VARIANT_BOOL forceRemove );
    HRESULT UpdateEntry (
        long Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadFileDependency * * pItem ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall get_Application (
        IDispatch * * pAppObj ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pVal ) = 0;
    virtual HRESULT __stdcall raw_CreateEntry (
        BSTR Feature,
        BSTR FullFileName,
        VARIANT_BOOL AffectsGraphics,
        VARIANT_BOOL noIncrement,
        long * Index ) = 0;
    virtual HRESULT __stdcall raw_IndexOf (
        BSTR Feature,
        BSTR FullFileName,
        long * Index ) = 0;
    virtual HRESULT __stdcall raw_RemoveEntry (
        long Index,
        VARIANT_BOOL forceRemove ) = 0;
    virtual HRESULT __stdcall raw_UpdateEntry (
        long Index ) = 0;
};

struct __declspec(uuid("136ebbf4-66f5-41e8-be4f-75bcb08a7401"))
IAcadFileDependency : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFullFileName))
    _bstr_t FullFileName;
    __declspec(property(get=GetFileName))
    _bstr_t FileName;
    __declspec(property(get=GetFoundPath))
    _bstr_t FoundPath;
    __declspec(property(get=GetFingerprintGuid))
    _bstr_t FingerprintGuid;
    __declspec(property(get=GetVersionGuid))
    _bstr_t VersionGuid;
    __declspec(property(get=GetFeature))
    _bstr_t Feature;
    __declspec(property(get=GetIsModified))
    VARIANT_BOOL IsModified;
    __declspec(property(get=GetAffectsGraphics))
    VARIANT_BOOL AffectsGraphics;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTimeStamp))
    long TimeStamp;
    __declspec(property(get=GetFileSize))
    long FileSize;
    __declspec(property(get=GetReferenceCount))
    long ReferenceCount;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFullFileName ( );
    _bstr_t GetFileName ( );
    _bstr_t GetFoundPath ( );
    _bstr_t GetFingerprintGuid ( );
    _bstr_t GetVersionGuid ( );
    _bstr_t GetFeature ( );
    VARIANT_BOOL GetIsModified ( );
    VARIANT_BOOL GetAffectsGraphics ( );
    long GetIndex ( );
    long GetTimeStamp ( );
    long GetFileSize ( );
    long GetReferenceCount ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_FullFileName (
        BSTR * FullFileName ) = 0;
    virtual HRESULT __stdcall get_FileName (
        BSTR * FileName ) = 0;
    virtual HRESULT __stdcall get_FoundPath (
        BSTR * FoundPath ) = 0;
    virtual HRESULT __stdcall get_FingerprintGuid (
        BSTR * FingerprintGuid ) = 0;
    virtual HRESULT __stdcall get_VersionGuid (
        BSTR * VersionGuid ) = 0;
    virtual HRESULT __stdcall get_Feature (
        BSTR * Feature ) = 0;
    virtual HRESULT __stdcall get_IsModified (
        VARIANT_BOOL * IsModified ) = 0;
    virtual HRESULT __stdcall get_AffectsGraphics (
        VARIANT_BOOL * AffectsGraphics ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * Index ) = 0;
    virtual HRESULT __stdcall get_TimeStamp (
        long * TimeStamp ) = 0;
    virtual HRESULT __stdcall get_FileSize (
        long * FileSize ) = 0;
    virtual HRESULT __stdcall get_ReferenceCount (
        long * refCount ) = 0;
};

struct __declspec(uuid("136ebbf5-66f5-41e8-be4f-75bcb08a7401"))
IAcadSummaryInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author;
    __declspec(property(get=GetComments,put=PutComments))
    _bstr_t Comments;
    __declspec(property(get=GetHyperlinkBase,put=PutHyperlinkBase))
    _bstr_t HyperlinkBase;
    __declspec(property(get=GetKeywords,put=PutKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetLastSavedBy,put=PutLastSavedBy))
    _bstr_t LastSavedBy;
    __declspec(property(get=GetRevisionNumber,put=PutRevisionNumber))
    _bstr_t RevisionNumber;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetAuthor ( );
    void PutAuthor (
        _bstr_t pAuthor );
    _bstr_t GetComments ( );
    void PutComments (
        _bstr_t pComments );
    _bstr_t GetHyperlinkBase ( );
    void PutHyperlinkBase (
        _bstr_t pHyperlinkBase );
    _bstr_t GetKeywords ( );
    void PutKeywords (
        _bstr_t pKeywords );
    _bstr_t GetLastSavedBy ( );
    void PutLastSavedBy (
        _bstr_t pLastSavedBy );
    _bstr_t GetRevisionNumber ( );
    void PutRevisionNumber (
        _bstr_t pRevisionNumber );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t pSubject );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t pTitle );
    int NumCustomInfo ( );
    HRESULT GetCustomByIndex (
        int Index,
        BSTR * pKey,
        BSTR * pValue );
    HRESULT GetCustomByKey (
        _bstr_t key,
        BSTR * pValue );
    HRESULT SetCustomByIndex (
        int Index,
        _bstr_t key,
        _bstr_t Value );
    HRESULT SetCustomByKey (
        _bstr_t key,
        _bstr_t Value );
    HRESULT AddCustomInfo (
        _bstr_t key,
        _bstr_t Value );
    HRESULT RemoveCustomByIndex (
        int Index );
    HRESULT RemoveCustomByKey (
        _bstr_t key );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Author (
        BSTR * pAuthor ) = 0;
    virtual HRESULT __stdcall put_Author (
        BSTR pAuthor ) = 0;
    virtual HRESULT __stdcall get_Comments (
        BSTR * pComments ) = 0;
    virtual HRESULT __stdcall put_Comments (
        BSTR pComments ) = 0;
    virtual HRESULT __stdcall get_HyperlinkBase (
        BSTR * pHyperlinkBase ) = 0;
    virtual HRESULT __stdcall put_HyperlinkBase (
        BSTR pHyperlinkBase ) = 0;
    virtual HRESULT __stdcall get_Keywords (
        BSTR * pKeywords ) = 0;
    virtual HRESULT __stdcall put_Keywords (
        BSTR pKeywords ) = 0;
    virtual HRESULT __stdcall get_LastSavedBy (
        BSTR * pLastSavedBy ) = 0;
    virtual HRESULT __stdcall put_LastSavedBy (
        BSTR pLastSavedBy ) = 0;
    virtual HRESULT __stdcall get_RevisionNumber (
        BSTR * pRevisionNumber ) = 0;
    virtual HRESULT __stdcall put_RevisionNumber (
        BSTR pRevisionNumber ) = 0;
    virtual HRESULT __stdcall get_Subject (
        BSTR * pSubject ) = 0;
    virtual HRESULT __stdcall put_Subject (
        BSTR pSubject ) = 0;
    virtual HRESULT __stdcall get_Title (
        BSTR * pTitle ) = 0;
    virtual HRESULT __stdcall put_Title (
        BSTR pTitle ) = 0;
    virtual HRESULT __stdcall raw_NumCustomInfo (
        int * Index ) = 0;
    virtual HRESULT __stdcall raw_GetCustomByIndex (
        int Index,
        BSTR * pKey,
        BSTR * pValue ) = 0;
    virtual HRESULT __stdcall raw_GetCustomByKey (
        BSTR key,
        BSTR * pValue ) = 0;
    virtual HRESULT __stdcall raw_SetCustomByIndex (
        int Index,
        BSTR key,
        BSTR Value ) = 0;
    virtual HRESULT __stdcall raw_SetCustomByKey (
        BSTR key,
        BSTR Value ) = 0;
    virtual HRESULT __stdcall raw_AddCustomInfo (
        BSTR key,
        BSTR Value ) = 0;
    virtual HRESULT __stdcall raw_RemoveCustomByIndex (
        int Index ) = 0;
    virtual HRESULT __stdcall raw_RemoveCustomByKey (
        BSTR key ) = 0;
};

struct __declspec(uuid("1855f960-0154-4256-9ff7-7650ff50538f"))
AcadHyperlink;
    // [ default ] interface IAcadHyperlink

struct __declspec(uuid("af2b061f-de61-421e-a4c7-9dcc77b001f4"))
AcadAcCmColor;
    // [ default ] interface IAcadAcCmColor

struct __declspec(uuid("848d9ee9-8e07-4699-9424-b8cd7a61af09"))
IAcadObjectEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Modified (
        struct IAcadObject * pObject );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Modified (
        struct IAcadObject * pObject ) = 0;
};

struct __declspec(uuid("979f9a0a-9738-40fc-a216-84bd6dd27a88"))
AcadObject;
    // [ default ] interface IAcadObject
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("07f4d811-c1f7-46fd-bd81-4a4b2cd58ce1"))
AcadXRecord;
    // [ default ] interface IAcadXRecord
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("6494bb2c-9e51-4e2d-9396-94be47a9f6dc"))
AcadDimStyle;
    // [ default ] interface IAcadDimStyle
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("79047464-b441-435b-80e8-21e0095cc741"))
AcadLayer;
    // [ default ] interface IAcadLayer
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("d7ec585a-02a5-45e7-8792-7f1a9175e7f8"))
AcadLineType;
    // [ default ] interface IAcadLineType
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("f6138459-f06f-4007-ab1e-9bc06f28e864"))
AcadRegisteredApplication;
    // [ default ] interface IAcadRegisteredApplication
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("d7f62684-30b2-4652-8460-c12fbc7e9d2e"))
AcadTextStyle;
    // [ default ] interface IAcadTextStyle
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("2e759bff-9723-408f-bbe0-6a798135b3cc"))
AcadUCS;
    // [ default ] interface IAcadUCS
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("526f2fb5-3c09-4ac7-b85f-bbf4af0c321a"))
AcadView;
    // [ default ] interface IAcadView
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("6c8c8217-60fa-43ee-a844-3ecc323bb16e"))
AcadViewport;
    // [ default ] interface IAcadViewport
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("ef4a5d29-39fa-49c6-b7d3-f2d2d0423245"))
AcadGroup;
    // [ default ] interface IAcadGroup
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("25e11127-a908-4f2e-b272-a43ecf73d652"))
AcadPlotConfiguration;
    // [ default ] interface IAcadPlotConfiguration
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("47b1a6d8-48f2-469a-b52e-6cfb87d01666"))
AcadLayout;
    // [ default ] interface IAcadLayout
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("3e41a603-2870-4e69-81fc-cc672a41dd5f"))
IAcadIdPair : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsCloned))
    VARIANT_BOOL IsCloned;
    __declspec(property(get=GetIsOwnerXlated))
    VARIANT_BOOL IsOwnerXlated;
    __declspec(property(get=GetIsPrimary))
    VARIANT_BOOL IsPrimary;
    __declspec(property(get=Getkey))
    long key;
    __declspec(property(get=GetValue))
    long Value;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsCloned ( );
    VARIANT_BOOL GetIsOwnerXlated ( );
    VARIANT_BOOL GetIsPrimary ( );
    long Getkey ( );
    long GetValue ( );
    IDispatchPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_IsCloned (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall get_IsOwnerXlated (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall get_IsPrimary (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall get_key (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_Value (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_Application (
        IDispatch * * ApplicationObject ) = 0;
};

struct __declspec(uuid("ffa27c46-6146-4bef-8b42-014e7fb7a893"))
AcadIdPair;
    // [ default ] interface IAcadIdPair

struct __declspec(uuid("f65301d2-6c8d-42a2-9e20-50e21cd5a223"))
AcadHyperlinks;
    // [ default ] interface IAcadHyperlinks

struct __declspec(uuid("b4245981-1737-491d-9ba1-88d628259f4f"))
AcadDictionary;
    // [ default ] interface IAcadDictionary
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("97e9824e-0aaf-4045-8003-7c58b0f13cd5"))
AcadLayers;
    // [ default ] interface IAcadLayers
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("9b706f88-2a5e-44f5-9a8e-2bbf75708823"))
AcadDimStyles;
    // [ default ] interface IAcadDimStyles
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("1a9c010f-29ce-4755-85a6-c11dd1fd1f2e"))
AcadDictionaries;
    // [ default ] interface IAcadDictionaries
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("65d10d07-1dea-461e-a828-003eed48a43d"))
AcadLineTypes;
    // [ default ] interface IAcadLineTypes
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("ece597dd-a801-4b74-8bfd-e21a31460f6a"))
AcadTextStyles;
    // [ default ] interface IAcadTextStyles
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("24f2614a-d524-44c8-8a51-57dc9d51a4f6"))
AcadUCSs;
    // [ default ] interface IAcadUCSs
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("ca665e1b-2acf-4984-b9b6-04965afebf0c"))
AcadRegisteredApplications;
    // [ default ] interface IAcadRegisteredApplications
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("f972dffb-179f-48a6-8b26-e04697991a92"))
AcadViews;
    // [ default ] interface IAcadViews
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("97b6dc06-b77f-498b-8647-918893dff6f9"))
AcadViewports;
    // [ default ] interface IAcadViewports
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("fe4228bb-8f46-41cb-bc39-6a2061a60ef2"))
AcadGroups;
    // [ default ] interface IAcadGroups
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("d8538a54-4bbd-42b8-8c5f-fac5ca7b4ca4"))
AcadBlocks;
    // [ default ] interface IAcadBlocks
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("7ecfdadd-4d10-4ee0-8b4b-e4441562b99d"))
AcadLayouts;
    // [ default ] interface IAcadLayouts
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("a117feb5-6122-4207-b02d-c6574dd30729"))
AcadPlotConfigurations;
    // [ default ] interface IAcadPlotConfigurations
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("ae1348d9-6bc1-4f2e-8903-7e894e0b7199"))
AcadEntity;
    // [ default ] interface IAcadEntity
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("a3ce677e-5566-4798-b7af-4f7ed56cc9f7"))
AcadRasterImage;
    // [ default ] interface IAcadRasterImage
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("cedd7570-f7b8-40d1-98c6-38b8d26ccfd6"))
Acad3DFace;
    // [ default ] interface IAcad3DFace
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("965f8aa1-215c-407c-a581-cfc64b073e4f"))
Acad3DPolyline;
    // [ default ] interface IAcad3DPolyline
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("4b72d1f6-14ec-4442-9bd6-badf80b009f3"))
AcadRegion;
    // [ default ] interface IAcadRegion
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("b17c17e0-382c-4a3f-8d27-bac759d66781"))
Acad3DSolid;
    // [ default ] interface IAcad3DSolid
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("1a6c7634-6585-45f1-b33a-2b21724d2238"))
AcadArc;
    // [ default ] interface IAcadArc
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("9505d6dc-6b3e-483c-ab22-67369ef30225"))
AcadAttribute;
    // [ default ] interface IAcadAttribute
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("c3141f04-f068-4788-9483-c40d28e9ab9f"))
IAcadAttributeReference : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum AcHorizontalAlignment HorizontalAlignment;
    __declspec(property(get=GetInsertionPoint,put=PutInsertionPoint))
    _variant_t InsertionPoint;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetObliqueAngle,put=PutObliqueAngle))
    ACAD_ANGLE ObliqueAngle;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    ACAD_NOUNITS ScaleFactor;
    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetTagString,put=PutTagString))
    _bstr_t TagString;
    __declspec(property(get=GetTextAlignmentPoint,put=PutTextAlignmentPoint))
    _variant_t TextAlignmentPoint;
    __declspec(property(get=GetTextGenerationFlag,put=PutTextGenerationFlag))
    long TextGenerationFlag;
    __declspec(property(get=GetTextString,put=PutTextString))
    _bstr_t TextString;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum AcVerticalAlignment VerticalAlignment;
    __declspec(property(get=GetFieldLength,put=PutFieldLength))
    long FieldLength;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum AcAlignment Alignment;
    __declspec(property(get=GetUpsideDown,put=PutUpsideDown))
    VARIANT_BOOL UpsideDown;
    __declspec(property(get=GetBackward,put=PutBackward))
    VARIANT_BOOL Backward;
    __declspec(property(get=GetInvisible,put=PutInvisible))
    VARIANT_BOOL Invisible;
    __declspec(property(get=GetConstant))
    VARIANT_BOOL Constant;

    //
    // Wrapper methods for error-handling
    //

    double GetHeight ( );
    void PutHeight (
        double Height );
    enum AcHorizontalAlignment GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum AcHorizontalAlignment horizAlign );
    _variant_t GetInsertionPoint ( );
    void PutInsertionPoint (
        const _variant_t & insPoint );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    ACAD_ANGLE GetObliqueAngle ( );
    void PutObliqueAngle (
        ACAD_ANGLE obliAngle );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rotAngle );
    ACAD_NOUNITS GetScaleFactor ( );
    void PutScaleFactor (
        ACAD_NOUNITS scalFactor );
    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t Name );
    _bstr_t GetTagString ( );
    void PutTagString (
        _bstr_t bstrTag );
    _variant_t GetTextAlignmentPoint ( );
    void PutTextAlignmentPoint (
        const _variant_t & alignPoint );
    long GetTextGenerationFlag ( );
    void PutTextGenerationFlag (
        long textGenFlag );
    _bstr_t GetTextString ( );
    void PutTextString (
        _bstr_t bstrText );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    enum AcVerticalAlignment GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum AcVerticalAlignment vertiAlign );
    long GetFieldLength ( );
    void PutFieldLength (
        long fieldLen );
    enum AcAlignment GetAlignment ( );
    void PutAlignment (
        enum AcAlignment align );
    VARIANT_BOOL GetUpsideDown ( );
    void PutUpsideDown (
        VARIANT_BOOL bUpsideDown );
    VARIANT_BOOL GetBackward ( );
    void PutBackward (
        VARIANT_BOOL bBackward );
    VARIANT_BOOL GetInvisible ( );
    void PutInvisible (
        VARIANT_BOOL bInvisible );
    VARIANT_BOOL GetConstant ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Height (
        double * Height ) = 0;
    virtual HRESULT __stdcall put_Height (
        double Height ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        enum AcHorizontalAlignment * horizAlign ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        enum AcHorizontalAlignment horizAlign ) = 0;
    virtual HRESULT __stdcall get_InsertionPoint (
        VARIANT * insPoint ) = 0;
    virtual HRESULT __stdcall put_InsertionPoint (
        VARIANT insPoint ) = 0;
    virtual HRESULT __stdcall get_Normal (
        VARIANT * Normal ) = 0;
    virtual HRESULT __stdcall put_Normal (
        VARIANT Normal ) = 0;
    virtual HRESULT __stdcall get_ObliqueAngle (
        ACAD_ANGLE * obliAngle ) = 0;
    virtual HRESULT __stdcall put_ObliqueAngle (
        ACAD_ANGLE obliAngle ) = 0;
    virtual HRESULT __stdcall get_Rotation (
        ACAD_ANGLE * rotAngle ) = 0;
    virtual HRESULT __stdcall put_Rotation (
        ACAD_ANGLE rotAngle ) = 0;
    virtual HRESULT __stdcall get_ScaleFactor (
        ACAD_NOUNITS * scalFactor ) = 0;
    virtual HRESULT __stdcall put_ScaleFactor (
        ACAD_NOUNITS scalFactor ) = 0;
    virtual HRESULT __stdcall get_StyleName (
        BSTR * Name ) = 0;
    virtual HRESULT __stdcall put_StyleName (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall get_TagString (
        BSTR * bstrTag ) = 0;
    virtual HRESULT __stdcall put_TagString (
        BSTR bstrTag ) = 0;
    virtual HRESULT __stdcall get_TextAlignmentPoint (
        VARIANT * alignPoint ) = 0;
    virtual HRESULT __stdcall put_TextAlignmentPoint (
        VARIANT alignPoint ) = 0;
    virtual HRESULT __stdcall get_TextGenerationFlag (
        long * textGenFlag ) = 0;
    virtual HRESULT __stdcall put_TextGenerationFlag (
        long textGenFlag ) = 0;
    virtual HRESULT __stdcall get_TextString (
        BSTR * bstrText ) = 0;
    virtual HRESULT __stdcall put_TextString (
        BSTR bstrText ) = 0;
    virtual HRESULT __stdcall get_Thickness (
        double * Thickness ) = 0;
    virtual HRESULT __stdcall put_Thickness (
        double Thickness ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        enum AcVerticalAlignment * vertiAlign ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        enum AcVerticalAlignment vertiAlign ) = 0;
    virtual HRESULT __stdcall get_FieldLength (
        long * fieldLen ) = 0;
    virtual HRESULT __stdcall put_FieldLength (
        long fieldLen ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        enum AcAlignment * align ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        enum AcAlignment align ) = 0;
    virtual HRESULT __stdcall get_UpsideDown (
        VARIANT_BOOL * bUpsideDown ) = 0;
    virtual HRESULT __stdcall put_UpsideDown (
        VARIANT_BOOL bUpsideDown ) = 0;
    virtual HRESULT __stdcall get_Backward (
        VARIANT_BOOL * bBackward ) = 0;
    virtual HRESULT __stdcall put_Backward (
        VARIANT_BOOL bBackward ) = 0;
    virtual HRESULT __stdcall get_Invisible (
        VARIANT_BOOL * bInvisible ) = 0;
    virtual HRESULT __stdcall put_Invisible (
        VARIANT_BOOL bInvisible ) = 0;
    virtual HRESULT __stdcall get_Constant (
        VARIANT_BOOL * bConstant ) = 0;
};

struct __declspec(uuid("6fa79072-cfb7-4745-8d27-c5bcc0ff37c7"))
AcadAttributeReference;
    // [ default ] interface IAcadAttributeReference
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("e4f2a54a-af3a-4366-ace0-f11f189d1a49"))
AcadBlockReference;
    // [ default ] interface IAcadBlockReference
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("6fa888e1-7d5a-4e6f-b06e-3434dd217d03"))
AcadCircle;
    // [ default ] interface IAcadCircle
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("96455e4d-80a8-400d-8d3a-3a7d92b54581"))
AcadEllipse;
    // [ default ] interface IAcadEllipse
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("a5935ba4-f591-413d-905c-66e2f2af0735"))
AcadHatch;
    // [ default ] interface IAcadHatch
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("7c66be02-eb10-4d63-ae3e-b47326ebc821"))
AcadLeader;
    // [ default ] interface IAcadLeader
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("174b3e36-396b-4c6c-860c-c063c136e5bf"))
AcadLWPolyline;
    // [ default ] interface IAcadLWPolyline
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("ad8d5eef-2d87-489f-be7c-10d9a9c23a3c"))
AcadLine;
    // [ default ] interface IAcadLine
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("8ba21fda-27b1-4877-b8cb-255266619ac1"))
AcadMText;
    // [ default ] interface IAcadMText
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("becfa513-0c01-458e-b468-657849849e33"))
AcadPoint;
    // [ default ] interface IAcadPoint
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("7a051850-9b71-492d-8b82-474c3a2b0570"))
AcadPolyline;
    // [ default ] interface IAcadPolyline
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("3c7f7161-53cd-4dfd-8a7e-dd3513c253db"))
AcadPolygonMesh;
    // [ default ] interface IAcadPolygonMesh
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("23c79e27-9a43-4a25-bf25-501888f37f26"))
AcadRay;
    // [ default ] interface IAcadRay
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("7f962213-845a-4e01-9cc7-8498df226400"))
AcadShape;
    // [ default ] interface IAcadShape
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("47c32803-2322-4b65-b546-cef4867a29a6"))
AcadSolid;
    // [ default ] interface IAcadSolid
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("3ff3d4a0-c89a-4c2b-9847-3db02bc22f33"))
AcadSpline;
    // [ default ] interface IAcadSpline
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("841c6ad6-6305-40ef-954a-4e640c441d9a"))
AcadText;
    // [ default ] interface IAcadText
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("47426477-bd24-47b4-8f79-4b739488b39d"))
AcadTolerance;
    // [ default ] interface IAcadTolerance
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("a610ac29-f739-4c2a-9400-70af488a3c23"))
AcadTrace;
    // [ default ] interface IAcadTrace
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("dab9a45b-39da-46d9-ade6-a2d49ddbe577"))
AcadXline;
    // [ default ] interface IAcadXline
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("cc54d9c4-cb60-46f3-9b0c-7b4565b26824"))
AcadPViewport;
    // [ default ] interface IAcadPViewport
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("375dd1e5-11c0-4606-80f9-fb9d8978e0b7"))
AcadMInsertBlock;
    // [ default ] interface IAcadMInsertBlock
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("e57b2e09-8b70-4c6b-b70f-06886aba4684"))
AcadPolyfaceMesh;
    // [ default ] interface IAcadPolyfaceMesh
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("785c0f04-2f05-476a-a523-3886591b5ad4"))
AcadMLine;
    // [ default ] interface IAcadMLine
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("7169f451-e1f5-4b29-b267-8a8a0e6435ce"))
AcadExternalReference;
    // [ default ] interface IAcadExternalReference
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("8b539c81-cb02-4e75-b09f-c9abb138246e"))
AcadDimension;
    // [ default ] interface IAcadDimension
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("160229b0-00ce-42f4-97cc-72eed76a12e5"))
AcadDimAligned;
    // [ default ] interface IAcadDimAligned
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("613df36a-190b-4a0a-a1ca-f91463379c6d"))
AcadDimAngular;
    // [ default ] interface IAcadDimAngular
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("86c923e2-046b-4681-9621-6fdef0eb4928"))
AcadDimDiametric;
    // [ default ] interface IAcadDimDiametric
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("7c39017a-0875-45d2-aee1-8ce5fa00a9bd"))
AcadDimOrdinate;
    // [ default ] interface IAcadDimOrdinate
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("184fdc14-2458-4e90-adb2-6b239826d217"))
AcadDimRadial;
    // [ default ] interface IAcadDimRadial
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("43f4168b-c1c3-43e0-bfe4-b703447e2aa2"))
AcadDimRotated;
    // [ default ] interface IAcadDimRotated
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("b89ccebe-5b33-4646-9cd2-d1dcfda16242"))
AcadDim3PointAngular;
    // [ default ] interface IAcadDim3PointAngular
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("ebf2737c-503c-417b-9157-be52bd858bff"))
AcadBlock;
    // [ default ] interface IAcadBlock
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("ecf0db32-1396-4402-8231-0b4fc1124537"))
AcadModelSpace;
    // [ default ] interface IAcadModelSpace
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("252c3ffd-5114-4d0c-bfa5-bbe62a740c0a"))
AcadPaperSpace;
    // [ default ] interface IAcadPaperSpace
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("bd41fc2a-1a19-47b2-a361-d64cd9833ad5"))
AcadFileDependency;
    // [ default ] interface IAcadFileDependency

struct __declspec(uuid("46f375e5-2d7e-4c5a-9438-222713012bdc"))
AcadFileDependencies;
    // [ default ] interface IAcadFileDependencies

struct __declspec(uuid("bd41fc2b-1a19-47b2-a361-d64cd9833ad5"))
AcadSummaryInfo;
    // [ default ] interface IAcadSummaryInfo

struct __declspec(uuid("c0f0ab90-05bf-4555-ae09-8ac5ec775309"))
AcadDatabasePreferences;
    // [ default ] interface IAcadDatabasePreferences

struct __declspec(uuid("3d0a034c-1028-4aa1-b2e7-99e52473c7d4"))
AcadDatabase;
    // [ default ] interface IAcadDatabase

enum AcadSecurityParamsType
{
    ACADSECURITYPARAMS_ENCRYPT_DATA = 1,
    ACADSECURITYPARAMS_ENCRYPT_PROPS = 2,
    ACADSECURITYPARAMS_SIGN_DATA = 16,
    ACADSECURITYPARAMS_ADD_TIMESTAMP = 32
};

enum AcadSecurityParamsConstants
{
    ACADSECURITYPARAMS_ALGID_RC4 = 26625
};

struct __declspec(uuid("6917ced6-6655-475c-b62f-370be1148408"))
IAcadSecurityParams : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAction,put=PutAction))
    long Action;
    __declspec(property(get=GetPassword,put=PutPassword))
    _bstr_t Password;
    __declspec(property(get=GetProviderType,put=PutProviderType))
    long ProviderType;
    __declspec(property(get=GetProviderName,put=PutProviderName))
    _bstr_t ProviderName;
    __declspec(property(get=GetAlgorithm,put=PutAlgorithm))
    long Algorithm;
    __declspec(property(get=GetKeyLength,put=PutKeyLength))
    long KeyLength;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetIssuer,put=PutIssuer))
    _bstr_t Issuer;
    __declspec(property(get=GetSerialNumber,put=PutSerialNumber))
    _bstr_t SerialNumber;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetTimeServer,put=PutTimeServer))
    _bstr_t TimeServer;

    //
    // Wrapper methods for error-handling
    //

    void PutAction (
        long pOperations );
    long GetAction ( );
    void PutPassword (
        _bstr_t pSecret );
    _bstr_t GetPassword ( );
    void PutProviderType (
        long pProvType );
    long GetProviderType ( );
    void PutProviderName (
        _bstr_t pProvName );
    _bstr_t GetProviderName ( );
    void PutAlgorithm (
        long pAlgId );
    long GetAlgorithm ( );
    void PutKeyLength (
        long pKeyLen );
    long GetKeyLength ( );
    void PutSubject (
        _bstr_t pCertSubject );
    _bstr_t GetSubject ( );
    void PutIssuer (
        _bstr_t pCertIssuer );
    _bstr_t GetIssuer ( );
    void PutSerialNumber (
        _bstr_t pSerialNum );
    _bstr_t GetSerialNumber ( );
    void PutComment (
        _bstr_t pText );
    _bstr_t GetComment ( );
    void PutTimeServer (
        _bstr_t pTimeServerName );
    _bstr_t GetTimeServer ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall put_Action (
        long pOperations ) = 0;
    virtual HRESULT __stdcall get_Action (
        long * pOperations ) = 0;
    virtual HRESULT __stdcall put_Password (
        BSTR pSecret ) = 0;
    virtual HRESULT __stdcall get_Password (
        BSTR * pSecret ) = 0;
    virtual HRESULT __stdcall put_ProviderType (
        long pProvType ) = 0;
    virtual HRESULT __stdcall get_ProviderType (
        long * pProvType ) = 0;
    virtual HRESULT __stdcall put_ProviderName (
        BSTR pProvName ) = 0;
    virtual HRESULT __stdcall get_ProviderName (
        BSTR * pProvName ) = 0;
    virtual HRESULT __stdcall put_Algorithm (
        long pAlgId ) = 0;
    virtual HRESULT __stdcall get_Algorithm (
        long * pAlgId ) = 0;
    virtual HRESULT __stdcall put_KeyLength (
        long pKeyLen ) = 0;
    virtual HRESULT __stdcall get_KeyLength (
        long * pKeyLen ) = 0;
    virtual HRESULT __stdcall put_Subject (
        BSTR pCertSubject ) = 0;
    virtual HRESULT __stdcall get_Subject (
        BSTR * pCertSubject ) = 0;
    virtual HRESULT __stdcall put_Issuer (
        BSTR pCertIssuer ) = 0;
    virtual HRESULT __stdcall get_Issuer (
        BSTR * pCertIssuer ) = 0;
    virtual HRESULT __stdcall put_SerialNumber (
        BSTR pSerialNum ) = 0;
    virtual HRESULT __stdcall get_SerialNumber (
        BSTR * pSerialNum ) = 0;
    virtual HRESULT __stdcall put_Comment (
        BSTR pText ) = 0;
    virtual HRESULT __stdcall get_Comment (
        BSTR * pText ) = 0;
    virtual HRESULT __stdcall put_TimeServer (
        BSTR pTimeServerName ) = 0;
    virtual HRESULT __stdcall get_TimeServer (
        BSTR * pTimeServerName ) = 0;
};

struct __declspec(uuid("e2cd2b06-5b97-41d9-aa27-18ac0f98505f"))
AcadSecurityParams;
    // [ default ] interface IAcadSecurityParams

struct __declspec(uuid("92999267-e45c-43ba-bab0-7c408bafadc2"))
IAcadLayerStateManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMask,put=PutMask))
    enum AcLayerStateMask Mask[];

    //
    // Wrapper methods for error-handling
    //

    HRESULT SetDatabase (
        struct IAcadDatabase * iHostDb );
    void PutMask (
        _bstr_t bsName,
        enum AcLayerStateMask eMask );
    enum AcLayerStateMask GetMask (
        _bstr_t bsName );
    HRESULT Save (
        _bstr_t bsName,
        enum AcLayerStateMask eMask );
    HRESULT Restore (
        _bstr_t bsName );
    HRESULT Delete (
        _bstr_t bsName );
    HRESULT Rename (
        _bstr_t bsName,
        _bstr_t bsNewName );
    HRESULT Import (
        _bstr_t bsFilename );
    HRESULT Export (
        _bstr_t bsName,
        _bstr_t bsFilename );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_SetDatabase (
        struct IAcadDatabase * iHostDb ) = 0;
    virtual HRESULT __stdcall put_Mask (
        BSTR bsName,
        enum AcLayerStateMask eMask ) = 0;
    virtual HRESULT __stdcall get_Mask (
        BSTR bsName,
        enum AcLayerStateMask * eMask ) = 0;
    virtual HRESULT __stdcall raw_Save (
        BSTR bsName,
        enum AcLayerStateMask eMask ) = 0;
    virtual HRESULT __stdcall raw_Restore (
        BSTR bsName ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        BSTR bsName ) = 0;
    virtual HRESULT __stdcall raw_Rename (
        BSTR bsName,
        BSTR bsNewName ) = 0;
    virtual HRESULT __stdcall raw_Import (
        BSTR bsFilename ) = 0;
    virtual HRESULT __stdcall raw_Export (
        BSTR bsName,
        BSTR bsFilename ) = 0;
};

struct __declspec(uuid("4eef602a-59c4-465b-b191-d0d18fc5669d"))
AcadLayerStateManager;
    // [ default ] interface IAcadLayerStateManager

struct __declspec(uuid("407ebc22-4028-49a9-8d57-7de9de984c1e"))
_DAcadApplicationEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT SysVarChanged (
        _bstr_t SysvarName,
        const _variant_t & newVal );
    HRESULT NewDrawing ( );
    HRESULT AppActivate ( );
    HRESULT AppDeactivate ( );
    HRESULT WindowMovedOrResized (
        long HWNDFrame,
        VARIANT_BOOL bMoved );
    HRESULT BeginModal ( );
    HRESULT EndModal ( );
    HRESULT BeginQuit (
        VARIANT_BOOL * Cancel );
    HRESULT BeginFileDrop (
        _bstr_t FileName,
        VARIANT_BOOL * Cancel );
    HRESULT ARXLoaded (
        _bstr_t AppName );
    HRESULT ARXUnloaded (
        _bstr_t AppName );
    HRESULT BeginPlot (
        _bstr_t DrawingName );
    HRESULT EndPlot (
        _bstr_t DrawingName );
    HRESULT BeginSave (
        _bstr_t FileName );
    HRESULT EndSave (
        _bstr_t FileName );
    HRESULT BeginOpen (
        BSTR * FileName );
    HRESULT EndOpen (
        _bstr_t FileName );
    HRESULT BeginCommand (
        _bstr_t CommandName );
    HRESULT EndCommand (
        _bstr_t CommandName );
    HRESULT BeginLisp (
        _bstr_t FirstLine );
    HRESULT EndLisp ( );
    HRESULT LispCancelled ( );
    HRESULT WindowChanged (
        enum AcWindowState WindowState );
};

struct __declspec(uuid("3c391d99-2886-4e1a-9855-ee30c9fc5b8a"))
IAcadDocument : IAcadDatabase
{
    //
    // Property data
    //

    __declspec(property(get=GetPickfirstSelectionSet))
    IAcadSelectionSetPtr PickfirstSelectionSet;
    __declspec(property(get=GetActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum AcWindowState WindowState;
    __declspec(property(get=GetWidth,put=PutWidth))
    int Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    int Height;
    __declspec(property(get=GetActiveLayout,put=PutActiveLayout))
    IAcadLayoutPtr ActiveLayout;
    __declspec(property(get=GetHWND))
    long HWND;
    __declspec(property(get=GetWindowTitle))
    _bstr_t WindowTitle;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetPlot))
    IAcadPlotPtr Plot;
    __declspec(property(get=GetActiveLayer,put=PutActiveLayer))
    IAcadLayerPtr ActiveLayer;
    __declspec(property(get=GetActiveLinetype,put=PutActiveLinetype))
    IAcadLineTypePtr ActiveLinetype;
    __declspec(property(get=GetActiveDimStyle,put=PutActiveDimStyle))
    IAcadDimStylePtr ActiveDimStyle;
    __declspec(property(get=GetActiveTextStyle,put=PutActiveTextStyle))
    IAcadTextStylePtr ActiveTextStyle;
    __declspec(property(get=GetActiveUCS,put=PutActiveUCS))
    IAcadUCSPtr ActiveUCS;
    __declspec(property(get=GetActiveViewport,put=PutActiveViewport))
    IAcadViewportPtr ActiveViewport;
    __declspec(property(get=GetActivePViewport,put=PutActivePViewport))
    IAcadPViewportPtr ActivePViewport;
    __declspec(property(get=GetActiveSpace,put=PutActiveSpace))
    enum AcActiveSpace ActiveSpace;
    __declspec(property(get=GetSelectionSets))
    IAcadSelectionSetsPtr SelectionSets;
    __declspec(property(get=GetActiveSelectionSet))
    IAcadSelectionSetPtr ActiveSelectionSet;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetObjectSnapMode,put=PutObjectSnapMode))
    VARIANT_BOOL ObjectSnapMode;
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetSaved))
    VARIANT_BOOL Saved;
    __declspec(property(get=GetMSpace,put=PutMSpace))
    VARIANT_BOOL MSpace;
    __declspec(property(get=GetUtility))
    IAcadUtilityPtr Utility;
    __declspec(property(get=GetDatabase))
    IAcadDatabasePtr Database;

    //
    // Wrapper methods for error-handling
    //

    IAcadPlotPtr GetPlot ( );
    IAcadLayerPtr GetActiveLayer ( );
    void PutActiveLayer (
        struct IAcadLayer * pActLayer );
    IAcadLineTypePtr GetActiveLinetype ( );
    void PutActiveLinetype (
        struct IAcadLineType * pActLinetype );
    IAcadDimStylePtr GetActiveDimStyle ( );
    void PutActiveDimStyle (
        struct IAcadDimStyle * pActDimStyle );
    IAcadTextStylePtr GetActiveTextStyle ( );
    void PutActiveTextStyle (
        struct IAcadTextStyle * pActTextStyle );
    IAcadUCSPtr GetActiveUCS ( );
    void PutActiveUCS (
        struct IAcadUCS * pActUCS );
    IAcadViewportPtr GetActiveViewport ( );
    void PutActiveViewport (
        struct IAcadViewport * pActView );
    IAcadPViewportPtr GetActivePViewport ( );
    void PutActivePViewport (
        struct IAcadPViewport * pActView );
    enum AcActiveSpace GetActiveSpace ( );
    void PutActiveSpace (
        enum AcActiveSpace ActSpace );
    IAcadSelectionSetsPtr GetSelectionSets ( );
    IAcadSelectionSetPtr GetActiveSelectionSet ( );
    _bstr_t GetFullName ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetObjectSnapMode ( );
    void PutObjectSnapMode (
        VARIANT_BOOL fSnapMode );
    VARIANT_BOOL GetReadOnly ( );
    VARIANT_BOOL GetSaved ( );
    VARIANT_BOOL GetMSpace ( );
    void PutMSpace (
        VARIANT_BOOL Mode );
    IAcadUtilityPtr GetUtility ( );
    IAcadDocumentPtr Open (
        _bstr_t FullName,
        const _variant_t & Password = vtMissing );
    HRESULT AuditInfo (
        VARIANT_BOOL FixErr );
    IDispatchPtr Import (
        _bstr_t FileName,
        const _variant_t & InsertionPoint,
        double ScaleFactor );
    HRESULT Export (
        _bstr_t FileName,
        _bstr_t Extension,
        struct IAcadSelectionSet * SelectionSet );
    IAcadDocumentPtr New (
        _bstr_t TemplateFileName );
    HRESULT Save ( );
    HRESULT SaveAs (
        _bstr_t FullFileName,
        const _variant_t & SaveAsType = vtMissing,
        const _variant_t & vSecurityParams = vtMissing );
    HRESULT Wblock (
        _bstr_t FileName,
        struct IAcadSelectionSet * SelectionSet );
    HRESULT PurgeAll ( );
    _variant_t GetVariable (
        _bstr_t Name );
    HRESULT SetVariable (
        _bstr_t Name,
        const _variant_t & Value );
    HRESULT LoadShapeFile (
        _bstr_t FullName );
    HRESULT Regen (
        enum AcRegenType WhichViewports );
    IAcadSelectionSetPtr GetPickfirstSelectionSet ( );
    VARIANT_BOOL GetActive ( );
    HRESULT Activate ( );
    HRESULT Close (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & FileName = vtMissing );
    void PutWindowState (
        enum AcWindowState pWinState );
    enum AcWindowState GetWindowState ( );
    void PutWidth (
        int pWidth );
    int GetWidth ( );
    void PutHeight (
        int pHeight );
    int GetHeight ( );
    void PutActiveLayout (
        struct IAcadLayout * pLayout );
    IAcadLayoutPtr GetActiveLayout ( );
    HRESULT SendCommand (
        _bstr_t Command );
    long GetHWND ( );
    _bstr_t GetWindowTitle ( );
    IAcadApplicationPtr GetApplication ( );
    IAcadDatabasePtr GetDatabase ( );
    HRESULT StartUndoMark ( );
    HRESULT EndUndoMark ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Plot (
        struct IAcadPlot * * pPlot ) = 0;
    virtual HRESULT __stdcall get_ActiveLayer (
        struct IAcadLayer * * pActLayer ) = 0;
    virtual HRESULT __stdcall put_ActiveLayer (
        struct IAcadLayer * pActLayer ) = 0;
    virtual HRESULT __stdcall get_ActiveLinetype (
        struct IAcadLineType * * pActLinetype ) = 0;
    virtual HRESULT __stdcall put_ActiveLinetype (
        struct IAcadLineType * pActLinetype ) = 0;
    virtual HRESULT __stdcall get_ActiveDimStyle (
        struct IAcadDimStyle * * pActDimStyle ) = 0;
    virtual HRESULT __stdcall put_ActiveDimStyle (
        struct IAcadDimStyle * pActDimStyle ) = 0;
    virtual HRESULT __stdcall get_ActiveTextStyle (
        struct IAcadTextStyle * * pActTextStyle ) = 0;
    virtual HRESULT __stdcall put_ActiveTextStyle (
        struct IAcadTextStyle * pActTextStyle ) = 0;
    virtual HRESULT __stdcall get_ActiveUCS (
        struct IAcadUCS * * pActUCS ) = 0;
    virtual HRESULT __stdcall put_ActiveUCS (
        struct IAcadUCS * pActUCS ) = 0;
    virtual HRESULT __stdcall get_ActiveViewport (
        struct IAcadViewport * * pActView ) = 0;
    virtual HRESULT __stdcall put_ActiveViewport (
        struct IAcadViewport * pActView ) = 0;
    virtual HRESULT __stdcall get_ActivePViewport (
        struct IAcadPViewport * * pActView ) = 0;
    virtual HRESULT __stdcall put_ActivePViewport (
        struct IAcadPViewport * pActView ) = 0;
    virtual HRESULT __stdcall get_ActiveSpace (
        enum AcActiveSpace * ActSpace ) = 0;
    virtual HRESULT __stdcall put_ActiveSpace (
        enum AcActiveSpace ActSpace ) = 0;
    virtual HRESULT __stdcall get_SelectionSets (
        struct IAcadSelectionSets * * pSelSets ) = 0;
    virtual HRESULT __stdcall get_ActiveSelectionSet (
        struct IAcadSelectionSet * * pSelSet ) = 0;
    virtual HRESULT __stdcall get_FullName (
        BSTR * FullName ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * Name ) = 0;
    virtual HRESULT __stdcall get_Path (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall get_ObjectSnapMode (
        VARIANT_BOOL * fSnapMode ) = 0;
    virtual HRESULT __stdcall put_ObjectSnapMode (
        VARIANT_BOOL fSnapMode ) = 0;
    virtual HRESULT __stdcall get_ReadOnly (
        VARIANT_BOOL * bReadOnly ) = 0;
    virtual HRESULT __stdcall get_Saved (
        VARIANT_BOOL * bSaved ) = 0;
    virtual HRESULT __stdcall get_MSpace (
        VARIANT_BOOL * Mode ) = 0;
    virtual HRESULT __stdcall put_MSpace (
        VARIANT_BOOL Mode ) = 0;
    virtual HRESULT __stdcall get_Utility (
        struct IAcadUtility * * pUtil ) = 0;
    virtual HRESULT __stdcall raw_Open (
        BSTR FullName,
        VARIANT Password,
        struct IAcadDocument * * pDocObj ) = 0;
    virtual HRESULT __stdcall raw_AuditInfo (
        VARIANT_BOOL FixErr ) = 0;
    virtual HRESULT __stdcall raw_Import (
        BSTR FileName,
        VARIANT InsertionPoint,
        double ScaleFactor,
        IDispatch * * pObj ) = 0;
    virtual HRESULT __stdcall raw_Export (
        BSTR FileName,
        BSTR Extension,
        struct IAcadSelectionSet * SelectionSet ) = 0;
    virtual HRESULT __stdcall raw_New (
        BSTR TemplateFileName,
        struct IAcadDocument * * pDocObj ) = 0;
    virtual HRESULT __stdcall raw_Save ( ) = 0;
    virtual HRESULT __stdcall raw_SaveAs (
        BSTR FullFileName,
        VARIANT SaveAsType = vtMissing,
        VARIANT vSecurityParams = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Wblock (
        BSTR FileName,
        struct IAcadSelectionSet * SelectionSet ) = 0;
    virtual HRESULT __stdcall raw_PurgeAll ( ) = 0;
    virtual HRESULT __stdcall raw_GetVariable (
        BSTR Name,
        VARIANT * Value ) = 0;
    virtual HRESULT __stdcall raw_SetVariable (
        BSTR Name,
        VARIANT Value ) = 0;
    virtual HRESULT __stdcall raw_LoadShapeFile (
        BSTR FullName ) = 0;
    virtual HRESULT __stdcall raw_Regen (
        enum AcRegenType WhichViewports ) = 0;
    virtual HRESULT __stdcall get_PickfirstSelectionSet (
        struct IAcadSelectionSet * * pSelSet ) = 0;
    virtual HRESULT __stdcall get_Active (
        VARIANT_BOOL * pvbActive ) = 0;
    virtual HRESULT __stdcall raw_Activate ( ) = 0;
    virtual HRESULT __stdcall raw_Close (
        VARIANT SaveChanges = vtMissing,
        VARIANT FileName = vtMissing ) = 0;
    virtual HRESULT __stdcall put_WindowState (
        enum AcWindowState pWinState ) = 0;
    virtual HRESULT __stdcall get_WindowState (
        enum AcWindowState * pWinState ) = 0;
    virtual HRESULT __stdcall put_Width (
        int pWidth ) = 0;
    virtual HRESULT __stdcall get_Width (
        int * pWidth ) = 0;
    virtual HRESULT __stdcall put_Height (
        int pHeight ) = 0;
    virtual HRESULT __stdcall get_Height (
        int * pHeight ) = 0;
    virtual HRESULT __stdcall put_ActiveLayout (
        struct IAcadLayout * pLayout ) = 0;
    virtual HRESULT __stdcall get_ActiveLayout (
        struct IAcadLayout * * pLayout ) = 0;
    virtual HRESULT __stdcall raw_SendCommand (
        BSTR Command ) = 0;
    virtual HRESULT __stdcall get_HWND (
        long * HWND ) = 0;
    virtual HRESULT __stdcall get_WindowTitle (
        BSTR * Title ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall get_Database (
        struct IAcadDatabase * * pDatabase ) = 0;
    virtual HRESULT __stdcall raw_StartUndoMark ( ) = 0;
    virtual HRESULT __stdcall raw_EndUndoMark ( ) = 0;
};

struct __declspec(uuid("2fddab78-0943-4450-8ff9-92a2c9daf8f2"))
IAcadPlot : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetQuietErrorMode,put=PutQuietErrorMode))
    VARIANT_BOOL QuietErrorMode;
    __declspec(property(get=GetNumberOfCopies,put=PutNumberOfCopies))
    long NumberOfCopies;
    __declspec(property(get=GetBatchPlotProgress,put=PutBatchPlotProgress))
    VARIANT_BOOL BatchPlotProgress;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    VARIANT_BOOL GetQuietErrorMode ( );
    void PutQuietErrorMode (
        VARIANT_BOOL bErrorMode );
    long GetNumberOfCopies ( );
    void PutNumberOfCopies (
        long numCopies );
    VARIANT_BOOL GetBatchPlotProgress ( );
    void PutBatchPlotProgress (
        VARIANT_BOOL bProgressStatus );
    HRESULT DisplayPlotPreview (
        enum AcPreviewMode Preview );
    VARIANT_BOOL PlotToFile (
        _bstr_t plotFile,
        const _variant_t & plotConfig = vtMissing );
    VARIANT_BOOL PlotToDevice (
        const _variant_t & plotConfig = vtMissing );
    HRESULT SetLayoutsToPlot (
        const _variant_t & layoutList );
    HRESULT StartBatchMode (
        long entryCount );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall get_QuietErrorMode (
        VARIANT_BOOL * bErrorMode ) = 0;
    virtual HRESULT __stdcall put_QuietErrorMode (
        VARIANT_BOOL bErrorMode ) = 0;
    virtual HRESULT __stdcall get_NumberOfCopies (
        long * numCopies ) = 0;
    virtual HRESULT __stdcall put_NumberOfCopies (
        long numCopies ) = 0;
    virtual HRESULT __stdcall get_BatchPlotProgress (
        VARIANT_BOOL * bProgressStatus ) = 0;
    virtual HRESULT __stdcall put_BatchPlotProgress (
        VARIANT_BOOL bProgressStatus ) = 0;
    virtual HRESULT __stdcall raw_DisplayPlotPreview (
        enum AcPreviewMode Preview ) = 0;
    virtual HRESULT __stdcall raw_PlotToFile (
        BSTR plotFile,
        VARIANT plotConfig,
        VARIANT_BOOL * success ) = 0;
    virtual HRESULT __stdcall raw_PlotToDevice (
        VARIANT plotConfig,
        VARIANT_BOOL * success ) = 0;
    virtual HRESULT __stdcall raw_SetLayoutsToPlot (
        VARIANT layoutList ) = 0;
    virtual HRESULT __stdcall raw_StartBatchMode (
        long entryCount ) = 0;
};

struct __declspec(uuid("93bc4e71-afe7-4aa7-bc07-f80acdb672d5"))
IAcadApplication : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDocuments))
    IAcadDocumentsPtr Documents;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetActiveDocument,put=PutActiveDocument))
    IAcadDocumentPtr ActiveDocument;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetHeight,put=PutHeight))
    int Height;
    __declspec(property(get=GetWindowLeft,put=PutWindowLeft))
    int WindowLeft;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetLocaleId))
    long LocaleId;
    __declspec(property(get=GetWindowTop,put=PutWindowTop))
    int WindowTop;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetWidth,put=PutWidth))
    int Width;
    __declspec(property(get=GetPreferences))
    IAcadPreferencesPtr Preferences;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum AcWindowState WindowState;
    __declspec(property(get=GetHWND))
    long HWND;
    __declspec(property(get=GetStatusId))
    VARIANT_BOOL StatusId[];
    __declspec(property(get=GetVBE))
    IDispatchPtr VBE;
    __declspec(property(get=GetMenuGroups))
    IAcadMenuGroupsPtr MenuGroups;
    __declspec(property(get=GetMenuBar))
    IAcadMenuBarPtr MenuBar;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    _bstr_t GetName ( );
    _bstr_t GetCaption ( );
    IAcadApplicationPtr GetApplication ( );
    IAcadDocumentPtr GetActiveDocument ( );
    void PutActiveDocument (
        struct IAcadDocument * pActiveDoc );
    _bstr_t GetFullName ( );
    int GetHeight ( );
    void PutHeight (
        int Height );
    int GetWindowLeft ( );
    void PutWindowLeft (
        int left );
    _bstr_t GetPath ( );
    long GetLocaleId ( );
    int GetWindowTop ( );
    void PutWindowTop (
        int top );
    _bstr_t GetVersion ( );
    int GetWidth ( );
    void PutWidth (
        int Width );
    IAcadPreferencesPtr GetPreferences ( );
    VARIANT_BOOL GetStatusId (
        IDispatch * VportObj );
    _variant_t ListArx ( );
    HRESULT LoadArx (
        _bstr_t Name );
    IDispatchPtr GetInterfaceObject (
        _bstr_t ProgID );
    HRESULT UnloadArx (
        _bstr_t Name );
    HRESULT Update ( );
    HRESULT Quit ( );
    HRESULT Zoom (
        int Type,
        VARIANT * vParams );
    IDispatchPtr GetVBE ( );
    IAcadMenuGroupsPtr GetMenuGroups ( );
    IAcadMenuBarPtr GetMenuBar ( );
    HRESULT LoadDVB (
        _bstr_t Name );
    HRESULT UnloadDVB (
        _bstr_t Name );
    IAcadDocumentsPtr GetDocuments ( );
    HRESULT Eval (
        _bstr_t Expression );
    enum AcWindowState GetWindowState ( );
    void PutWindowState (
        enum AcWindowState eWinState );
    HRESULT RunMacro (
        _bstr_t MacroPath );
    HRESULT ZoomExtents ( );
    HRESULT ZoomAll ( );
    HRESULT ZoomCenter (
        const _variant_t & Center,
        double Magnify );
    HRESULT ZoomScaled (
        double scale,
        enum AcZoomScaleType ScaleType );
    HRESULT ZoomWindow (
        const _variant_t & LowerLeft,
        const _variant_t & UpperRight );
    HRESULT ZoomPickWindow ( );
    IAcadStatePtr GetAcadState ( );
    HRESULT ZoomPrevious ( );
    long GetHWND ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * Visible ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL Visible ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * pAppName ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * bstrCaption ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall get_ActiveDocument (
        struct IAcadDocument * * pActiveDoc ) = 0;
    virtual HRESULT __stdcall put_ActiveDocument (
        struct IAcadDocument * pActiveDoc ) = 0;
    virtual HRESULT __stdcall get_FullName (
        BSTR * FullName ) = 0;
    virtual HRESULT __stdcall get_Height (
        int * Height ) = 0;
    virtual HRESULT __stdcall put_Height (
        int Height ) = 0;
    virtual HRESULT __stdcall get_WindowLeft (
        int * left ) = 0;
    virtual HRESULT __stdcall put_WindowLeft (
        int left ) = 0;
    virtual HRESULT __stdcall get_Path (
        BSTR * bstrPath ) = 0;
    virtual HRESULT __stdcall get_LocaleId (
        long * lcid ) = 0;
    virtual HRESULT __stdcall get_WindowTop (
        int * top ) = 0;
    virtual HRESULT __stdcall put_WindowTop (
        int top ) = 0;
    virtual HRESULT __stdcall get_Version (
        BSTR * bstrVer ) = 0;
    virtual HRESULT __stdcall get_Width (
        int * Width ) = 0;
    virtual HRESULT __stdcall put_Width (
        int Width ) = 0;
    virtual HRESULT __stdcall get_Preferences (
        struct IAcadPreferences * * pPreferences ) = 0;
    virtual HRESULT __stdcall get_StatusId (
        IDispatch * VportObj,
        VARIANT_BOOL * bStatus ) = 0;
    virtual HRESULT __stdcall raw_ListArx (
        VARIANT * pVarListArray ) = 0;
    virtual HRESULT __stdcall raw_LoadArx (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall raw_GetInterfaceObject (
        BSTR ProgID,
        IDispatch * * pObj ) = 0;
    virtual HRESULT __stdcall raw_UnloadArx (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall raw_Update ( ) = 0;
    virtual HRESULT __stdcall raw_Quit ( ) = 0;
    virtual HRESULT __stdcall raw_Zoom (
        int Type,
        VARIANT * vParams ) = 0;
    virtual HRESULT __stdcall get_VBE (
        IDispatch * * pDispVBE ) = 0;
    virtual HRESULT __stdcall get_MenuGroups (
        struct IAcadMenuGroups * * pMenuGroups ) = 0;
    virtual HRESULT __stdcall get_MenuBar (
        struct IAcadMenuBar * * pMenuBar ) = 0;
    virtual HRESULT __stdcall raw_LoadDVB (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall raw_UnloadDVB (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall get_Documents (
        struct IAcadDocuments * * pDocuments ) = 0;
    virtual HRESULT __stdcall raw_Eval (
        BSTR Expression ) = 0;
    virtual HRESULT __stdcall get_WindowState (
        enum AcWindowState * eWinState ) = 0;
    virtual HRESULT __stdcall put_WindowState (
        enum AcWindowState eWinState ) = 0;
    virtual HRESULT __stdcall raw_RunMacro (
        BSTR MacroPath ) = 0;
    virtual HRESULT __stdcall raw_ZoomExtents ( ) = 0;
    virtual HRESULT __stdcall raw_ZoomAll ( ) = 0;
    virtual HRESULT __stdcall raw_ZoomCenter (
        VARIANT Center,
        double Magnify ) = 0;
    virtual HRESULT __stdcall raw_ZoomScaled (
        double scale,
        enum AcZoomScaleType ScaleType ) = 0;
    virtual HRESULT __stdcall raw_ZoomWindow (
        VARIANT LowerLeft,
        VARIANT UpperRight ) = 0;
    virtual HRESULT __stdcall raw_ZoomPickWindow ( ) = 0;
    virtual HRESULT __stdcall raw_GetAcadState (
        struct IAcadState * * pVal ) = 0;
    virtual HRESULT __stdcall raw_ZoomPrevious ( ) = 0;
    virtual HRESULT __stdcall get_HWND (
        long * HWND ) = 0;
};

struct __declspec(uuid("498902dc-f5f2-4d4c-948c-d19b645f0c7f"))
IAcadPreferences : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetFiles))
    IAcadPreferencesFilesPtr Files;
    __declspec(property(get=GetDisplay))
    IAcadPreferencesDisplayPtr Display;
    __declspec(property(get=GetOpenSave))
    IAcadPreferencesOpenSavePtr OpenSave;
    __declspec(property(get=GetOutput))
    IAcadPreferencesOutputPtr Output;
    __declspec(property(get=GetSystem))
    IAcadPreferencesSystemPtr System;
    __declspec(property(get=GetUser))
    IAcadPreferencesUserPtr User;
    __declspec(property(get=GetDrafting))
    IAcadPreferencesDraftingPtr Drafting;
    __declspec(property(get=GetSelection))
    IAcadPreferencesSelectionPtr Selection;
    __declspec(property(get=GetProfiles))
    IAcadPreferencesProfilesPtr Profiles;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    IAcadPreferencesFilesPtr GetFiles ( );
    IAcadPreferencesDisplayPtr GetDisplay ( );
    IAcadPreferencesOpenSavePtr GetOpenSave ( );
    IAcadPreferencesOutputPtr GetOutput ( );
    IAcadPreferencesSystemPtr GetSystem ( );
    IAcadPreferencesUserPtr GetUser ( );
    IAcadPreferencesDraftingPtr GetDrafting ( );
    IAcadPreferencesSelectionPtr GetSelection ( );
    IAcadPreferencesProfilesPtr GetProfiles ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall get_Files (
        struct IAcadPreferencesFiles * * pObj ) = 0;
    virtual HRESULT __stdcall get_Display (
        struct IAcadPreferencesDisplay * * pObj ) = 0;
    virtual HRESULT __stdcall get_OpenSave (
        struct IAcadPreferencesOpenSave * * pObj ) = 0;
    virtual HRESULT __stdcall get_Output (
        struct IAcadPreferencesOutput * * pObj ) = 0;
    virtual HRESULT __stdcall get_System (
        struct IAcadPreferencesSystem * * pObj ) = 0;
    virtual HRESULT __stdcall get_User (
        struct IAcadPreferencesUser * * pObj ) = 0;
    virtual HRESULT __stdcall get_Drafting (
        struct IAcadPreferencesDrafting * * pObj ) = 0;
    virtual HRESULT __stdcall get_Selection (
        struct IAcadPreferencesSelection * * pObj ) = 0;
    virtual HRESULT __stdcall get_Profiles (
        struct IAcadPreferencesProfiles * * pObj ) = 0;
};

struct __declspec(uuid("2443685e-ed1d-4753-aa91-963cb86ae095"))
IAcadPreferencesFiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetSupportPath,put=PutSupportPath))
    _bstr_t SupportPath;
    __declspec(property(get=GetDriversPath,put=PutDriversPath))
    _bstr_t DriversPath;
    __declspec(property(get=GetMenuFile,put=PutMenuFile))
    _bstr_t MenuFile;
    __declspec(property(get=GetHelpFilePath,put=PutHelpFilePath))
    _bstr_t HelpFilePath;
    __declspec(property(get=GetDefaultInternetURL,put=PutDefaultInternetURL))
    _bstr_t DefaultInternetURL;
    __declspec(property(get=GetConfigFile))
    _bstr_t ConfigFile;
    __declspec(property(get=GetLicenseServer))
    _bstr_t LicenseServer;
    __declspec(property(get=GetTextEditor,put=PutTextEditor))
    _bstr_t TextEditor;
    __declspec(property(get=GetMainDictionary,put=PutMainDictionary))
    _bstr_t MainDictionary;
    __declspec(property(get=GetCustomDictionary,put=PutCustomDictionary))
    _bstr_t CustomDictionary;
    __declspec(property(get=GetAltFontFile,put=PutAltFontFile))
    _bstr_t AltFontFile;
    __declspec(property(get=GetFontFileMap,put=PutFontFileMap))
    _bstr_t FontFileMap;
    __declspec(property(get=GetPrintFile,put=PutPrintFile))
    _bstr_t PrintFile;
    __declspec(property(get=GetPrintSpoolExecutable,put=PutPrintSpoolExecutable))
    _bstr_t PrintSpoolExecutable;
    __declspec(property(get=GetPostScriptPrologFile,put=PutPostScriptPrologFile))
    _bstr_t PostScriptPrologFile;
    __declspec(property(get=GetPrintSpoolerPath,put=PutPrintSpoolerPath))
    _bstr_t PrintSpoolerPath;
    __declspec(property(get=GetAutoSavePath,put=PutAutoSavePath))
    _bstr_t AutoSavePath;
    __declspec(property(get=GetTemplateDwgPath,put=PutTemplateDwgPath))
    _bstr_t TemplateDwgPath;
    __declspec(property(get=GetLogFilePath,put=PutLogFilePath))
    _bstr_t LogFilePath;
    __declspec(property(get=GetTempFilePath,put=PutTempFilePath))
    _bstr_t TempFilePath;
    __declspec(property(get=GetTempXrefPath,put=PutTempXrefPath))
    _bstr_t TempXrefPath;
    __declspec(property(get=GetTextureMapPath,put=PutTextureMapPath))
    _bstr_t TextureMapPath;
    __declspec(property(get=GetAltTabletMenuFile,put=PutAltTabletMenuFile))
    _bstr_t AltTabletMenuFile;
    __declspec(property(get=GetPrinterConfigPath,put=PutPrinterConfigPath))
    _bstr_t PrinterConfigPath;
    __declspec(property(get=GetPrinterDescPath,put=PutPrinterDescPath))
    _bstr_t PrinterDescPath;
    __declspec(property(get=GetPrinterStyleSheetPath,put=PutPrinterStyleSheetPath))
    _bstr_t PrinterStyleSheetPath;
    __declspec(property(get=GetWorkspacePath,put=PutWorkspacePath))
    _bstr_t WorkspacePath;
    __declspec(property(get=GetObjectARXPath,put=PutObjectARXPath))
    _bstr_t ObjectARXPath;
    __declspec(property(get=GetColorBookPath,put=PutColorBookPath))
    _bstr_t ColorBookPath;
    __declspec(property(get=GetToolPalettePath,put=PutToolPalettePath))
    _bstr_t ToolPalettePath;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    void PutSupportPath (
        _bstr_t orient );
    _bstr_t GetSupportPath ( );
    void PutDriversPath (
        _bstr_t Path );
    _bstr_t GetDriversPath ( );
    void PutMenuFile (
        _bstr_t Path );
    _bstr_t GetMenuFile ( );
    void PutHelpFilePath (
        _bstr_t Path );
    _bstr_t GetHelpFilePath ( );
    void PutDefaultInternetURL (
        _bstr_t Path );
    _bstr_t GetDefaultInternetURL ( );
    _bstr_t GetConfigFile ( );
    _bstr_t GetLicenseServer ( );
    void PutTextEditor (
        _bstr_t Path );
    _bstr_t GetTextEditor ( );
    void PutMainDictionary (
        _bstr_t Path );
    _bstr_t GetMainDictionary ( );
    void PutCustomDictionary (
        _bstr_t Path );
    _bstr_t GetCustomDictionary ( );
    void PutAltFontFile (
        _bstr_t fontFile );
    _bstr_t GetAltFontFile ( );
    void PutFontFileMap (
        _bstr_t Path );
    _bstr_t GetFontFileMap ( );
    void PutPrintFile (
        _bstr_t Path );
    _bstr_t GetPrintFile ( );
    void PutPrintSpoolExecutable (
        _bstr_t Path );
    _bstr_t GetPrintSpoolExecutable ( );
    void PutPostScriptPrologFile (
        _bstr_t Path );
    _bstr_t GetPostScriptPrologFile ( );
    void PutPrintSpoolerPath (
        _bstr_t Path );
    _bstr_t GetPrintSpoolerPath ( );
    void PutAutoSavePath (
        _bstr_t AutoSavePath );
    _bstr_t GetAutoSavePath ( );
    void PutTemplateDwgPath (
        _bstr_t Path );
    _bstr_t GetTemplateDwgPath ( );
    void PutLogFilePath (
        _bstr_t Path );
    _bstr_t GetLogFilePath ( );
    void PutTempFilePath (
        _bstr_t Path );
    _bstr_t GetTempFilePath ( );
    void PutTempXrefPath (
        _bstr_t Path );
    _bstr_t GetTempXrefPath ( );
    void PutTextureMapPath (
        _bstr_t Path );
    _bstr_t GetTextureMapPath ( );
    void PutAltTabletMenuFile (
        _bstr_t MenuFile );
    _bstr_t GetAltTabletMenuFile ( );
    HRESULT SetProjectFilePath (
        _bstr_t ProjectName,
        _bstr_t ProjectFilePath );
    _bstr_t GetProjectFilePath (
        _bstr_t ProjectName );
    void PutPrinterConfigPath (
        _bstr_t Path );
    _bstr_t GetPrinterConfigPath ( );
    void PutPrinterDescPath (
        _bstr_t Path );
    _bstr_t GetPrinterDescPath ( );
    void PutPrinterStyleSheetPath (
        _bstr_t Path );
    _bstr_t GetPrinterStyleSheetPath ( );
    void PutWorkspacePath (
        _bstr_t Path );
    _bstr_t GetWorkspacePath ( );
    void PutObjectARXPath (
        _bstr_t Path );
    _bstr_t GetObjectARXPath ( );
    void PutColorBookPath (
        _bstr_t Path );
    _bstr_t GetColorBookPath ( );
    void PutToolPalettePath (
        _bstr_t Path );
    _bstr_t GetToolPalettePath ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall put_SupportPath (
        BSTR orient ) = 0;
    virtual HRESULT __stdcall get_SupportPath (
        BSTR * orient ) = 0;
    virtual HRESULT __stdcall put_DriversPath (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_DriversPath (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_MenuFile (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_MenuFile (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_HelpFilePath (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_HelpFilePath (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_DefaultInternetURL (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_DefaultInternetURL (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall get_ConfigFile (
        BSTR * ConfigFile ) = 0;
    virtual HRESULT __stdcall get_LicenseServer (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_TextEditor (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_TextEditor (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_MainDictionary (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_MainDictionary (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_CustomDictionary (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_CustomDictionary (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_AltFontFile (
        BSTR fontFile ) = 0;
    virtual HRESULT __stdcall get_AltFontFile (
        BSTR * fontFile ) = 0;
    virtual HRESULT __stdcall put_FontFileMap (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_FontFileMap (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_PrintFile (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_PrintFile (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_PrintSpoolExecutable (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_PrintSpoolExecutable (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_PostScriptPrologFile (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_PostScriptPrologFile (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_PrintSpoolerPath (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_PrintSpoolerPath (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_AutoSavePath (
        BSTR AutoSavePath ) = 0;
    virtual HRESULT __stdcall get_AutoSavePath (
        BSTR * AutoSavePath ) = 0;
    virtual HRESULT __stdcall put_TemplateDwgPath (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_TemplateDwgPath (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_LogFilePath (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_LogFilePath (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_TempFilePath (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_TempFilePath (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_TempXrefPath (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_TempXrefPath (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_TextureMapPath (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_TextureMapPath (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_AltTabletMenuFile (
        BSTR MenuFile ) = 0;
    virtual HRESULT __stdcall get_AltTabletMenuFile (
        BSTR * MenuFile ) = 0;
    virtual HRESULT __stdcall raw_SetProjectFilePath (
        BSTR ProjectName,
        BSTR ProjectFilePath ) = 0;
    virtual HRESULT __stdcall raw_GetProjectFilePath (
        BSTR ProjectName,
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_PrinterConfigPath (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_PrinterConfigPath (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_PrinterDescPath (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_PrinterDescPath (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_PrinterStyleSheetPath (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_PrinterStyleSheetPath (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_WorkspacePath (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_WorkspacePath (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_ObjectARXPath (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_ObjectARXPath (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_ColorBookPath (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_ColorBookPath (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_ToolPalettePath (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_ToolPalettePath (
        BSTR * Path ) = 0;
};

struct __declspec(uuid("9b13ccd3-1b77-4763-bffe-774ffca0e2a5"))
IAcadPreferencesDisplay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetLayoutDisplayMargins,put=PutLayoutDisplayMargins))
    VARIANT_BOOL LayoutDisplayMargins;
    __declspec(property(get=GetDisplayLayoutTabs,put=PutDisplayLayoutTabs))
    VARIANT_BOOL DisplayLayoutTabs;
    __declspec(property(get=GetLayoutDisplayPaper,put=PutLayoutDisplayPaper))
    VARIANT_BOOL LayoutDisplayPaper;
    __declspec(property(get=GetImageFrameHighlight,put=PutImageFrameHighlight))
    VARIANT_BOOL ImageFrameHighlight;
    __declspec(property(get=GetLayoutDisplayPaperShadow,put=PutLayoutDisplayPaperShadow))
    VARIANT_BOOL LayoutDisplayPaperShadow;
    __declspec(property(get=GetTrueColorImages,put=PutTrueColorImages))
    VARIANT_BOOL TrueColorImages;
    __declspec(property(get=GetLayoutShowPlotSetup,put=PutLayoutShowPlotSetup))
    VARIANT_BOOL LayoutShowPlotSetup;
    __declspec(property(get=GetXRefFadeIntensity,put=PutXRefFadeIntensity))
    long XRefFadeIntensity;
    __declspec(property(get=GetLayoutCreateViewport,put=PutLayoutCreateViewport))
    VARIANT_BOOL LayoutCreateViewport;
    __declspec(property(get=GetDisplayScrollBars,put=PutDisplayScrollBars))
    VARIANT_BOOL DisplayScrollBars;
    __declspec(property(get=GetDisplayScreenMenu,put=PutDisplayScreenMenu))
    VARIANT_BOOL DisplayScreenMenu;
    __declspec(property(get=GetCursorSize,put=PutCursorSize))
    int CursorSize;
    __declspec(property(get=GetDockedVisibleLines,put=PutDockedVisibleLines))
    int DockedVisibleLines;
    __declspec(property(get=GetShowRasterImage,put=PutShowRasterImage))
    VARIANT_BOOL ShowRasterImage;
    __declspec(property(get=GetGraphicsWinModelBackgrndColor,put=PutGraphicsWinModelBackgrndColor))
    OLE_COLOR GraphicsWinModelBackgrndColor;
    __declspec(property(get=GetModelCrosshairColor,put=PutModelCrosshairColor))
    OLE_COLOR ModelCrosshairColor;
    __declspec(property(get=GetGraphicsWinLayoutBackgrndColor,put=PutGraphicsWinLayoutBackgrndColor))
    OLE_COLOR GraphicsWinLayoutBackgrndColor;
    __declspec(property(get=GetTextWinBackgrndColor,put=PutTextWinBackgrndColor))
    OLE_COLOR TextWinBackgrndColor;
    __declspec(property(get=GetTextWinTextColor,put=PutTextWinTextColor))
    OLE_COLOR TextWinTextColor;
    __declspec(property(get=GetLayoutCrosshairColor,put=PutLayoutCrosshairColor))
    OLE_COLOR LayoutCrosshairColor;
    __declspec(property(get=GetAutoTrackingVecColor,put=PutAutoTrackingVecColor))
    OLE_COLOR AutoTrackingVecColor;
    __declspec(property(get=GetTextFont,put=PutTextFont))
    _bstr_t TextFont;
    __declspec(property(get=GetTextFontStyle,put=PutTextFontStyle))
    enum AcTextFontStyle TextFontStyle;
    __declspec(property(get=GetTextFontSize,put=PutTextFontSize))
    int TextFontSize;
    __declspec(property(get=GetHistoryLines,put=PutHistoryLines))
    int HistoryLines;
    __declspec(property(get=GetMaxAutoCADWindow,put=PutMaxAutoCADWindow))
    VARIANT_BOOL MaxAutoCADWindow;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    void PutLayoutDisplayMargins (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetLayoutDisplayMargins ( );
    void PutLayoutDisplayPaper (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetLayoutDisplayPaper ( );
    void PutLayoutDisplayPaperShadow (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetLayoutDisplayPaperShadow ( );
    void PutLayoutShowPlotSetup (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetLayoutShowPlotSetup ( );
    void PutLayoutCreateViewport (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetLayoutCreateViewport ( );
    void PutDisplayScrollBars (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetDisplayScrollBars ( );
    void PutDisplayScreenMenu (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetDisplayScreenMenu ( );
    void PutCursorSize (
        int Path );
    int GetCursorSize ( );
    void PutDockedVisibleLines (
        int Path );
    int GetDockedVisibleLines ( );
    void PutShowRasterImage (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetShowRasterImage ( );
    void PutGraphicsWinModelBackgrndColor (
        OLE_COLOR color );
    OLE_COLOR GetGraphicsWinModelBackgrndColor ( );
    void PutModelCrosshairColor (
        OLE_COLOR crossHairColor );
    OLE_COLOR GetModelCrosshairColor ( );
    void PutGraphicsWinLayoutBackgrndColor (
        OLE_COLOR color );
    OLE_COLOR GetGraphicsWinLayoutBackgrndColor ( );
    void PutTextWinBackgrndColor (
        OLE_COLOR Path );
    OLE_COLOR GetTextWinBackgrndColor ( );
    void PutTextWinTextColor (
        OLE_COLOR Path );
    OLE_COLOR GetTextWinTextColor ( );
    void PutLayoutCrosshairColor (
        OLE_COLOR crossHairColor );
    OLE_COLOR GetLayoutCrosshairColor ( );
    void PutAutoTrackingVecColor (
        OLE_COLOR AutoTrackingVecColor );
    OLE_COLOR GetAutoTrackingVecColor ( );
    void PutTextFont (
        _bstr_t Path );
    _bstr_t GetTextFont ( );
    void PutTextFontStyle (
        enum AcTextFontStyle Path );
    enum AcTextFontStyle GetTextFontStyle ( );
    void PutTextFontSize (
        int Path );
    int GetTextFontSize ( );
    void PutHistoryLines (
        int Path );
    int GetHistoryLines ( );
    void PutMaxAutoCADWindow (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetMaxAutoCADWindow ( );
    void PutDisplayLayoutTabs (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetDisplayLayoutTabs ( );
    void PutImageFrameHighlight (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetImageFrameHighlight ( );
    void PutTrueColorImages (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetTrueColorImages ( );
    void PutXRefFadeIntensity (
        long Path );
    long GetXRefFadeIntensity ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall put_LayoutDisplayMargins (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_LayoutDisplayMargins (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_LayoutDisplayPaper (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_LayoutDisplayPaper (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_LayoutDisplayPaperShadow (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_LayoutDisplayPaperShadow (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_LayoutShowPlotSetup (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_LayoutShowPlotSetup (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_LayoutCreateViewport (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_LayoutCreateViewport (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_DisplayScrollBars (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_DisplayScrollBars (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_DisplayScreenMenu (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_DisplayScreenMenu (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_CursorSize (
        int Path ) = 0;
    virtual HRESULT __stdcall get_CursorSize (
        int * Path ) = 0;
    virtual HRESULT __stdcall put_DockedVisibleLines (
        int Path ) = 0;
    virtual HRESULT __stdcall get_DockedVisibleLines (
        int * Path ) = 0;
    virtual HRESULT __stdcall put_ShowRasterImage (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_ShowRasterImage (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_GraphicsWinModelBackgrndColor (
        OLE_COLOR color ) = 0;
    virtual HRESULT __stdcall get_GraphicsWinModelBackgrndColor (
        OLE_COLOR * color ) = 0;
    virtual HRESULT __stdcall put_ModelCrosshairColor (
        OLE_COLOR crossHairColor ) = 0;
    virtual HRESULT __stdcall get_ModelCrosshairColor (
        OLE_COLOR * crossHairColor ) = 0;
    virtual HRESULT __stdcall put_GraphicsWinLayoutBackgrndColor (
        OLE_COLOR color ) = 0;
    virtual HRESULT __stdcall get_GraphicsWinLayoutBackgrndColor (
        OLE_COLOR * color ) = 0;
    virtual HRESULT __stdcall put_TextWinBackgrndColor (
        OLE_COLOR Path ) = 0;
    virtual HRESULT __stdcall get_TextWinBackgrndColor (
        OLE_COLOR * Path ) = 0;
    virtual HRESULT __stdcall put_TextWinTextColor (
        OLE_COLOR Path ) = 0;
    virtual HRESULT __stdcall get_TextWinTextColor (
        OLE_COLOR * Path ) = 0;
    virtual HRESULT __stdcall put_LayoutCrosshairColor (
        OLE_COLOR crossHairColor ) = 0;
    virtual HRESULT __stdcall get_LayoutCrosshairColor (
        OLE_COLOR * crossHairColor ) = 0;
    virtual HRESULT __stdcall put_AutoTrackingVecColor (
        OLE_COLOR AutoTrackingVecColor ) = 0;
    virtual HRESULT __stdcall get_AutoTrackingVecColor (
        OLE_COLOR * AutoTrackingVecColor ) = 0;
    virtual HRESULT __stdcall put_TextFont (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_TextFont (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_TextFontStyle (
        enum AcTextFontStyle Path ) = 0;
    virtual HRESULT __stdcall get_TextFontStyle (
        enum AcTextFontStyle * Path ) = 0;
    virtual HRESULT __stdcall put_TextFontSize (
        int Path ) = 0;
    virtual HRESULT __stdcall get_TextFontSize (
        int * Path ) = 0;
    virtual HRESULT __stdcall put_HistoryLines (
        int Path ) = 0;
    virtual HRESULT __stdcall get_HistoryLines (
        int * Path ) = 0;
    virtual HRESULT __stdcall put_MaxAutoCADWindow (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_MaxAutoCADWindow (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_DisplayLayoutTabs (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_DisplayLayoutTabs (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_ImageFrameHighlight (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_ImageFrameHighlight (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_TrueColorImages (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_TrueColorImages (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_XRefFadeIntensity (
        long Path ) = 0;
    virtual HRESULT __stdcall get_XRefFadeIntensity (
        long * Path ) = 0;
};

struct __declspec(uuid("055919a3-cf18-4b03-882f-7ada3ac6fcae"))
IAcadPreferencesOpenSave : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetSavePreviewThumbnail,put=PutSavePreviewThumbnail))
    VARIANT_BOOL SavePreviewThumbnail;
    __declspec(property(get=GetIncrementalSavePercent,put=PutIncrementalSavePercent))
    int IncrementalSavePercent;
    __declspec(property(get=GetAutoSaveInterval,put=PutAutoSaveInterval))
    int AutoSaveInterval;
    __declspec(property(get=GetCreateBackup,put=PutCreateBackup))
    VARIANT_BOOL CreateBackup;
    __declspec(property(get=GetFullCRCValidation,put=PutFullCRCValidation))
    VARIANT_BOOL FullCRCValidation;
    __declspec(property(get=GetLogFileOn,put=PutLogFileOn))
    VARIANT_BOOL LogFileOn;
    __declspec(property(get=GetTempFileExtension,put=PutTempFileExtension))
    _bstr_t TempFileExtension;
    __declspec(property(get=GetXrefDemandLoad,put=PutXrefDemandLoad))
    enum AcXRefDemandLoad XrefDemandLoad;
    __declspec(property(get=GetDemandLoadARXApp,put=PutDemandLoadARXApp))
    enum AcARXDemandLoad DemandLoadARXApp;
    __declspec(property(get=GetProxyImage,put=PutProxyImage))
    enum AcProxyImage ProxyImage;
    __declspec(property(get=GetShowProxyDialogBox,put=PutShowProxyDialogBox))
    VARIANT_BOOL ShowProxyDialogBox;
    __declspec(property(get=GetAutoAudit,put=PutAutoAudit))
    VARIANT_BOOL AutoAudit;
    __declspec(property(get=GetSaveAsType,put=PutSaveAsType))
    enum AcSaveAsType SaveAsType;
    __declspec(property(get=GetMRUNumber))
    long MRUNumber;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    void PutSavePreviewThumbnail (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetSavePreviewThumbnail ( );
    void PutIncrementalSavePercent (
        int Path );
    int GetIncrementalSavePercent ( );
    void PutAutoSaveInterval (
        int Path );
    int GetAutoSaveInterval ( );
    void PutCreateBackup (
        VARIANT_BOOL CreateBackup );
    VARIANT_BOOL GetCreateBackup ( );
    void PutFullCRCValidation (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetFullCRCValidation ( );
    void PutLogFileOn (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetLogFileOn ( );
    void PutTempFileExtension (
        _bstr_t Path );
    _bstr_t GetTempFileExtension ( );
    void PutXrefDemandLoad (
        enum AcXRefDemandLoad Path );
    enum AcXRefDemandLoad GetXrefDemandLoad ( );
    void PutDemandLoadARXApp (
        enum AcARXDemandLoad Path );
    enum AcARXDemandLoad GetDemandLoadARXApp ( );
    void PutProxyImage (
        enum AcProxyImage Path );
    enum AcProxyImage GetProxyImage ( );
    void PutShowProxyDialogBox (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetShowProxyDialogBox ( );
    void PutAutoAudit (
        VARIANT_BOOL bAudit );
    VARIANT_BOOL GetAutoAudit ( );
    void PutSaveAsType (
        enum AcSaveAsType Path );
    enum AcSaveAsType GetSaveAsType ( );
    long GetMRUNumber ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall put_SavePreviewThumbnail (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_SavePreviewThumbnail (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_IncrementalSavePercent (
        int Path ) = 0;
    virtual HRESULT __stdcall get_IncrementalSavePercent (
        int * Path ) = 0;
    virtual HRESULT __stdcall put_AutoSaveInterval (
        int Path ) = 0;
    virtual HRESULT __stdcall get_AutoSaveInterval (
        int * Path ) = 0;
    virtual HRESULT __stdcall put_CreateBackup (
        VARIANT_BOOL CreateBackup ) = 0;
    virtual HRESULT __stdcall get_CreateBackup (
        VARIANT_BOOL * CreateBackup ) = 0;
    virtual HRESULT __stdcall put_FullCRCValidation (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_FullCRCValidation (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_LogFileOn (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_LogFileOn (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_TempFileExtension (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_TempFileExtension (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_XrefDemandLoad (
        enum AcXRefDemandLoad Path ) = 0;
    virtual HRESULT __stdcall get_XrefDemandLoad (
        enum AcXRefDemandLoad * Path ) = 0;
    virtual HRESULT __stdcall put_DemandLoadARXApp (
        enum AcARXDemandLoad Path ) = 0;
    virtual HRESULT __stdcall get_DemandLoadARXApp (
        enum AcARXDemandLoad * Path ) = 0;
    virtual HRESULT __stdcall put_ProxyImage (
        enum AcProxyImage Path ) = 0;
    virtual HRESULT __stdcall get_ProxyImage (
        enum AcProxyImage * Path ) = 0;
    virtual HRESULT __stdcall put_ShowProxyDialogBox (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_ShowProxyDialogBox (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_AutoAudit (
        VARIANT_BOOL bAudit ) = 0;
    virtual HRESULT __stdcall get_AutoAudit (
        VARIANT_BOOL * bAudit ) = 0;
    virtual HRESULT __stdcall put_SaveAsType (
        enum AcSaveAsType Path ) = 0;
    virtual HRESULT __stdcall get_SaveAsType (
        enum AcSaveAsType * Path ) = 0;
    virtual HRESULT __stdcall get_MRUNumber (
        long * Path ) = 0;
};

struct __declspec(uuid("5d995b4a-f970-4e63-90eb-c879ffbceebd"))
IAcadPreferencesOutput : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetDefaultOutputDevice,put=PutDefaultOutputDevice))
    _bstr_t DefaultOutputDevice;
    __declspec(property(get=GetPrinterSpoolAlert,put=PutPrinterSpoolAlert))
    enum AcPrinterSpoolAlert PrinterSpoolAlert;
    __declspec(property(get=GetPrinterPaperSizeAlert,put=PutPrinterPaperSizeAlert))
    VARIANT_BOOL PrinterPaperSizeAlert;
    __declspec(property(get=GetPlotLegacy,put=PutPlotLegacy))
    VARIANT_BOOL PlotLegacy;
    __declspec(property(get=GetOLEQuality,put=PutOLEQuality))
    enum AcOleQuality OLEQuality;
    __declspec(property(get=GetUseLastPlotSettings,put=PutUseLastPlotSettings))
    VARIANT_BOOL UseLastPlotSettings;
    __declspec(property(get=GetPlotPolicy,put=PutPlotPolicy))
    enum AcPlotPolicy PlotPolicy;
    __declspec(property(get=GetDefaultPlotStyleTable,put=PutDefaultPlotStyleTable))
    _bstr_t DefaultPlotStyleTable;
    __declspec(property(get=GetDefaultPlotStyleForObjects,put=PutDefaultPlotStyleForObjects))
    _bstr_t DefaultPlotStyleForObjects;
    __declspec(property(get=GetDefaultPlotStyleForLayer,put=PutDefaultPlotStyleForLayer))
    _bstr_t DefaultPlotStyleForLayer;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    void PutDefaultOutputDevice (
        _bstr_t Path );
    _bstr_t GetDefaultOutputDevice ( );
    void PutPrinterSpoolAlert (
        enum AcPrinterSpoolAlert Path );
    enum AcPrinterSpoolAlert GetPrinterSpoolAlert ( );
    void PutPrinterPaperSizeAlert (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetPrinterPaperSizeAlert ( );
    void PutPlotLegacy (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetPlotLegacy ( );
    void PutOLEQuality (
        enum AcOleQuality Path );
    enum AcOleQuality GetOLEQuality ( );
    void PutUseLastPlotSettings (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetUseLastPlotSettings ( );
    void PutPlotPolicy (
        enum AcPlotPolicy Path );
    enum AcPlotPolicy GetPlotPolicy ( );
    void PutDefaultPlotStyleTable (
        _bstr_t Path );
    _bstr_t GetDefaultPlotStyleTable ( );
    void PutDefaultPlotStyleForObjects (
        _bstr_t Path );
    _bstr_t GetDefaultPlotStyleForObjects ( );
    void PutDefaultPlotStyleForLayer (
        _bstr_t Path );
    _bstr_t GetDefaultPlotStyleForLayer ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall put_DefaultOutputDevice (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_DefaultOutputDevice (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_PrinterSpoolAlert (
        enum AcPrinterSpoolAlert Path ) = 0;
    virtual HRESULT __stdcall get_PrinterSpoolAlert (
        enum AcPrinterSpoolAlert * Path ) = 0;
    virtual HRESULT __stdcall put_PrinterPaperSizeAlert (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_PrinterPaperSizeAlert (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_PlotLegacy (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_PlotLegacy (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_OLEQuality (
        enum AcOleQuality Path ) = 0;
    virtual HRESULT __stdcall get_OLEQuality (
        enum AcOleQuality * Path ) = 0;
    virtual HRESULT __stdcall put_UseLastPlotSettings (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_UseLastPlotSettings (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_PlotPolicy (
        enum AcPlotPolicy Path ) = 0;
    virtual HRESULT __stdcall get_PlotPolicy (
        enum AcPlotPolicy * Path ) = 0;
    virtual HRESULT __stdcall put_DefaultPlotStyleTable (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_DefaultPlotStyleTable (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_DefaultPlotStyleForObjects (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_DefaultPlotStyleForObjects (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall put_DefaultPlotStyleForLayer (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_DefaultPlotStyleForLayer (
        BSTR * Path ) = 0;
};

struct __declspec(uuid("7d8fdc74-be13-4aa0-9b96-33f132e1d0af"))
IAcadPreferencesSystem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetSingleDocumentMode,put=PutSingleDocumentMode))
    VARIANT_BOOL SingleDocumentMode;
    __declspec(property(get=GetDisplayOLEScale,put=PutDisplayOLEScale))
    VARIANT_BOOL DisplayOLEScale;
    __declspec(property(get=GetStoreSQLIndex,put=PutStoreSQLIndex))
    VARIANT_BOOL StoreSQLIndex;
    __declspec(property(get=GetTablesReadOnly,put=PutTablesReadOnly))
    VARIANT_BOOL TablesReadOnly;
    __declspec(property(get=GetEnableStartupDialog,put=PutEnableStartupDialog))
    VARIANT_BOOL EnableStartupDialog;
    __declspec(property(get=GetBeepOnError,put=PutBeepOnError))
    VARIANT_BOOL BeepOnError;
    __declspec(property(get=GetShowWarningMessages,put=PutShowWarningMessages))
    VARIANT_BOOL ShowWarningMessages;
    __declspec(property(get=GetLoadAcadLspInAllDocuments,put=PutLoadAcadLspInAllDocuments))
    VARIANT_BOOL LoadAcadLspInAllDocuments;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    void PutSingleDocumentMode (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetSingleDocumentMode ( );
    void PutDisplayOLEScale (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetDisplayOLEScale ( );
    void PutStoreSQLIndex (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetStoreSQLIndex ( );
    void PutTablesReadOnly (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetTablesReadOnly ( );
    void PutEnableStartupDialog (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetEnableStartupDialog ( );
    void PutBeepOnError (
        VARIANT_BOOL BeepOnError );
    VARIANT_BOOL GetBeepOnError ( );
    void PutShowWarningMessages (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetShowWarningMessages ( );
    void PutLoadAcadLspInAllDocuments (
        VARIANT_BOOL pALID );
    VARIANT_BOOL GetLoadAcadLspInAllDocuments ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall put_SingleDocumentMode (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_SingleDocumentMode (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_DisplayOLEScale (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_DisplayOLEScale (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_StoreSQLIndex (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_StoreSQLIndex (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_TablesReadOnly (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_TablesReadOnly (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_EnableStartupDialog (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_EnableStartupDialog (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_BeepOnError (
        VARIANT_BOOL BeepOnError ) = 0;
    virtual HRESULT __stdcall get_BeepOnError (
        VARIANT_BOOL * BeepOnError ) = 0;
    virtual HRESULT __stdcall put_ShowWarningMessages (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_ShowWarningMessages (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_LoadAcadLspInAllDocuments (
        VARIANT_BOOL pALID ) = 0;
    virtual HRESULT __stdcall get_LoadAcadLspInAllDocuments (
        VARIANT_BOOL * pALID ) = 0;
};

struct __declspec(uuid("07e8cf44-9e40-47ea-970b-89444bee2866"))
IAcadPreferencesUser : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetKeyboardAccelerator,put=PutKeyboardAccelerator))
    enum AcKeyboardAccelerator KeyboardAccelerator;
    __declspec(property(get=GetKeyboardPriority,put=PutKeyboardPriority))
    enum AcKeyboardPriority KeyboardPriority;
    __declspec(property(get=GetHyperlinkDisplayCursor,put=PutHyperlinkDisplayCursor))
    VARIANT_BOOL HyperlinkDisplayCursor;
    __declspec(property(get=GetHyperlinkDisplayTooltip,put=PutHyperlinkDisplayTooltip))
    VARIANT_BOOL HyperlinkDisplayTooltip;
    __declspec(property(get=GetADCInsertUnitsDefaultSource,put=PutADCInsertUnitsDefaultSource))
    enum AcInsertUnits ADCInsertUnitsDefaultSource;
    __declspec(property(get=GetADCInsertUnitsDefaultTarget,put=PutADCInsertUnitsDefaultTarget))
    enum AcInsertUnits ADCInsertUnitsDefaultTarget;
    __declspec(property(get=GetShortCutMenuDisplay,put=PutShortCutMenuDisplay))
    VARIANT_BOOL ShortCutMenuDisplay;
    __declspec(property(get=GetSCMDefaultMode,put=PutSCMDefaultMode))
    enum AcDrawingAreaSCMDefault SCMDefaultMode;
    __declspec(property(get=GetSCMEditMode,put=PutSCMEditMode))
    enum AcDrawingAreaSCMEdit SCMEditMode;
    __declspec(property(get=GetSCMCommandMode,put=PutSCMCommandMode))
    enum AcDrawingAreaSCMCommand SCMCommandMode;
    __declspec(property(get=GetSCMTimeMode,put=PutSCMTimeMode))
    VARIANT_BOOL SCMTimeMode;
    __declspec(property(get=GetSCMTimeValue,put=PutSCMTimeValue))
    int SCMTimeValue;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    void PutKeyboardAccelerator (
        enum AcKeyboardAccelerator Path );
    enum AcKeyboardAccelerator GetKeyboardAccelerator ( );
    void PutKeyboardPriority (
        enum AcKeyboardPriority Path );
    enum AcKeyboardPriority GetKeyboardPriority ( );
    void PutHyperlinkDisplayCursor (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetHyperlinkDisplayCursor ( );
    void PutHyperlinkDisplayTooltip (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetHyperlinkDisplayTooltip ( );
    void PutADCInsertUnitsDefaultSource (
        enum AcInsertUnits pIU );
    enum AcInsertUnits GetADCInsertUnitsDefaultSource ( );
    void PutADCInsertUnitsDefaultTarget (
        enum AcInsertUnits pSUunits );
    enum AcInsertUnits GetADCInsertUnitsDefaultTarget ( );
    void PutShortCutMenuDisplay (
        VARIANT_BOOL pSCM );
    VARIANT_BOOL GetShortCutMenuDisplay ( );
    void PutSCMDefaultMode (
        enum AcDrawingAreaSCMDefault pSCM );
    enum AcDrawingAreaSCMDefault GetSCMDefaultMode ( );
    void PutSCMEditMode (
        enum AcDrawingAreaSCMEdit pSCM );
    enum AcDrawingAreaSCMEdit GetSCMEditMode ( );
    void PutSCMCommandMode (
        enum AcDrawingAreaSCMCommand pSCM );
    enum AcDrawingAreaSCMCommand GetSCMCommandMode ( );
    void PutSCMTimeMode (
        VARIANT_BOOL time );
    VARIANT_BOOL GetSCMTimeMode ( );
    void PutSCMTimeValue (
        int time );
    int GetSCMTimeValue ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall put_KeyboardAccelerator (
        enum AcKeyboardAccelerator Path ) = 0;
    virtual HRESULT __stdcall get_KeyboardAccelerator (
        enum AcKeyboardAccelerator * Path ) = 0;
    virtual HRESULT __stdcall put_KeyboardPriority (
        enum AcKeyboardPriority Path ) = 0;
    virtual HRESULT __stdcall get_KeyboardPriority (
        enum AcKeyboardPriority * Path ) = 0;
    virtual HRESULT __stdcall put_HyperlinkDisplayCursor (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_HyperlinkDisplayCursor (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_HyperlinkDisplayTooltip (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_HyperlinkDisplayTooltip (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_ADCInsertUnitsDefaultSource (
        enum AcInsertUnits pIU ) = 0;
    virtual HRESULT __stdcall get_ADCInsertUnitsDefaultSource (
        enum AcInsertUnits * pIU ) = 0;
    virtual HRESULT __stdcall put_ADCInsertUnitsDefaultTarget (
        enum AcInsertUnits pSUunits ) = 0;
    virtual HRESULT __stdcall get_ADCInsertUnitsDefaultTarget (
        enum AcInsertUnits * pSUunits ) = 0;
    virtual HRESULT __stdcall put_ShortCutMenuDisplay (
        VARIANT_BOOL pSCM ) = 0;
    virtual HRESULT __stdcall get_ShortCutMenuDisplay (
        VARIANT_BOOL * pSCM ) = 0;
    virtual HRESULT __stdcall put_SCMDefaultMode (
        enum AcDrawingAreaSCMDefault pSCM ) = 0;
    virtual HRESULT __stdcall get_SCMDefaultMode (
        enum AcDrawingAreaSCMDefault * pSCM ) = 0;
    virtual HRESULT __stdcall put_SCMEditMode (
        enum AcDrawingAreaSCMEdit pSCM ) = 0;
    virtual HRESULT __stdcall get_SCMEditMode (
        enum AcDrawingAreaSCMEdit * pSCM ) = 0;
    virtual HRESULT __stdcall put_SCMCommandMode (
        enum AcDrawingAreaSCMCommand pSCM ) = 0;
    virtual HRESULT __stdcall get_SCMCommandMode (
        enum AcDrawingAreaSCMCommand * pSCM ) = 0;
    virtual HRESULT __stdcall put_SCMTimeMode (
        VARIANT_BOOL time ) = 0;
    virtual HRESULT __stdcall get_SCMTimeMode (
        VARIANT_BOOL * time ) = 0;
    virtual HRESULT __stdcall put_SCMTimeValue (
        int time ) = 0;
    virtual HRESULT __stdcall get_SCMTimeValue (
        int * time ) = 0;
};

struct __declspec(uuid("5617e4f2-f96f-42fe-8078-84b9ab19f10e"))
IAcadPreferencesDrafting : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetAutoSnapMarker,put=PutAutoSnapMarker))
    VARIANT_BOOL AutoSnapMarker;
    __declspec(property(get=GetAutoSnapMagnet,put=PutAutoSnapMagnet))
    VARIANT_BOOL AutoSnapMagnet;
    __declspec(property(get=GetAutoSnapTooltip,put=PutAutoSnapTooltip))
    VARIANT_BOOL AutoSnapTooltip;
    __declspec(property(get=GetAutoSnapAperture,put=PutAutoSnapAperture))
    VARIANT_BOOL AutoSnapAperture;
    __declspec(property(get=GetAutoSnapApertureSize,put=PutAutoSnapApertureSize))
    long AutoSnapApertureSize;
    __declspec(property(get=GetAutoSnapMarkerColor,put=PutAutoSnapMarkerColor))
    enum AcColor AutoSnapMarkerColor;
    __declspec(property(get=GetAutoSnapMarkerSize,put=PutAutoSnapMarkerSize))
    long AutoSnapMarkerSize;
    __declspec(property(get=GetPolarTrackingVector,put=PutPolarTrackingVector))
    VARIANT_BOOL PolarTrackingVector;
    __declspec(property(get=GetFullScreenTrackingVector,put=PutFullScreenTrackingVector))
    VARIANT_BOOL FullScreenTrackingVector;
    __declspec(property(get=GetAutoTrackTooltip,put=PutAutoTrackTooltip))
    VARIANT_BOOL AutoTrackTooltip;
    __declspec(property(get=GetAlignmentPointAcquisition,put=PutAlignmentPointAcquisition))
    enum AcAlignmentPointAcquisition AlignmentPointAcquisition;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    void PutAutoSnapMarker (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetAutoSnapMarker ( );
    void PutAutoSnapMagnet (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetAutoSnapMagnet ( );
    void PutAutoSnapTooltip (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetAutoSnapTooltip ( );
    void PutAutoSnapAperture (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetAutoSnapAperture ( );
    void PutAutoSnapApertureSize (
        long Path );
    long GetAutoSnapApertureSize ( );
    void PutAutoSnapMarkerColor (
        enum AcColor Path );
    enum AcColor GetAutoSnapMarkerColor ( );
    void PutAutoSnapMarkerSize (
        long Path );
    long GetAutoSnapMarkerSize ( );
    void PutPolarTrackingVector (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetPolarTrackingVector ( );
    void PutFullScreenTrackingVector (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetFullScreenTrackingVector ( );
    void PutAutoTrackTooltip (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetAutoTrackTooltip ( );
    void PutAlignmentPointAcquisition (
        enum AcAlignmentPointAcquisition Path );
    enum AcAlignmentPointAcquisition GetAlignmentPointAcquisition ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall put_AutoSnapMarker (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_AutoSnapMarker (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_AutoSnapMagnet (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_AutoSnapMagnet (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_AutoSnapTooltip (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_AutoSnapTooltip (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_AutoSnapAperture (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_AutoSnapAperture (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_AutoSnapApertureSize (
        long Path ) = 0;
    virtual HRESULT __stdcall get_AutoSnapApertureSize (
        long * Path ) = 0;
    virtual HRESULT __stdcall put_AutoSnapMarkerColor (
        enum AcColor Path ) = 0;
    virtual HRESULT __stdcall get_AutoSnapMarkerColor (
        enum AcColor * Path ) = 0;
    virtual HRESULT __stdcall put_AutoSnapMarkerSize (
        long Path ) = 0;
    virtual HRESULT __stdcall get_AutoSnapMarkerSize (
        long * Path ) = 0;
    virtual HRESULT __stdcall put_PolarTrackingVector (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_PolarTrackingVector (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_FullScreenTrackingVector (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_FullScreenTrackingVector (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_AutoTrackTooltip (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_AutoTrackTooltip (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_AlignmentPointAcquisition (
        enum AcAlignmentPointAcquisition Path ) = 0;
    virtual HRESULT __stdcall get_AlignmentPointAcquisition (
        enum AcAlignmentPointAcquisition * Path ) = 0;
};

struct __declspec(uuid("b2601ede-269f-479c-b712-227a71e80065"))
IAcadPreferencesSelection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetPickFirst,put=PutPickFirst))
    VARIANT_BOOL PickFirst;
    __declspec(property(get=GetPickAdd,put=PutPickAdd))
    VARIANT_BOOL PickAdd;
    __declspec(property(get=GetPickDrag,put=PutPickDrag))
    VARIANT_BOOL PickDrag;
    __declspec(property(get=GetPickAuto,put=PutPickAuto))
    VARIANT_BOOL PickAuto;
    __declspec(property(get=GetPickBoxSize,put=PutPickBoxSize))
    long PickBoxSize;
    __declspec(property(get=GetDisplayGrips,put=PutDisplayGrips))
    VARIANT_BOOL DisplayGrips;
    __declspec(property(get=GetDisplayGripsWithinBlocks,put=PutDisplayGripsWithinBlocks))
    VARIANT_BOOL DisplayGripsWithinBlocks;
    __declspec(property(get=GetGripColorSelected,put=PutGripColorSelected))
    enum AcColor GripColorSelected;
    __declspec(property(get=GetGripColorUnselected,put=PutGripColorUnselected))
    enum AcColor GripColorUnselected;
    __declspec(property(get=GetGripSize,put=PutGripSize))
    long GripSize;
    __declspec(property(get=GetPickGroup,put=PutPickGroup))
    VARIANT_BOOL PickGroup;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    void PutPickFirst (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetPickFirst ( );
    void PutPickAdd (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetPickAdd ( );
    void PutPickDrag (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetPickDrag ( );
    void PutPickAuto (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetPickAuto ( );
    void PutPickBoxSize (
        long Path );
    long GetPickBoxSize ( );
    void PutDisplayGrips (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetDisplayGrips ( );
    void PutDisplayGripsWithinBlocks (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetDisplayGripsWithinBlocks ( );
    void PutGripColorSelected (
        enum AcColor Path );
    enum AcColor GetGripColorSelected ( );
    void PutGripColorUnselected (
        enum AcColor Path );
    enum AcColor GetGripColorUnselected ( );
    void PutGripSize (
        long Path );
    long GetGripSize ( );
    void PutPickGroup (
        VARIANT_BOOL pick );
    VARIANT_BOOL GetPickGroup ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall put_PickFirst (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_PickFirst (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_PickAdd (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_PickAdd (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_PickDrag (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_PickDrag (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_PickAuto (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_PickAuto (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_PickBoxSize (
        long Path ) = 0;
    virtual HRESULT __stdcall get_PickBoxSize (
        long * Path ) = 0;
    virtual HRESULT __stdcall put_DisplayGrips (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_DisplayGrips (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_DisplayGripsWithinBlocks (
        VARIANT_BOOL Path ) = 0;
    virtual HRESULT __stdcall get_DisplayGripsWithinBlocks (
        VARIANT_BOOL * Path ) = 0;
    virtual HRESULT __stdcall put_GripColorSelected (
        enum AcColor Path ) = 0;
    virtual HRESULT __stdcall get_GripColorSelected (
        enum AcColor * Path ) = 0;
    virtual HRESULT __stdcall put_GripColorUnselected (
        enum AcColor Path ) = 0;
    virtual HRESULT __stdcall get_GripColorUnselected (
        enum AcColor * Path ) = 0;
    virtual HRESULT __stdcall put_GripSize (
        long Path ) = 0;
    virtual HRESULT __stdcall get_GripSize (
        long * Path ) = 0;
    virtual HRESULT __stdcall put_PickGroup (
        VARIANT_BOOL pick ) = 0;
    virtual HRESULT __stdcall get_PickGroup (
        VARIANT_BOOL * pick ) = 0;
};

struct __declspec(uuid("30c8f7e7-97b8-4872-a525-6ea44119a20a"))
IAcadPreferencesProfiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetActiveProfile,put=PutActiveProfile))
    _bstr_t ActiveProfile;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    void PutActiveProfile (
        _bstr_t Path );
    _bstr_t GetActiveProfile ( );
    HRESULT ImportProfile (
        _bstr_t ProfileName,
        _bstr_t RegFile,
        VARIANT_BOOL IncludePathInfo );
    HRESULT ExportProfile (
        _bstr_t ProfileName,
        _bstr_t RegFile );
    HRESULT DeleteProfile (
        _bstr_t ProfileName );
    HRESULT ResetProfile (
        _bstr_t Profile );
    HRESULT RenameProfile (
        _bstr_t origProfileName,
        _bstr_t newProfileName );
    HRESULT CopyProfile (
        _bstr_t oldProfileName,
        _bstr_t newProfileName );
    HRESULT GetAllProfileNames (
        VARIANT * pNames );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall put_ActiveProfile (
        BSTR Path ) = 0;
    virtual HRESULT __stdcall get_ActiveProfile (
        BSTR * Path ) = 0;
    virtual HRESULT __stdcall raw_ImportProfile (
        BSTR ProfileName,
        BSTR RegFile,
        VARIANT_BOOL IncludePathInfo ) = 0;
    virtual HRESULT __stdcall raw_ExportProfile (
        BSTR ProfileName,
        BSTR RegFile ) = 0;
    virtual HRESULT __stdcall raw_DeleteProfile (
        BSTR ProfileName ) = 0;
    virtual HRESULT __stdcall raw_ResetProfile (
        BSTR Profile ) = 0;
    virtual HRESULT __stdcall raw_RenameProfile (
        BSTR origProfileName,
        BSTR newProfileName ) = 0;
    virtual HRESULT __stdcall raw_CopyProfile (
        BSTR oldProfileName,
        BSTR newProfileName ) = 0;
    virtual HRESULT __stdcall raw_GetAllProfileNames (
        VARIANT * pNames ) = 0;
};

struct __declspec(uuid("2bd1943d-1f68-4c80-bfa0-3f99bf79a681"))
IAcadMenuGroups : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetParent))
    IAcadApplicationPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadMenuGroupPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAcadApplicationPtr GetApplication ( );
    IAcadApplicationPtr GetParent ( );
    IAcadMenuGroupPtr Load (
        _bstr_t MenuFileName,
        const _variant_t & BaseMenu = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadMenuGroup * * pItem ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pEnumVariant ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * Count ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IAcadApplication * * pParent ) = 0;
    virtual HRESULT __stdcall raw_Load (
        BSTR MenuFileName,
        VARIANT BaseMenu,
        struct IAcadMenuGroup * * pMenuGroup ) = 0;
};

struct __declspec(uuid("8e6cd1df-9d4b-44f4-a6b1-c78949711f5a"))
IAcadMenuGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetParent))
    IAcadMenuGroupsPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    enum AcMenuGroupType Type;
    __declspec(property(get=GetMenuFileName))
    _bstr_t MenuFileName;
    __declspec(property(get=GetMenus))
    IAcadPopupMenusPtr Menus;
    __declspec(property(get=GetToolbars))
    IAcadToolbarsPtr Toolbars;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    IAcadMenuGroupsPtr GetParent ( );
    _bstr_t GetName ( );
    enum AcMenuGroupType GetType ( );
    _bstr_t GetMenuFileName ( );
    IAcadPopupMenusPtr GetMenus ( );
    IAcadToolbarsPtr GetToolbars ( );
    HRESULT Unload ( );
    HRESULT Save (
        enum AcMenuFileType MenuFileType );
    HRESULT SaveAs (
        _bstr_t MenuFileName,
        enum AcMenuFileType MenuFileType );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IAcadMenuGroups * * pParent ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * Name ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum AcMenuGroupType * menuType ) = 0;
    virtual HRESULT __stdcall get_MenuFileName (
        BSTR * Name ) = 0;
    virtual HRESULT __stdcall get_Menus (
        struct IAcadPopupMenus * * pMenus ) = 0;
    virtual HRESULT __stdcall get_Toolbars (
        struct IAcadToolbars * * pToolbars ) = 0;
    virtual HRESULT __stdcall raw_Unload ( ) = 0;
    virtual HRESULT __stdcall raw_Save (
        enum AcMenuFileType MenuFileType ) = 0;
    virtual HRESULT __stdcall raw_SaveAs (
        BSTR MenuFileName,
        enum AcMenuFileType MenuFileType ) = 0;
};

struct __declspec(uuid("c9445c9b-a5ce-4915-8454-bb33b85ee29b"))
IAcadPopupMenus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetParent))
    IAcadMenuGroupPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadPopupMenuPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAcadApplicationPtr GetApplication ( );
    IAcadMenuGroupPtr GetParent ( );
    IAcadPopupMenuPtr Add (
        _bstr_t MenuName );
    HRESULT InsertMenuInMenuBar (
        _bstr_t MenuName,
        const _variant_t & Index );
    HRESULT RemoveMenuFromMenuBar (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadPopupMenu * * pItem ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pEnumVariant ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * Count ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IAcadMenuGroup * * pParent ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR MenuName,
        struct IAcadPopupMenu * * pMenu ) = 0;
    virtual HRESULT __stdcall raw_InsertMenuInMenuBar (
        BSTR MenuName,
        VARIANT Index ) = 0;
    virtual HRESULT __stdcall raw_RemoveMenuFromMenuBar (
        VARIANT Index ) = 0;
};

struct __declspec(uuid("c64cb870-db03-4549-b3f4-4396417ea627"))
IAcadPopupMenu : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNameNoMnemonic))
    _bstr_t NameNoMnemonic;
    __declspec(property(get=GetShortcutMenu))
    VARIANT_BOOL ShortcutMenu;
    __declspec(property(get=GetOnMenuBar))
    VARIANT_BOOL OnMenuBar;
    __declspec(property(get=GetTagString))
    _bstr_t TagString;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadPopupMenuItemPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAcadApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    _bstr_t GetNameNoMnemonic ( );
    VARIANT_BOOL GetShortcutMenu ( );
    VARIANT_BOOL GetOnMenuBar ( );
    IAcadPopupMenuItemPtr AddMenuItem (
        const _variant_t & Index,
        _bstr_t Label,
        _bstr_t Macro );
    IAcadPopupMenuPtr AddSubMenu (
        const _variant_t & Index,
        _bstr_t Label );
    IAcadPopupMenuItemPtr AddSeparator (
        const _variant_t & Index );
    HRESULT InsertInMenuBar (
        const _variant_t & Index );
    HRESULT RemoveFromMenuBar ( );
    _bstr_t GetTagString ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadPopupMenuItem * * pItem ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pEnumVariant ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * Count ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * pParent ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR bstrName ) = 0;
    virtual HRESULT __stdcall get_NameNoMnemonic (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall get_ShortcutMenu (
        VARIANT_BOOL * bFlag ) = 0;
    virtual HRESULT __stdcall get_OnMenuBar (
        VARIANT_BOOL * bFlag ) = 0;
    virtual HRESULT __stdcall raw_AddMenuItem (
        VARIANT Index,
        BSTR Label,
        BSTR Macro,
        struct IAcadPopupMenuItem * * pItem ) = 0;
    virtual HRESULT __stdcall raw_AddSubMenu (
        VARIANT Index,
        BSTR Label,
        struct IAcadPopupMenu * * pMenu ) = 0;
    virtual HRESULT __stdcall raw_AddSeparator (
        VARIANT Index,
        struct IAcadPopupMenuItem * * pItem ) = 0;
    virtual HRESULT __stdcall raw_InsertInMenuBar (
        VARIANT Index ) = 0;
    virtual HRESULT __stdcall raw_RemoveFromMenuBar ( ) = 0;
    virtual HRESULT __stdcall get_TagString (
        BSTR * bstrTag ) = 0;
};

struct __declspec(uuid("6447e831-f8ba-41cd-af2c-045ad141f97e"))
IAcadPopupMenuItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetParent))
    IAcadPopupMenuPtr Parent;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetTagString,put=PutTagString))
    _bstr_t TagString;
    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetCheck,put=PutCheck))
    VARIANT_BOOL Check;
    __declspec(property(get=GetType))
    enum AcMenuItemType Type;
    __declspec(property(get=GetSubMenu))
    IAcadPopupMenuPtr SubMenu;
    __declspec(property(get=GetMacro,put=PutMacro))
    _bstr_t Macro;
    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetHelpString,put=PutHelpString))
    _bstr_t HelpString;
    __declspec(property(get=GetEndSubMenuLevel,put=PutEndSubMenuLevel))
    int EndSubMenuLevel;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    IAcadPopupMenuPtr GetParent ( );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t bstrLabel );
    _bstr_t GetTagString ( );
    void PutTagString (
        _bstr_t bstrTag );
    VARIANT_BOOL GetEnable ( );
    void PutEnable (
        VARIANT_BOOL bFlag );
    VARIANT_BOOL GetCheck ( );
    void PutCheck (
        VARIANT_BOOL bFlag );
    enum AcMenuItemType GetType ( );
    IAcadPopupMenuPtr GetSubMenu ( );
    _bstr_t GetMacro ( );
    void PutMacro (
        _bstr_t bstrMacro );
    int GetIndex ( );
    _bstr_t GetCaption ( );
    _bstr_t GetHelpString ( );
    void PutHelpString (
        _bstr_t bstrHelp );
    HRESULT Delete ( );
    int GetEndSubMenuLevel ( );
    void PutEndSubMenuLevel (
        int Level );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IAcadPopupMenu * * pParent ) = 0;
    virtual HRESULT __stdcall get_Label (
        BSTR * bstrLabel ) = 0;
    virtual HRESULT __stdcall put_Label (
        BSTR bstrLabel ) = 0;
    virtual HRESULT __stdcall get_TagString (
        BSTR * bstrTag ) = 0;
    virtual HRESULT __stdcall put_TagString (
        BSTR bstrTag ) = 0;
    virtual HRESULT __stdcall get_Enable (
        VARIANT_BOOL * bFlag ) = 0;
    virtual HRESULT __stdcall put_Enable (
        VARIANT_BOOL bFlag ) = 0;
    virtual HRESULT __stdcall get_Check (
        VARIANT_BOOL * bFlag ) = 0;
    virtual HRESULT __stdcall put_Check (
        VARIANT_BOOL bFlag ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum AcMenuItemType * itemType ) = 0;
    virtual HRESULT __stdcall get_SubMenu (
        struct IAcadPopupMenu * * pMenu ) = 0;
    virtual HRESULT __stdcall get_Macro (
        BSTR * bstrMacro ) = 0;
    virtual HRESULT __stdcall put_Macro (
        BSTR bstrMacro ) = 0;
    virtual HRESULT __stdcall get_Index (
        int * nIndex ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * bstrCaption ) = 0;
    virtual HRESULT __stdcall get_HelpString (
        BSTR * bstrHelp ) = 0;
    virtual HRESULT __stdcall put_HelpString (
        BSTR bstrHelp ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_EndSubMenuLevel (
        int * Level ) = 0;
    virtual HRESULT __stdcall put_EndSubMenuLevel (
        int Level ) = 0;
};

struct __declspec(uuid("0b3c9958-a3c0-4523-b2a2-f3d285b62efe"))
IAcadToolbars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetParent))
    IAcadMenuGroupPtr Parent;
    __declspec(property(get=GetLargeButtons,put=PutLargeButtons))
    VARIANT_BOOL LargeButtons;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadToolbarPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAcadApplicationPtr GetApplication ( );
    IAcadMenuGroupPtr GetParent ( );
    VARIANT_BOOL GetLargeButtons ( );
    void PutLargeButtons (
        VARIANT_BOOL bFlag );
    IAcadToolbarPtr Add (
        _bstr_t ToolbarName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadToolbar * * pItem ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pEnumVariant ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * Count ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IAcadMenuGroup * * pParent ) = 0;
    virtual HRESULT __stdcall get_LargeButtons (
        VARIANT_BOOL * bFlag ) = 0;
    virtual HRESULT __stdcall put_LargeButtons (
        VARIANT_BOOL bFlag ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR ToolbarName,
        struct IAcadToolbar * * pTlbar ) = 0;
};

struct __declspec(uuid("7ec1c9a4-87eb-48df-8099-5fd511b646df"))
IAcadToolbar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetDockStatus))
    enum AcToolbarDockStatus DockStatus;
    __declspec(property(get=GetLargeButtons))
    VARIANT_BOOL LargeButtons;
    __declspec(property(get=Getleft,put=Putleft))
    int left;
    __declspec(property(get=Gettop,put=Puttop))
    int top;
    __declspec(property(get=GetWidth))
    int Width;
    __declspec(property(get=GetHeight))
    int Height;
    __declspec(property(get=GetFloatingRows,put=PutFloatingRows))
    int FloatingRows;
    __declspec(property(get=GetHelpString,put=PutHelpString))
    _bstr_t HelpString;
    __declspec(property(get=GetTagString))
    _bstr_t TagString;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadToolbarItemPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAcadApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL bFlag );
    enum AcToolbarDockStatus GetDockStatus ( );
    VARIANT_BOOL GetLargeButtons ( );
    int Getleft ( );
    void Putleft (
        int nLeft );
    int Gettop ( );
    void Puttop (
        int nTop );
    int GetWidth ( );
    int GetHeight ( );
    int GetFloatingRows ( );
    void PutFloatingRows (
        int nRows );
    _bstr_t GetHelpString ( );
    void PutHelpString (
        _bstr_t bstrHelp );
    IAcadToolbarItemPtr AddToolbarButton (
        const _variant_t & Index,
        _bstr_t Name,
        _bstr_t HelpString,
        _bstr_t Macro,
        const _variant_t & FlyoutButton = vtMissing );
    IAcadToolbarItemPtr AddSeparator (
        const _variant_t & Index );
    HRESULT Dock (
        enum AcToolbarDockStatus Side );
    HRESULT Float (
        int top,
        int left,
        int NumberFloatRows );
    HRESULT Delete ( );
    _bstr_t GetTagString ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadToolbarItem * * pItem ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pEnumVariant ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * Count ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * pParent ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR bstrName ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * bFlag ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL bFlag ) = 0;
    virtual HRESULT __stdcall get_DockStatus (
        enum AcToolbarDockStatus * nStatus ) = 0;
    virtual HRESULT __stdcall get_LargeButtons (
        VARIANT_BOOL * bFlag ) = 0;
    virtual HRESULT __stdcall get_left (
        int * nLeft ) = 0;
    virtual HRESULT __stdcall put_left (
        int nLeft ) = 0;
    virtual HRESULT __stdcall get_top (
        int * nTop ) = 0;
    virtual HRESULT __stdcall put_top (
        int nTop ) = 0;
    virtual HRESULT __stdcall get_Width (
        int * nWidth ) = 0;
    virtual HRESULT __stdcall get_Height (
        int * nHeight ) = 0;
    virtual HRESULT __stdcall get_FloatingRows (
        int * nRows ) = 0;
    virtual HRESULT __stdcall put_FloatingRows (
        int nRows ) = 0;
    virtual HRESULT __stdcall get_HelpString (
        BSTR * bstrHelp ) = 0;
    virtual HRESULT __stdcall put_HelpString (
        BSTR bstrHelp ) = 0;
    virtual HRESULT __stdcall raw_AddToolbarButton (
        VARIANT Index,
        BSTR Name,
        BSTR HelpString,
        BSTR Macro,
        VARIANT FlyoutButton,
        struct IAcadToolbarItem * * pItem ) = 0;
    virtual HRESULT __stdcall raw_AddSeparator (
        VARIANT Index,
        struct IAcadToolbarItem * * pItem ) = 0;
    virtual HRESULT __stdcall raw_Dock (
        enum AcToolbarDockStatus Side ) = 0;
    virtual HRESULT __stdcall raw_Float (
        int top,
        int left,
        int NumberFloatRows ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_TagString (
        BSTR * bstrTag ) = 0;
};

struct __declspec(uuid("0a3454bb-4a39-423c-8568-7e76cebdc727"))
IAcadToolbarItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetParent))
    IAcadToolbarPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetTagString,put=PutTagString))
    _bstr_t TagString;
    __declspec(property(get=GetType))
    enum AcToolbarItemType Type;
    __declspec(property(get=GetFlyout))
    IAcadToolbarPtr Flyout;
    __declspec(property(get=GetMacro,put=PutMacro))
    _bstr_t Macro;
    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetHelpString,put=PutHelpString))
    _bstr_t HelpString;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    IAcadToolbarPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    _bstr_t GetTagString ( );
    void PutTagString (
        _bstr_t bstrTag );
    enum AcToolbarItemType GetType ( );
    IAcadToolbarPtr GetFlyout ( );
    _bstr_t GetMacro ( );
    void PutMacro (
        _bstr_t bstrMacro );
    int GetIndex ( );
    _bstr_t GetHelpString ( );
    void PutHelpString (
        _bstr_t bstrHelp );
    HRESULT GetBitmaps (
        BSTR * SmallIconName,
        BSTR * LargeIconName );
    HRESULT SetBitmaps (
        _bstr_t SmallIconName,
        _bstr_t LargeIconName );
    HRESULT AttachToolbarToFlyout (
        _bstr_t MenuGroupName,
        _bstr_t ToolbarName );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IAcadToolbar * * pParent ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR bstrName ) = 0;
    virtual HRESULT __stdcall get_TagString (
        BSTR * bstrTag ) = 0;
    virtual HRESULT __stdcall put_TagString (
        BSTR bstrTag ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum AcToolbarItemType * itemType ) = 0;
    virtual HRESULT __stdcall get_Flyout (
        struct IAcadToolbar * * pTlbar ) = 0;
    virtual HRESULT __stdcall get_Macro (
        BSTR * bstrMacro ) = 0;
    virtual HRESULT __stdcall put_Macro (
        BSTR bstrMacro ) = 0;
    virtual HRESULT __stdcall get_Index (
        int * nIndex ) = 0;
    virtual HRESULT __stdcall get_HelpString (
        BSTR * bstrHelp ) = 0;
    virtual HRESULT __stdcall put_HelpString (
        BSTR bstrHelp ) = 0;
    virtual HRESULT __stdcall raw_GetBitmaps (
        BSTR * SmallIconName,
        BSTR * LargeIconName ) = 0;
    virtual HRESULT __stdcall raw_SetBitmaps (
        BSTR SmallIconName,
        BSTR LargeIconName ) = 0;
    virtual HRESULT __stdcall raw_AttachToolbarToFlyout (
        BSTR MenuGroupName,
        BSTR ToolbarName ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("c53d139b-4341-4d8b-9283-5cac79a5b55f"))
IAcadMenuBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetParent))
    IAcadApplicationPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadPopupMenuPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAcadApplicationPtr GetApplication ( );
    IAcadApplicationPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadPopupMenu * * pItem ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pEnumVariant ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * Count ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IAcadApplication * * pParent ) = 0;
};

struct __declspec(uuid("ce3683c2-a49b-4ae7-ac30-e4968cc70ed4"))
IAcadDocuments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadDocumentPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAcadApplicationPtr GetApplication ( );
    IAcadDocumentPtr Add (
        const _variant_t & TemplateName = vtMissing );
    IAcadDocumentPtr Open (
        _bstr_t Name,
        const _variant_t & ReadOnly = vtMissing,
        const _variant_t & Password = vtMissing );
    HRESULT Close ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadDocument * * pItem ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pEnumVariant ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * Count ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT TemplateName,
        struct IAcadDocument * * pDispDoc ) = 0;
    virtual HRESULT __stdcall raw_Open (
        BSTR Name,
        VARIANT ReadOnly,
        VARIANT Password,
        struct IAcadDocument * * pDispDoc ) = 0;
    virtual HRESULT __stdcall raw_Close ( ) = 0;
};

struct __declspec(uuid("5e3e247a-4725-47c4-beed-0310f364de35"))
IAcadState : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetIsQuiescent))
    VARIANT_BOOL IsQuiescent;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    VARIANT_BOOL GetIsQuiescent ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall get_IsQuiescent (
        VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("6cd414b6-7119-426f-b8a0-000855af8d60"))
IAcadSelectionSets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadSelectionSetPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadApplicationPtr GetApplication ( );
    IAcadSelectionSetPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadSelectionSet * * pItem ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        struct IAcadSelectionSet * * pSet ) = 0;
};

struct __declspec(uuid("6729d2c8-e1af-4248-914d-f208a0e05e84"))
IAcadSelectionSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadEntityPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    _bstr_t GetName ( );
    HRESULT Highlight (
        VARIANT_BOOL bFlag );
    HRESULT Erase ( );
    HRESULT Update ( );
    IAcadApplicationPtr GetApplication ( );
    HRESULT AddItems (
        const _variant_t & pSelSet );
    HRESULT RemoveItems (
        const _variant_t & Objects );
    HRESULT Clear ( );
    HRESULT Select (
        enum AcSelect Mode,
        const _variant_t & Point1 = vtMissing,
        const _variant_t & Point2 = vtMissing,
        const _variant_t & FilterType = vtMissing,
        const _variant_t & FilterData = vtMissing );
    HRESULT SelectAtPoint (
        const _variant_t & Point,
        const _variant_t & FilterType = vtMissing,
        const _variant_t & FilterData = vtMissing );
    HRESULT SelectByPolygon (
        enum AcSelect Mode,
        const _variant_t & PointsList,
        const _variant_t & FilterType = vtMissing,
        const _variant_t & FilterData = vtMissing );
    HRESULT SelectOnScreen (
        const _variant_t & FilterType = vtMissing,
        const _variant_t & FilterData = vtMissing );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct IAcadEntity * * pEntity ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * pVal ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * bstrName ) = 0;
    virtual HRESULT __stdcall raw_Highlight (
        VARIANT_BOOL bFlag ) = 0;
    virtual HRESULT __stdcall raw_Erase ( ) = 0;
    virtual HRESULT __stdcall raw_Update ( ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct IAcadApplication * * pAppObj ) = 0;
    virtual HRESULT __stdcall raw_AddItems (
        VARIANT pSelSet ) = 0;
    virtual HRESULT __stdcall raw_RemoveItems (
        VARIANT Objects ) = 0;
    virtual HRESULT __stdcall raw_Clear ( ) = 0;
    virtual HRESULT __stdcall raw_Select (
        enum AcSelect Mode,
        VARIANT Point1 = vtMissing,
        VARIANT Point2 = vtMissing,
        VARIANT FilterType = vtMissing,
        VARIANT FilterData = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SelectAtPoint (
        VARIANT Point,
        VARIANT FilterType = vtMissing,
        VARIANT FilterData = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SelectByPolygon (
        enum AcSelect Mode,
        VARIANT PointsList,
        VARIANT FilterType = vtMissing,
        VARIANT FilterData = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SelectOnScreen (
        VARIANT FilterType = vtMissing,
        VARIANT FilterData = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("a6d2cc96-062c-408f-b879-550ccaa81079"))
IAcadUtility : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    double AngleToReal (
        _bstr_t Angle,
        enum AcAngleUnits Unit );
    _bstr_t AngleToString (
        double Angle,
        enum AcAngleUnits Unit,
        int precision );
    double DistanceToReal (
        _bstr_t Distance,
        enum AcUnits Unit );
    _bstr_t RealToString (
        double Value,
        enum AcUnits Unit,
        int precision );
    _variant_t TranslateCoordinates (
        const _variant_t & Point,
        enum AcCoordinateSystem FromCoordSystem,
        enum AcCoordinateSystem ToCoordSystem,
        int Displacement,
        const _variant_t & OCSNormal = vtMissing );
    HRESULT InitializeUserInput (
        int Bits,
        const _variant_t & KeyWordList = vtMissing );
    int GetInteger (
        const _variant_t & Prompt = vtMissing );
    double GetReal (
        const _variant_t & Prompt = vtMissing );
    _bstr_t GetInput ( );
    _bstr_t GetKeyword (
        const _variant_t & Prompt = vtMissing );
    _bstr_t GetString (
        int HasSpaces,
        const _variant_t & Prompt = vtMissing );
    double GetAngle (
        const _variant_t & Point = vtMissing,
        const _variant_t & Prompt = vtMissing );
    double AngleFromXAxis (
        const _variant_t & StartPoint,
        const _variant_t & EndPoint );
    _variant_t GetCorner (
        const _variant_t & Point,
        const _variant_t & Prompt = vtMissing );
    double GetDistance (
        const _variant_t & Point = vtMissing,
        const _variant_t & Prompt = vtMissing );
    double GetOrientation (
        const _variant_t & Point = vtMissing,
        const _variant_t & Prompt = vtMissing );
    _variant_t GetPoint (
        const _variant_t & Point = vtMissing,
        const _variant_t & Prompt = vtMissing );
    _variant_t PolarPoint (
        const _variant_t & Point,
        double Angle,
        double Distance );
    HRESULT CreateTypedArray (
        VARIANT * varArr,
        int Type,
        SAFEARRAY * inArgs );
    HRESULT GetEntity (
        IDispatch * * Object,
        VARIANT * PickedPoint,
        const _variant_t & Prompt = vtMissing );
    HRESULT Prompt (
        _bstr_t Message );
    HRESULT GetSubEntity (
        IDispatch * * Object,
        VARIANT * PickedPoint,
        VARIANT * transMatrix,
        VARIANT * ContextData,
        const _variant_t & Prompt = vtMissing );
    VARIANT_BOOL IsURL (
        _bstr_t URL );
    HRESULT GetRemoteFile (
        _bstr_t URL,
        BSTR * LocalFile,
        VARIANT_BOOL IgnoreCache );
    HRESULT PutRemoteFile (
        _bstr_t URL,
        _bstr_t LocalFile );
    VARIANT_BOOL IsRemoteFile (
        _bstr_t LocalFile,
        BSTR * URL );
    VARIANT_BOOL LaunchBrowserDialog (
        BSTR * SelectedURL,
        _bstr_t DialogTitle,
        _bstr_t OpenButtonCaption,
        _bstr_t StartPageURL,
        _bstr_t RegistryRootKey,
        VARIANT_BOOL OpenButtonAlwaysEnabled );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_AngleToReal (
        BSTR Angle,
        enum AcAngleUnits Unit,
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_AngleToString (
        double Angle,
        enum AcAngleUnits Unit,
        int precision,
        BSTR * bstrValue ) = 0;
    virtual HRESULT __stdcall raw_DistanceToReal (
        BSTR Distance,
        enum AcUnits Unit,
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_RealToString (
        double Value,
        enum AcUnits Unit,
        int precision,
        BSTR * bstrValue ) = 0;
    virtual HRESULT __stdcall raw_TranslateCoordinates (
        VARIANT Point,
        enum AcCoordinateSystem FromCoordSystem,
        enum AcCoordinateSystem ToCoordSystem,
        int Displacement,
        VARIANT OCSNormal,
        VARIANT * transPt ) = 0;
    virtual HRESULT __stdcall raw_InitializeUserInput (
        int Bits,
        VARIANT KeyWordList = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_GetInteger (
        VARIANT Prompt,
        int * Value ) = 0;
    virtual HRESULT __stdcall raw_GetReal (
        VARIANT Prompt,
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_GetInput (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetKeyword (
        VARIANT Prompt,
        BSTR * bstrKeyword ) = 0;
    virtual HRESULT __stdcall raw_GetString (
        int HasSpaces,
        VARIANT Prompt,
        BSTR * bstrValue ) = 0;
    virtual HRESULT __stdcall raw_GetAngle (
        VARIANT Point,
        VARIANT Prompt,
        double * Angle ) = 0;
    virtual HRESULT __stdcall raw_AngleFromXAxis (
        VARIANT StartPoint,
        VARIANT EndPoint,
        double * Angle ) = 0;
    virtual HRESULT __stdcall raw_GetCorner (
        VARIANT Point,
        VARIANT Prompt,
        VARIANT * corner ) = 0;
    virtual HRESULT __stdcall raw_GetDistance (
        VARIANT Point,
        VARIANT Prompt,
        double * dist ) = 0;
    virtual HRESULT __stdcall raw_GetOrientation (
        VARIANT Point,
        VARIANT Prompt,
        double * Angle ) = 0;
    virtual HRESULT __stdcall raw_GetPoint (
        VARIANT Point,
        VARIANT Prompt,
        VARIANT * inputPoint ) = 0;
    virtual HRESULT __stdcall raw_PolarPoint (
        VARIANT Point,
        double Angle,
        double Distance,
        VARIANT * inputPoint ) = 0;
    virtual HRESULT __stdcall raw_CreateTypedArray (
        VARIANT * varArr,
        int Type,
        SAFEARRAY * inArgs ) = 0;
    virtual HRESULT __stdcall raw_GetEntity (
        IDispatch * * Object,
        VARIANT * PickedPoint,
        VARIANT Prompt = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Prompt (
        BSTR Message ) = 0;
    virtual HRESULT __stdcall raw_GetSubEntity (
        IDispatch * * Object,
        VARIANT * PickedPoint,
        VARIANT * transMatrix,
        VARIANT * ContextData,
        VARIANT Prompt = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_IsURL (
        BSTR URL,
        VARIANT_BOOL * IsValidURL ) = 0;
    virtual HRESULT __stdcall raw_GetRemoteFile (
        BSTR URL,
        BSTR * LocalFile,
        VARIANT_BOOL IgnoreCache ) = 0;
    virtual HRESULT __stdcall raw_PutRemoteFile (
        BSTR URL,
        BSTR LocalFile ) = 0;
    virtual HRESULT __stdcall raw_IsRemoteFile (
        BSTR LocalFile,
        BSTR * URL,
        VARIANT_BOOL * IsDownloadedFile ) = 0;
    virtual HRESULT __stdcall raw_LaunchBrowserDialog (
        BSTR * SelectedURL,
        BSTR DialogTitle,
        BSTR OpenButtonCaption,
        BSTR StartPageURL,
        BSTR RegistryRootKey,
        VARIANT_BOOL OpenButtonAlwaysEnabled,
        VARIANT_BOOL * success ) = 0;
};

struct __declspec(uuid("e5ff1e45-95fd-4962-ae46-862f96c59e81"))
AcadState;
    // [ default ] interface IAcadState

struct __declspec(uuid("1365a45f-0c8f-4806-a26a-6b22ad37ec66"))
AcadApplication;
    // [ default ] interface IAcadApplication
    // [ default, source ] dispinterface _DAcadApplicationEvents

struct __declspec(uuid("69226387-006e-4f81-92e0-9d5042089902"))
AcadSelectionSet;
    // [ default ] interface IAcadSelectionSet

struct __declspec(uuid("1f065f74-609e-460f-8461-16228ecff0da"))
AcadSelectionSets;
    // [ default ] interface IAcadSelectionSets

struct __declspec(uuid("fd909d8c-d913-4a44-aad9-07f2f10fc072"))
AcadPlot;
    // [ default ] interface IAcadPlot

struct __declspec(uuid("343a9c6f-82fb-45cd-8ed1-efa16db9c39f"))
AcadPreferences;
    // [ default ] interface IAcadPreferences

struct __declspec(uuid("62bb157e-1a64-408c-9566-5570d7b25b15"))
AcadPreferencesDrafting;
    // [ default ] interface IAcadPreferencesDrafting

struct __declspec(uuid("bb9e6a02-ba0c-4d48-98c5-8b1270af7464"))
AcadPreferencesDisplay;
    // [ default ] interface IAcadPreferencesDisplay

struct __declspec(uuid("81e62952-ab74-4b32-9c54-de1378b96e5b"))
AcadPreferencesFiles;
    // [ default ] interface IAcadPreferencesFiles

struct __declspec(uuid("988e3e1f-aac3-4e30-8845-2072e2483364"))
AcadPreferencesOpenSave;
    // [ default ] interface IAcadPreferencesOpenSave

struct __declspec(uuid("ff0cebe1-23ab-423b-bd18-e50327165ce6"))
AcadPreferencesOutput;
    // [ default ] interface IAcadPreferencesOutput

struct __declspec(uuid("3b44049a-26b1-42bc-a201-bb7d9e8d54a3"))
AcadPreferencesProfiles;
    // [ default ] interface IAcadPreferencesProfiles

struct __declspec(uuid("99fcbd46-a4d7-4b06-a172-ff62ae6543ee"))
AcadPreferencesSelection;
    // [ default ] interface IAcadPreferencesSelection

struct __declspec(uuid("98943ac6-d43d-4fae-8962-5bf70f5e0c72"))
AcadPreferencesSystem;
    // [ default ] interface IAcadPreferencesSystem

struct __declspec(uuid("7dc8b958-845b-41f0-9998-6ebf745f44ce"))
AcadPreferencesUser;
    // [ default ] interface IAcadPreferencesUser

struct __declspec(uuid("8e3a9f43-f872-48cb-9988-e29bbb9e153a"))
AcadMenuGroups;
    // [ default ] interface IAcadMenuGroups

struct __declspec(uuid("7593a904-1c91-49f3-917e-f40f6389bce9"))
AcadMenuGroup;
    // [ default ] interface IAcadMenuGroup

struct __declspec(uuid("5490a27b-37e3-417d-946e-200e98f6fd0b"))
AcadMenuBar;
    // [ default ] interface IAcadMenuBar

struct __declspec(uuid("152c21e1-5bb5-4d1e-8533-9b2229a32c0c"))
AcadPopupMenus;
    // [ default ] interface IAcadPopupMenus

struct __declspec(uuid("ec0f65d8-f9ce-4228-a99c-9c631319c052"))
AcadPopupMenu;
    // [ default ] interface IAcadPopupMenu

struct __declspec(uuid("2c857b8d-c28c-4430-8e6d-e6922c5af1c8"))
AcadPopupMenuItem;
    // [ default ] interface IAcadPopupMenuItem

struct __declspec(uuid("115679d5-578c-49d5-8c57-ecb171895a4e"))
AcadUtility;
    // [ default ] interface IAcadUtility

struct __declspec(uuid("034cec0a-dc29-4bd9-b142-7822a1d26b0f"))
_DAcadDocumentEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeginSave (
        _bstr_t FileName );
    HRESULT EndSave (
        _bstr_t FileName );
    HRESULT BeginCommand (
        _bstr_t CommandName );
    HRESULT EndCommand (
        _bstr_t CommandName );
    HRESULT BeginLisp (
        _bstr_t FirstLine );
    HRESULT EndLisp ( );
    HRESULT LispCancelled ( );
    HRESULT SelectionChanged ( );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT BeginRightClick (
        const _variant_t & PickPoint );
    HRESULT BeginShortcutMenuDefault (
        struct IAcadPopupMenu * * ShortcutMenu );
    HRESULT BeginShortcutMenuEdit (
        struct IAcadPopupMenu * * ShortcutMenu,
        struct IAcadSelectionSet * * SelectionSet );
    HRESULT BeginShortcutMenuCommand (
        struct IAcadPopupMenu * * ShortcutMenu,
        _bstr_t Command );
    HRESULT BeginShortcutMenuGrip (
        struct IAcadPopupMenu * * ShortcutMenu );
    HRESULT BeginShortcutMenuOsnap (
        struct IAcadPopupMenu * * ShortcutMenu );
    HRESULT EndShortcutMenu (
        struct IAcadPopupMenu * * ShortcutMenu );
    HRESULT BeginDoubleClick (
        const _variant_t & PickPoint );
    HRESULT ObjectAdded (
        IDispatch * Object );
    HRESULT ObjectErased (
        long ObjectID );
    HRESULT ObjectModified (
        IDispatch * Object );
    HRESULT BeginPlot (
        _bstr_t DrawingName );
    HRESULT EndPlot (
        _bstr_t DrawingName );
    HRESULT WindowMovedOrResized (
        long HWNDFrame,
        VARIANT_BOOL bMoved );
    HRESULT LayoutSwitched (
        _bstr_t LayoutName );
    HRESULT WindowChanged (
        enum AcWindowState WindowState );
    HRESULT BeginClose ( );
};

struct __declspec(uuid("8e75d913-3d21-11d2-85c4-080009a0c626"))
AcadDocument;
    // [ default ] interface IAcadDocument
    // [ default, source ] dispinterface _DAcadDocumentEvents

struct __declspec(uuid("6f0e5a1c-0a6c-4e3a-bfdc-516c4b1b8532"))
AcadDocuments;
    // [ default ] interface IAcadDocuments

struct __declspec(uuid("29cbe431-930b-482c-9adc-b77fe2f16e00"))
AcadToolbars;
    // [ default ] interface IAcadToolbars

struct __declspec(uuid("40fadba3-966b-4042-b96d-a10b8a4a8e6f"))
AcadToolbar;
    // [ default ] interface IAcadToolbar

struct __declspec(uuid("d0957bfb-533e-4598-bd0f-714ba83118cf"))
AcadToolbarItem;
    // [ default ] interface IAcadToolbarItem

//
// Function implementation mapping
//

#pragma start_map_region("acax16enu.tli")
__declspec(implementation_key(1)) _bstr_t IAcadObject::GetHandle ( );
__declspec(implementation_key(2)) _bstr_t IAcadObject::GetObjectName ( );
__declspec(implementation_key(3)) HRESULT IAcadObject::GetXData ( _bstr_t AppName, VARIANT * XDataType, VARIANT * XDataValue );
__declspec(implementation_key(4)) HRESULT IAcadObject::SetXData ( const _variant_t & XDataType, const _variant_t & XDataValue );
__declspec(implementation_key(5)) HRESULT IAcadObject::Delete ( );
__declspec(implementation_key(6)) long IAcadObject::GetObjectID ( );
__declspec(implementation_key(7)) IDispatchPtr IAcadObject::GetApplication ( );
__declspec(implementation_key(8)) IAcadDatabasePtr IAcadObject::GetDatabase ( );
__declspec(implementation_key(9)) VARIANT_BOOL IAcadObject::GetHasExtensionDictionary ( );
__declspec(implementation_key(10)) IAcadDictionaryPtr IAcadObject::GetExtensionDictionary ( );
__declspec(implementation_key(11)) long IAcadObject::GetOwnerID ( );
__declspec(implementation_key(12)) IDispatchPtr IAcadObject::GetDocument ( );
__declspec(implementation_key(13)) HRESULT IAcadObject::Erase ( );
__declspec(implementation_key(14)) IAcadModelSpacePtr IAcadDatabase::GetModelSpace ( );
__declspec(implementation_key(15)) IAcadPaperSpacePtr IAcadDatabase::GetPaperSpace ( );
__declspec(implementation_key(16)) IAcadBlocksPtr IAcadDatabase::GetBlocks ( );
__declspec(implementation_key(17)) _variant_t IAcadDatabase::CopyObjects ( const _variant_t & Objects, const _variant_t & Owner, VARIANT * IdPairs );
__declspec(implementation_key(18)) IAcadGroupsPtr IAcadDatabase::GetGroups ( );
__declspec(implementation_key(19)) IAcadDimStylesPtr IAcadDatabase::GetDimStyles ( );
__declspec(implementation_key(20)) IAcadLayersPtr IAcadDatabase::GetLayers ( );
__declspec(implementation_key(21)) IAcadLineTypesPtr IAcadDatabase::GetLinetypes ( );
__declspec(implementation_key(22)) IAcadDictionariesPtr IAcadDatabase::GetDictionaries ( );
__declspec(implementation_key(23)) IAcadRegisteredApplicationsPtr IAcadDatabase::GetRegisteredApplications ( );
__declspec(implementation_key(24)) IAcadTextStylesPtr IAcadDatabase::GetTextStyles ( );
__declspec(implementation_key(25)) IAcadUCSsPtr IAcadDatabase::GetUserCoordinateSystems ( );
__declspec(implementation_key(26)) IAcadViewsPtr IAcadDatabase::GetViews ( );
__declspec(implementation_key(27)) IAcadViewportsPtr IAcadDatabase::GetViewports ( );
__declspec(implementation_key(28)) double IAcadDatabase::GetElevationModelSpace ( );
__declspec(implementation_key(29)) void IAcadDatabase::PutElevationModelSpace ( double Elevation );
__declspec(implementation_key(30)) double IAcadDatabase::GetElevationPaperSpace ( );
__declspec(implementation_key(31)) void IAcadDatabase::PutElevationPaperSpace ( double Elevation );
__declspec(implementation_key(32)) _variant_t IAcadDatabase::GetLimits ( );
__declspec(implementation_key(33)) void IAcadDatabase::PutLimits ( const _variant_t & Limits );
__declspec(implementation_key(34)) IDispatchPtr IAcadDatabase::HandleToObject ( _bstr_t Handle );
__declspec(implementation_key(35)) IDispatchPtr IAcadDatabase::ObjectIdToObject ( long ObjectID );
__declspec(implementation_key(36)) IAcadLayoutsPtr IAcadDatabase::GetLayouts ( );
__declspec(implementation_key(37)) IAcadPlotConfigurationsPtr IAcadDatabase::GetPlotConfigurations ( );
__declspec(implementation_key(38)) IAcadDatabasePreferencesPtr IAcadDatabase::GetPreferences ( );
__declspec(implementation_key(39)) IAcadFileDependenciesPtr IAcadDatabase::GetFileDependencies ( );
__declspec(implementation_key(40)) IAcadSummaryInfoPtr IAcadDatabase::GetSummaryInfo ( );
__declspec(implementation_key(41)) IAcadEntityPtr IAcadBlock::Item ( const _variant_t & Index );
__declspec(implementation_key(42)) IUnknownPtr IAcadBlock::Get_NewEnum ( );
__declspec(implementation_key(43)) long IAcadBlock::GetCount ( );
__declspec(implementation_key(44)) _bstr_t IAcadBlock::GetName ( );
__declspec(implementation_key(45)) void IAcadBlock::PutName ( _bstr_t bstrName );
__declspec(implementation_key(46)) _variant_t IAcadBlock::GetOrigin ( );
__declspec(implementation_key(47)) void IAcadBlock::PutOrigin ( const _variant_t & Origin );
__declspec(implementation_key(48)) IDispatchPtr IAcadBlock::AddCustomObject ( _bstr_t ClassName );
__declspec(implementation_key(49)) IAcad3DFacePtr IAcadBlock::Add3DFace ( const _variant_t & Point1, const _variant_t & Point2, const _variant_t & point3, const _variant_t & Point4 );
__declspec(implementation_key(50)) IAcadPolygonMeshPtr IAcadBlock::Add3DMesh ( int M, int N, const _variant_t & PointsMatrix );
__declspec(implementation_key(51)) IAcad3DPolylinePtr IAcadBlock::Add3DPoly ( const _variant_t & PointsArray );
__declspec(implementation_key(52)) IAcadArcPtr IAcadBlock::AddArc ( const _variant_t & Center, double Radius, double StartAngle, double EndAngle );
__declspec(implementation_key(53)) IAcadAttributePtr IAcadBlock::AddAttribute ( double Height, enum AcAttributeMode Mode, _bstr_t Prompt, const _variant_t & InsertionPoint, _bstr_t Tag, _bstr_t Value );
__declspec(implementation_key(54)) IAcad3DSolidPtr IAcadBlock::AddBox ( const _variant_t & Origin, double Length, double Width, double Height );
__declspec(implementation_key(55)) IAcadCirclePtr IAcadBlock::AddCircle ( const _variant_t & Center, double Radius );
__declspec(implementation_key(56)) IAcad3DSolidPtr IAcadBlock::AddCone ( const _variant_t & Center, double BaseRadius, double Height );
__declspec(implementation_key(57)) IAcad3DSolidPtr IAcadBlock::AddCylinder ( const _variant_t & Center, double Radius, double Height );
__declspec(implementation_key(58)) IAcadDimAlignedPtr IAcadBlock::AddDimAligned ( const _variant_t & ExtLine1Point, const _variant_t & ExtLine2Point, const _variant_t & TextPosition );
__declspec(implementation_key(59)) IAcadDimAngularPtr IAcadBlock::AddDimAngular ( const _variant_t & AngleVertex, const _variant_t & FirstEndPoint, const _variant_t & SecondEndPoint, const _variant_t & TextPoint );
__declspec(implementation_key(60)) IAcadDimDiametricPtr IAcadBlock::AddDimDiametric ( const _variant_t & ChordPoint, const _variant_t & FarChordPoint, double LeaderLength );
__declspec(implementation_key(61)) IAcadDimRotatedPtr IAcadBlock::AddDimRotated ( const _variant_t & ExtLine1Point, const _variant_t & ExtLine2Point, const _variant_t & DimLineLocation, double RotationAngle );
__declspec(implementation_key(62)) IAcadDimOrdinatePtr IAcadBlock::AddDimOrdinate ( const _variant_t & DefinitionPoint, const _variant_t & LeaderEndPoint, int UseXAxis );
__declspec(implementation_key(63)) IAcadDimRadialPtr IAcadBlock::AddDimRadial ( const _variant_t & Center, const _variant_t & ChordPoint, double LeaderLength );
__declspec(implementation_key(64)) IAcadEllipsePtr IAcadBlock::AddEllipse ( const _variant_t & Center, const _variant_t & MajorAxis, double RadiusRatio );
__declspec(implementation_key(65)) IAcad3DSolidPtr IAcadBlock::AddEllipticalCone ( const _variant_t & Center, double MajorRadius, double MinorRadius, double Height );
__declspec(implementation_key(66)) IAcad3DSolidPtr IAcadBlock::AddEllipticalCylinder ( const _variant_t & Center, double MajorRadius, double MinorRadius, double Height );
__declspec(implementation_key(67)) IAcad3DSolidPtr IAcadBlock::AddExtrudedSolid ( struct IAcadRegion * Profile, double Height, double TaperAngle );
__declspec(implementation_key(68)) IAcad3DSolidPtr IAcadBlock::AddExtrudedSolidAlongPath ( struct IAcadRegion * Profile, IDispatch * Path );
__declspec(implementation_key(69)) IAcadLeaderPtr IAcadBlock::AddLeader ( const _variant_t & PointsArray, struct IAcadEntity * Annotation, enum AcLeaderType Type );
__declspec(implementation_key(70)) IAcadMTextPtr IAcadBlock::AddMText ( const _variant_t & InsertionPoint, double Width, _bstr_t Text );
__declspec(implementation_key(71)) IAcadPointPtr IAcadBlock::AddPoint ( const _variant_t & Point );
__declspec(implementation_key(72)) IAcadLWPolylinePtr IAcadBlock::AddLightWeightPolyline ( const _variant_t & VerticesList );
__declspec(implementation_key(73)) IAcadPolylinePtr IAcadBlock::AddPolyline ( const _variant_t & VerticesList );
__declspec(implementation_key(74)) IAcadRayPtr IAcadBlock::AddRay ( const _variant_t & Point1, const _variant_t & Point2 );
__declspec(implementation_key(75)) _variant_t IAcadBlock::AddRegion ( const _variant_t & ObjectList );
__declspec(implementation_key(76)) IAcad3DSolidPtr IAcadBlock::AddRevolvedSolid ( struct IAcadRegion * Profile, const _variant_t & AxisPoint, const _variant_t & AxisDir, double Angle );
__declspec(implementation_key(77)) IAcadShapePtr IAcadBlock::AddShape ( _bstr_t Name, const _variant_t & InsertionPoint, double ScaleFactor, double RotationAngle );
__declspec(implementation_key(78)) IAcadSolidPtr IAcadBlock::AddSolid ( const _variant_t & Point1, const _variant_t & Point2, const _variant_t & point3, const _variant_t & Point4 );
__declspec(implementation_key(79)) IAcad3DSolidPtr IAcadBlock::AddSphere ( const _variant_t & Center, double Radius );
__declspec(implementation_key(80)) IAcadSplinePtr IAcadBlock::AddSpline ( const _variant_t & PointsArray, const _variant_t & StartTangent, const _variant_t & EndTangent );
__declspec(implementation_key(81)) IAcadTextPtr IAcadBlock::AddText ( _bstr_t TextString, const _variant_t & InsertionPoint, double Height );
__declspec(implementation_key(82)) IAcadTolerancePtr IAcadBlock::AddTolerance ( _bstr_t Text, const _variant_t & InsertionPoint, const _variant_t & Direction );
__declspec(implementation_key(83)) IAcad3DSolidPtr IAcadBlock::AddTorus ( const _variant_t & Center, double TorusRadius, double TubeRadius );
__declspec(implementation_key(84)) IAcadTracePtr IAcadBlock::AddTrace ( const _variant_t & PointsArray );
__declspec(implementation_key(85)) IAcad3DSolidPtr IAcadBlock::AddWedge ( const _variant_t & Center, double Length, double Width, double Height );
__declspec(implementation_key(86)) IAcadXlinePtr IAcadBlock::AddXline ( const _variant_t & Point1, const _variant_t & Point2 );
__declspec(implementation_key(87)) IAcadBlockReferencePtr IAcadBlock::InsertBlock ( const _variant_t & InsertionPoint, _bstr_t Name, double Xscale, double Yscale, double Zscale, double Rotation, const _variant_t & Password );
__declspec(implementation_key(88)) IAcadHatchPtr IAcadBlock::AddHatch ( int PatternType, _bstr_t PatternName, VARIANT_BOOL Associativity, const _variant_t & HatchObjectType );
__declspec(implementation_key(89)) IAcadRasterImagePtr IAcadBlock::AddRaster ( _bstr_t imageFileName, const _variant_t & InsertionPoint, double ScaleFactor, double RotationAngle );
__declspec(implementation_key(90)) IAcadLinePtr IAcadBlock::AddLine ( const _variant_t & StartPoint, const _variant_t & EndPoint );
__declspec(implementation_key(91)) VARIANT_BOOL IAcadBlock::GetIsLayout ( );
__declspec(implementation_key(92)) IAcadLayoutPtr IAcadBlock::GetLayout ( );
__declspec(implementation_key(93)) VARIANT_BOOL IAcadBlock::GetIsXRef ( );
__declspec(implementation_key(94)) IAcadMInsertBlockPtr IAcadBlock::AddMInsertBlock ( const _variant_t & InsertionPoint, _bstr_t Name, double Xscale, double Yscale, double Zscale, double Rotation, long NumRows, long NumColumns, long RowSpacing, long ColumnSpacing, const _variant_t & Password );
__declspec(implementation_key(95)) IAcadPolyfaceMeshPtr IAcadBlock::AddPolyfaceMesh ( const _variant_t & VertexList, const _variant_t & FaceList );
__declspec(implementation_key(96)) IAcadMLinePtr IAcadBlock::AddMLine ( const _variant_t & VertexList );
__declspec(implementation_key(97)) IAcadDim3PointAngularPtr IAcadBlock::AddDim3PointAngular ( const _variant_t & AngleVertex, const _variant_t & FirstEndPoint, const _variant_t & SecondEndPoint, const _variant_t & TextPoint );
__declspec(implementation_key(98)) IAcadDatabasePtr IAcadBlock::GetXRefDatabase ( );
__declspec(implementation_key(99)) IAcadExternalReferencePtr IAcadBlock::AttachExternalReference ( _bstr_t PathName, _bstr_t Name, const _variant_t & InsertionPoint, double Xscale, double Yscale, double Zscale, double Rotation, VARIANT_BOOL bOverlay, const _variant_t & Password );
__declspec(implementation_key(100)) HRESULT IAcadBlock::Unload ( );
__declspec(implementation_key(101)) HRESULT IAcadBlock::Reload ( );
__declspec(implementation_key(102)) HRESULT IAcadBlock::Bind ( VARIANT_BOOL bPrefixName );
__declspec(implementation_key(103)) HRESULT IAcadBlock::Detach ( );
__declspec(implementation_key(104)) IAcadAcCmColorPtr IAcadEntity::GetTrueColor ( );
__declspec(implementation_key(105)) void IAcadEntity::PutTrueColor ( struct IAcadAcCmColor * pColor );
__declspec(implementation_key(106)) _bstr_t IAcadEntity::GetLayer ( );
__declspec(implementation_key(107)) void IAcadEntity::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(108)) _bstr_t IAcadEntity::GetLinetype ( );
__declspec(implementation_key(109)) void IAcadEntity::PutLinetype ( _bstr_t Linetype );
__declspec(implementation_key(110)) ACAD_NOUNITS IAcadEntity::GetLinetypeScale ( );
__declspec(implementation_key(111)) void IAcadEntity::PutLinetypeScale ( ACAD_NOUNITS ltScale );
__declspec(implementation_key(112)) VARIANT_BOOL IAcadEntity::GetVisible ( );
__declspec(implementation_key(113)) void IAcadEntity::PutVisible ( VARIANT_BOOL bVisible );
__declspec(implementation_key(114)) _variant_t IAcadEntity::ArrayPolar ( int NumberOfObjects, double AngleToFill, const _variant_t & CenterPoint );
__declspec(implementation_key(115)) _variant_t IAcadEntity::ArrayRectangular ( int NumberOfRows, int NumberOfColumns, int NumberOfLevels, double DistBetweenRows, double DistBetweenCols, double DistBetweenLevels );
__declspec(implementation_key(116)) HRESULT IAcadEntity::Highlight ( VARIANT_BOOL HighlightFlag );
__declspec(implementation_key(117)) IDispatchPtr IAcadEntity::Copy ( );
__declspec(implementation_key(118)) HRESULT IAcadEntity::Move ( const _variant_t & FromPoint, const _variant_t & ToPoint );
__declspec(implementation_key(119)) HRESULT IAcadEntity::Rotate ( const _variant_t & BasePoint, double RotationAngle );
__declspec(implementation_key(120)) HRESULT IAcadEntity::Rotate3D ( const _variant_t & Point1, const _variant_t & Point2, double RotationAngle );
__declspec(implementation_key(121)) IDispatchPtr IAcadEntity::Mirror ( const _variant_t & Point1, const _variant_t & Point2 );
__declspec(implementation_key(122)) IDispatchPtr IAcadEntity::Mirror3D ( const _variant_t & Point1, const _variant_t & Point2, const _variant_t & point3 );
__declspec(implementation_key(123)) HRESULT IAcadEntity::ScaleEntity ( const _variant_t & BasePoint, double ScaleFactor );
__declspec(implementation_key(124)) HRESULT IAcadEntity::TransformBy ( const _variant_t & TransformationMatrix );
__declspec(implementation_key(125)) HRESULT IAcadEntity::Update ( );
__declspec(implementation_key(126)) HRESULT IAcadEntity::GetBoundingBox ( VARIANT * MinPoint, VARIANT * MaxPoint );
__declspec(implementation_key(127)) _variant_t IAcadEntity::IntersectWith ( IDispatch * IntersectObject, enum AcExtendOption option );
__declspec(implementation_key(128)) _bstr_t IAcadEntity::GetPlotStyleName ( );
__declspec(implementation_key(129)) void IAcadEntity::PutPlotStyleName ( _bstr_t plotStyle );
__declspec(implementation_key(130)) ACAD_LWEIGHT IAcadEntity::GetLineweight ( );
__declspec(implementation_key(131)) void IAcadEntity::PutLineweight ( ACAD_LWEIGHT Lineweight );
__declspec(implementation_key(132)) IAcadHyperlinksPtr IAcadEntity::GetHyperlinks ( );
__declspec(implementation_key(133)) _bstr_t IAcadEntity::GetEntityName ( );
__declspec(implementation_key(134)) long IAcadEntity::GetEntityType ( );
__declspec(implementation_key(135)) ACAD_COLOR IAcadEntity::Getcolor ( );
__declspec(implementation_key(136)) void IAcadEntity::Putcolor ( ACAD_COLOR color );
__declspec(implementation_key(137)) void IAcadAcCmColor::PutEntityColor ( long eColor );
__declspec(implementation_key(138)) long IAcadAcCmColor::GetEntityColor ( );
__declspec(implementation_key(139)) _bstr_t IAcadAcCmColor::GetColorName ( );
__declspec(implementation_key(140)) _bstr_t IAcadAcCmColor::GetBookName ( );
__declspec(implementation_key(141)) HRESULT IAcadAcCmColor::SetNames ( _bstr_t ColorName, _bstr_t BookName );
__declspec(implementation_key(142)) HRESULT IAcadAcCmColor::Delete ( );
__declspec(implementation_key(143)) long IAcadAcCmColor::GetRed ( );
__declspec(implementation_key(144)) long IAcadAcCmColor::GetBlue ( );
__declspec(implementation_key(145)) long IAcadAcCmColor::GetGreen ( );
__declspec(implementation_key(146)) HRESULT IAcadAcCmColor::SetRGB ( long Red, long Green, long Blue );
__declspec(implementation_key(147)) void IAcadAcCmColor::PutColorMethod ( enum AcColorMethod Flags );
__declspec(implementation_key(148)) enum AcColorMethod IAcadAcCmColor::GetColorMethod ( );
__declspec(implementation_key(149)) enum AcColor IAcadAcCmColor::GetColorIndex ( );
__declspec(implementation_key(150)) void IAcadAcCmColor::PutColorIndex ( enum AcColor color );
__declspec(implementation_key(151)) HRESULT IAcadAcCmColor::SetColorBookColor ( _bstr_t BookName, _bstr_t ColorName );
__declspec(implementation_key(152)) IAcadHyperlinkPtr IAcadHyperlinks::Item ( long Index );
__declspec(implementation_key(153)) long IAcadHyperlinks::GetCount ( );
__declspec(implementation_key(154)) IUnknownPtr IAcadHyperlinks::Get_NewEnum ( );
__declspec(implementation_key(155)) IDispatchPtr IAcadHyperlinks::GetApplication ( );
__declspec(implementation_key(156)) IAcadHyperlinkPtr IAcadHyperlinks::Add ( _bstr_t Name, const _variant_t & Description, const _variant_t & NamedLocation );
__declspec(implementation_key(157)) void IAcadHyperlink::PutURL ( _bstr_t URLPath );
__declspec(implementation_key(158)) _bstr_t IAcadHyperlink::GetURL ( );
__declspec(implementation_key(159)) void IAcadHyperlink::PutURLDescription ( _bstr_t Description );
__declspec(implementation_key(160)) _bstr_t IAcadHyperlink::GetURLDescription ( );
__declspec(implementation_key(161)) IDispatchPtr IAcadHyperlink::GetApplication ( );
__declspec(implementation_key(162)) HRESULT IAcadHyperlink::Delete ( );
__declspec(implementation_key(163)) void IAcadHyperlink::PutURLNamedLocation ( _bstr_t Location );
__declspec(implementation_key(164)) _bstr_t IAcadHyperlink::GetURLNamedLocation ( );
__declspec(implementation_key(165)) _variant_t IAcad3DFace::GetCoordinates ( );
__declspec(implementation_key(166)) void IAcad3DFace::PutCoordinates ( const _variant_t & corners );
__declspec(implementation_key(167)) VARIANT_BOOL IAcad3DFace::GetVisibilityEdge1 ( );
__declspec(implementation_key(168)) void IAcad3DFace::PutVisibilityEdge1 ( VARIANT_BOOL visibility );
__declspec(implementation_key(169)) VARIANT_BOOL IAcad3DFace::GetVisibilityEdge2 ( );
__declspec(implementation_key(170)) void IAcad3DFace::PutVisibilityEdge2 ( VARIANT_BOOL visibility );
__declspec(implementation_key(171)) VARIANT_BOOL IAcad3DFace::GetVisibilityEdge3 ( );
__declspec(implementation_key(172)) void IAcad3DFace::PutVisibilityEdge3 ( VARIANT_BOOL visibility );
__declspec(implementation_key(173)) VARIANT_BOOL IAcad3DFace::GetVisibilityEdge4 ( );
__declspec(implementation_key(174)) void IAcad3DFace::PutVisibilityEdge4 ( VARIANT_BOOL visibility );
__declspec(implementation_key(175)) VARIANT_BOOL IAcad3DFace::GetInvisibleEdge ( int Index );
__declspec(implementation_key(176)) HRESULT IAcad3DFace::SetInvisibleEdge ( int Index, VARIANT_BOOL State );
__declspec(implementation_key(177)) _variant_t IAcad3DFace::GetCoordinate ( int Index );
__declspec(implementation_key(178)) void IAcad3DFace::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(179)) _variant_t IAcadPolygonMesh::GetCoordinates ( );
__declspec(implementation_key(180)) void IAcadPolygonMesh::PutCoordinates ( const _variant_t & Coordinates );
__declspec(implementation_key(181)) VARIANT_BOOL IAcadPolygonMesh::GetMClose ( );
__declspec(implementation_key(182)) void IAcadPolygonMesh::PutMClose ( VARIANT_BOOL bClose );
__declspec(implementation_key(183)) VARIANT_BOOL IAcadPolygonMesh::GetNClose ( );
__declspec(implementation_key(184)) void IAcadPolygonMesh::PutNClose ( VARIANT_BOOL bClose );
__declspec(implementation_key(185)) long IAcadPolygonMesh::GetMDensity ( );
__declspec(implementation_key(186)) void IAcadPolygonMesh::PutMDensity ( long density );
__declspec(implementation_key(187)) long IAcadPolygonMesh::GetNDensity ( );
__declspec(implementation_key(188)) void IAcadPolygonMesh::PutNDensity ( long density );
__declspec(implementation_key(189)) long IAcadPolygonMesh::GetMVertexCount ( );
__declspec(implementation_key(190)) long IAcadPolygonMesh::GetNVertexCount ( );
__declspec(implementation_key(191)) enum AcPolymeshType IAcadPolygonMesh::GetType ( );
__declspec(implementation_key(192)) void IAcadPolygonMesh::PutType ( enum AcPolymeshType Type );
__declspec(implementation_key(193)) HRESULT IAcadPolygonMesh::AppendVertex ( const _variant_t & vertex );
__declspec(implementation_key(194)) _variant_t IAcadPolygonMesh::Explode ( );
__declspec(implementation_key(195)) _variant_t IAcadPolygonMesh::GetCoordinate ( int Index );
__declspec(implementation_key(196)) void IAcadPolygonMesh::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(197)) _variant_t IAcad3DPolyline::GetCoordinates ( );
__declspec(implementation_key(198)) void IAcad3DPolyline::PutCoordinates ( const _variant_t & Coordinates );
__declspec(implementation_key(199)) HRESULT IAcad3DPolyline::AppendVertex ( const _variant_t & vertex );
__declspec(implementation_key(200)) _variant_t IAcad3DPolyline::Explode ( );
__declspec(implementation_key(201)) _variant_t IAcad3DPolyline::GetCoordinate ( int Index );
__declspec(implementation_key(202)) void IAcad3DPolyline::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(203)) enum Ac3DPolylineType IAcad3DPolyline::GetType ( );
__declspec(implementation_key(204)) void IAcad3DPolyline::PutType ( enum Ac3DPolylineType Type );
__declspec(implementation_key(205)) VARIANT_BOOL IAcad3DPolyline::GetClosed ( );
__declspec(implementation_key(206)) void IAcad3DPolyline::PutClosed ( VARIANT_BOOL fClose );
__declspec(implementation_key(207)) double IAcad3DPolyline::GetLength ( );
__declspec(implementation_key(208)) _variant_t IAcadArc::GetStartPoint ( );
__declspec(implementation_key(209)) _variant_t IAcadArc::GetCenter ( );
__declspec(implementation_key(210)) void IAcadArc::PutCenter ( const _variant_t & CenterPoint );
__declspec(implementation_key(211)) _variant_t IAcadArc::GetEndPoint ( );
__declspec(implementation_key(212)) double IAcadArc::GetRadius ( );
__declspec(implementation_key(213)) void IAcadArc::PutRadius ( double Radius );
__declspec(implementation_key(214)) ACAD_ANGLE IAcadArc::GetStartAngle ( );
__declspec(implementation_key(215)) void IAcadArc::PutStartAngle ( ACAD_ANGLE Angle );
__declspec(implementation_key(216)) ACAD_ANGLE IAcadArc::GetEndAngle ( );
__declspec(implementation_key(217)) void IAcadArc::PutEndAngle ( ACAD_ANGLE Angle );
__declspec(implementation_key(218)) ACAD_ANGLE IAcadArc::GetTotalAngle ( );
__declspec(implementation_key(219)) ACAD_DISTANCE IAcadArc::GetArcLength ( );
__declspec(implementation_key(220)) double IAcadArc::GetThickness ( );
__declspec(implementation_key(221)) void IAcadArc::PutThickness ( double Thickness );
__declspec(implementation_key(222)) _variant_t IAcadArc::Offset ( double Distance );
__declspec(implementation_key(223)) double IAcadArc::GetArea ( );
__declspec(implementation_key(224)) _variant_t IAcadArc::GetNormal ( );
__declspec(implementation_key(225)) void IAcadArc::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(226)) long IAcadAttribute::GetFieldLength ( );
__declspec(implementation_key(227)) void IAcadAttribute::PutFieldLength ( long fieldLen );
__declspec(implementation_key(228)) _bstr_t IAcadAttribute::GetTagString ( );
__declspec(implementation_key(229)) void IAcadAttribute::PutTagString ( _bstr_t Tag );
__declspec(implementation_key(230)) _bstr_t IAcadAttribute::GetPromptString ( );
__declspec(implementation_key(231)) void IAcadAttribute::PutPromptString ( _bstr_t bstrPrompt );
__declspec(implementation_key(232)) _bstr_t IAcadAttribute::GetTextString ( );
__declspec(implementation_key(233)) void IAcadAttribute::PutTextString ( _bstr_t bstrText );
__declspec(implementation_key(234)) _bstr_t IAcadAttribute::GetStyleName ( );
__declspec(implementation_key(235)) void IAcadAttribute::PutStyleName ( _bstr_t Name );
__declspec(implementation_key(236)) enum AcAlignment IAcadAttribute::GetAlignment ( );
__declspec(implementation_key(237)) void IAcadAttribute::PutAlignment ( enum AcAlignment align );
__declspec(implementation_key(238)) enum AcHorizontalAlignment IAcadAttribute::GetHorizontalAlignment ( );
__declspec(implementation_key(239)) void IAcadAttribute::PutHorizontalAlignment ( enum AcHorizontalAlignment horizAlign );
__declspec(implementation_key(240)) enum AcVerticalAlignment IAcadAttribute::GetVerticalAlignment ( );
__declspec(implementation_key(241)) void IAcadAttribute::PutVerticalAlignment ( enum AcVerticalAlignment vertiAlign );
__declspec(implementation_key(242)) double IAcadAttribute::GetHeight ( );
__declspec(implementation_key(243)) void IAcadAttribute::PutHeight ( double Height );
__declspec(implementation_key(244)) ACAD_ANGLE IAcadAttribute::GetRotation ( );
__declspec(implementation_key(245)) void IAcadAttribute::PutRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(246)) ACAD_NOUNITS IAcadAttribute::GetScaleFactor ( );
__declspec(implementation_key(247)) void IAcadAttribute::PutScaleFactor ( ACAD_NOUNITS scalFactor );
__declspec(implementation_key(248)) ACAD_ANGLE IAcadAttribute::GetObliqueAngle ( );
__declspec(implementation_key(249)) void IAcadAttribute::PutObliqueAngle ( ACAD_ANGLE obliAngle );
__declspec(implementation_key(250)) _variant_t IAcadAttribute::GetTextAlignmentPoint ( );
__declspec(implementation_key(251)) void IAcadAttribute::PutTextAlignmentPoint ( const _variant_t & alignPoint );
__declspec(implementation_key(252)) _variant_t IAcadAttribute::GetInsertionPoint ( );
__declspec(implementation_key(253)) void IAcadAttribute::PutInsertionPoint ( const _variant_t & insPoint );
__declspec(implementation_key(254)) _variant_t IAcadAttribute::GetNormal ( );
__declspec(implementation_key(255)) void IAcadAttribute::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(256)) long IAcadAttribute::GetTextGenerationFlag ( );
__declspec(implementation_key(257)) void IAcadAttribute::PutTextGenerationFlag ( long textGenFlag );
__declspec(implementation_key(258)) double IAcadAttribute::GetThickness ( );
__declspec(implementation_key(259)) void IAcadAttribute::PutThickness ( double Thickness );
__declspec(implementation_key(260)) long IAcadAttribute::GetMode ( );
__declspec(implementation_key(261)) void IAcadAttribute::PutMode ( long Mode );
__declspec(implementation_key(262)) VARIANT_BOOL IAcadAttribute::GetUpsideDown ( );
__declspec(implementation_key(263)) void IAcadAttribute::PutUpsideDown ( VARIANT_BOOL bUpsideDown );
__declspec(implementation_key(264)) VARIANT_BOOL IAcadAttribute::GetBackward ( );
__declspec(implementation_key(265)) void IAcadAttribute::PutBackward ( VARIANT_BOOL bBackward );
__declspec(implementation_key(266)) VARIANT_BOOL IAcadAttribute::GetInvisible ( );
__declspec(implementation_key(267)) void IAcadAttribute::PutInvisible ( VARIANT_BOOL bInvisible );
__declspec(implementation_key(268)) VARIANT_BOOL IAcadAttribute::GetConstant ( );
__declspec(implementation_key(269)) void IAcadAttribute::PutConstant ( VARIANT_BOOL bConstant );
__declspec(implementation_key(270)) VARIANT_BOOL IAcadAttribute::GetVerify ( );
__declspec(implementation_key(271)) void IAcadAttribute::PutVerify ( VARIANT_BOOL bVerify );
__declspec(implementation_key(272)) VARIANT_BOOL IAcadAttribute::GetPreset ( );
__declspec(implementation_key(273)) void IAcadAttribute::PutPreset ( VARIANT_BOOL bPreset );
__declspec(implementation_key(274)) _variant_t IAcad3DSolid::GetCentroid ( );
__declspec(implementation_key(275)) _variant_t IAcad3DSolid::GetMomentOfInertia ( );
__declspec(implementation_key(276)) _variant_t IAcad3DSolid::GetPrincipalDirections ( );
__declspec(implementation_key(277)) _variant_t IAcad3DSolid::GetPrincipalMoments ( );
__declspec(implementation_key(278)) _variant_t IAcad3DSolid::GetProductOfInertia ( );
__declspec(implementation_key(279)) _variant_t IAcad3DSolid::GetRadiiOfGyration ( );
__declspec(implementation_key(280)) double IAcad3DSolid::GetVolume ( );
__declspec(implementation_key(281)) HRESULT IAcad3DSolid::Boolean ( enum AcBooleanType Operation, struct IAcad3DSolid * SolidObject );
__declspec(implementation_key(282)) IAcad3DSolidPtr IAcad3DSolid::CheckInterference ( struct IAcad3DSolid * Object, VARIANT_BOOL CreateInterferenceSolid );
__declspec(implementation_key(283)) IAcadRegionPtr IAcad3DSolid::SectionSolid ( const _variant_t & Point1, const _variant_t & Point2, const _variant_t & point3 );
__declspec(implementation_key(284)) IAcad3DSolidPtr IAcad3DSolid::SliceSolid ( const _variant_t & Point1, const _variant_t & Point2, const _variant_t & point3, VARIANT_BOOL Negative );
__declspec(implementation_key(285)) double IAcadRegion::GetArea ( );
__declspec(implementation_key(286)) _variant_t IAcadRegion::GetCentroid ( );
__declspec(implementation_key(287)) _variant_t IAcadRegion::GetMomentOfInertia ( );
__declspec(implementation_key(288)) _variant_t IAcadRegion::GetNormal ( );
__declspec(implementation_key(289)) double IAcadRegion::GetPerimeter ( );
__declspec(implementation_key(290)) _variant_t IAcadRegion::GetPrincipalDirections ( );
__declspec(implementation_key(291)) _variant_t IAcadRegion::GetPrincipalMoments ( );
__declspec(implementation_key(292)) double IAcadRegion::GetProductOfInertia ( );
__declspec(implementation_key(293)) _variant_t IAcadRegion::GetRadiiOfGyration ( );
__declspec(implementation_key(294)) HRESULT IAcadRegion::Boolean ( enum AcBooleanType Operation, struct IAcadRegion * Object );
__declspec(implementation_key(295)) _variant_t IAcadRegion::Explode ( );
__declspec(implementation_key(296)) _variant_t IAcadCircle::GetCenter ( );
__declspec(implementation_key(297)) void IAcadCircle::PutCenter ( const _variant_t & CenterPoint );
__declspec(implementation_key(298)) double IAcadCircle::GetRadius ( );
__declspec(implementation_key(299)) void IAcadCircle::PutRadius ( double Radius );
__declspec(implementation_key(300)) double IAcadCircle::GetDiameter ( );
__declspec(implementation_key(301)) void IAcadCircle::PutDiameter ( double Diameter );
__declspec(implementation_key(302)) double IAcadCircle::GetCircumference ( );
__declspec(implementation_key(303)) void IAcadCircle::PutCircumference ( double Circumference );
__declspec(implementation_key(304)) double IAcadCircle::GetArea ( );
__declspec(implementation_key(305)) void IAcadCircle::PutArea ( double Area );
__declspec(implementation_key(306)) _variant_t IAcadCircle::GetNormal ( );
__declspec(implementation_key(307)) void IAcadCircle::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(308)) double IAcadCircle::GetThickness ( );
__declspec(implementation_key(309)) void IAcadCircle::PutThickness ( double Thickness );
__declspec(implementation_key(310)) _variant_t IAcadCircle::Offset ( double Distance );
__declspec(implementation_key(311)) _variant_t IAcadDimension::GetNormal ( );
__declspec(implementation_key(312)) void IAcadDimension::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(313)) ACAD_ANGLE IAcadDimension::GetRotation ( );
__declspec(implementation_key(314)) void IAcadDimension::PutRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(315)) _variant_t IAcadDimension::GetTextPosition ( );
__declspec(implementation_key(316)) void IAcadDimension::PutTextPosition ( const _variant_t & textPos );
__declspec(implementation_key(317)) ACAD_ANGLE IAcadDimension::GetTextRotation ( );
__declspec(implementation_key(318)) void IAcadDimension::PutTextRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(319)) _bstr_t IAcadDimension::GetTextOverride ( );
__declspec(implementation_key(320)) void IAcadDimension::PutTextOverride ( _bstr_t bstrText );
__declspec(implementation_key(321)) _bstr_t IAcadDimension::GetStyleName ( );
__declspec(implementation_key(322)) void IAcadDimension::PutStyleName ( _bstr_t bstrName );
__declspec(implementation_key(323)) ACAD_COLOR IAcadDimension::GetTextColor ( );
__declspec(implementation_key(324)) void IAcadDimension::PutTextColor ( ACAD_COLOR color );
__declspec(implementation_key(325)) _bstr_t IAcadDimension::GetDecimalSeparator ( );
__declspec(implementation_key(326)) void IAcadDimension::PutDecimalSeparator ( _bstr_t character );
__declspec(implementation_key(327)) double IAcadDimension::GetTextGap ( );
__declspec(implementation_key(328)) void IAcadDimension::PutTextGap ( double Offset );
__declspec(implementation_key(329)) _bstr_t IAcadDimension::GetTextPrefix ( );
__declspec(implementation_key(330)) void IAcadDimension::PutTextPrefix ( _bstr_t prefix );
__declspec(implementation_key(331)) _bstr_t IAcadDimension::GetTextSuffix ( );
__declspec(implementation_key(332)) void IAcadDimension::PutTextSuffix ( _bstr_t suffix );
__declspec(implementation_key(333)) ACAD_NOUNITS IAcadDimension::GetScaleFactor ( );
__declspec(implementation_key(334)) void IAcadDimension::PutScaleFactor ( ACAD_NOUNITS factor );
__declspec(implementation_key(335)) enum AcDimVerticalJustification IAcadDimension::GetVerticalTextPosition ( );
__declspec(implementation_key(336)) void IAcadDimension::PutVerticalTextPosition ( enum AcDimVerticalJustification Type );
__declspec(implementation_key(337)) enum AcDimPrecision IAcadDimension::GetTolerancePrecision ( );
__declspec(implementation_key(338)) void IAcadDimension::PutTolerancePrecision ( enum AcDimPrecision precision );
__declspec(implementation_key(339)) ACAD_NOUNITS IAcadDimension::GetToleranceHeightScale ( );
__declspec(implementation_key(340)) void IAcadDimension::PutToleranceHeightScale ( ACAD_NOUNITS scale );
__declspec(implementation_key(341)) double IAcadDimension::GetToleranceLowerLimit ( );
__declspec(implementation_key(342)) void IAcadDimension::PutToleranceLowerLimit ( double lower );
__declspec(implementation_key(343)) enum AcDimTextMovement IAcadDimension::GetTextMovement ( );
__declspec(implementation_key(344)) void IAcadDimension::PutTextMovement ( enum AcDimTextMovement Move );
__declspec(implementation_key(345)) enum AcDimToleranceMethod IAcadDimension::GetToleranceDisplay ( );
__declspec(implementation_key(346)) void IAcadDimension::PutToleranceDisplay ( enum AcDimToleranceMethod method );
__declspec(implementation_key(347)) enum AcDimToleranceJustify IAcadDimension::GetToleranceJustification ( );
__declspec(implementation_key(348)) void IAcadDimension::PutToleranceJustification ( enum AcDimToleranceJustify method );
__declspec(implementation_key(349)) double IAcadDimension::GetToleranceUpperLimit ( );
__declspec(implementation_key(350)) void IAcadDimension::PutToleranceUpperLimit ( double upper );
__declspec(implementation_key(351)) _bstr_t IAcadDimension::GetTextStyle ( );
__declspec(implementation_key(352)) void IAcadDimension::PutTextStyle ( _bstr_t style );
__declspec(implementation_key(353)) double IAcadDimension::GetTextHeight ( );
__declspec(implementation_key(354)) void IAcadDimension::PutTextHeight ( double Height );
__declspec(implementation_key(355)) VARIANT_BOOL IAcadDimension::GetSuppressLeadingZeros ( );
__declspec(implementation_key(356)) void IAcadDimension::PutSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(357)) VARIANT_BOOL IAcadDimension::GetSuppressTrailingZeros ( );
__declspec(implementation_key(358)) void IAcadDimension::PutSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(359)) VARIANT_BOOL IAcadDimension::GetToleranceSuppressLeadingZeros ( );
__declspec(implementation_key(360)) void IAcadDimension::PutToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(361)) VARIANT_BOOL IAcadDimension::GetToleranceSuppressTrailingZeros ( );
__declspec(implementation_key(362)) void IAcadDimension::PutToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(363)) _variant_t IAcadDimAligned::GetExtLine1Point ( );
__declspec(implementation_key(364)) void IAcadDimAligned::PutExtLine1Point ( const _variant_t & xLine1Point );
__declspec(implementation_key(365)) _variant_t IAcadDimAligned::GetExtLine2Point ( );
__declspec(implementation_key(366)) void IAcadDimAligned::PutExtLine2Point ( const _variant_t & xLine2Point );
__declspec(implementation_key(367)) VARIANT_BOOL IAcadDimAligned::GetAltUnits ( );
__declspec(implementation_key(368)) void IAcadDimAligned::PutAltUnits ( VARIANT_BOOL bAlternate );
__declspec(implementation_key(369)) enum AcDimPrecision IAcadDimAligned::GetAltUnitsPrecision ( );
__declspec(implementation_key(370)) void IAcadDimAligned::PutAltUnitsPrecision ( enum AcDimPrecision precision );
__declspec(implementation_key(371)) ACAD_NOUNITS IAcadDimAligned::GetAltUnitsScale ( );
__declspec(implementation_key(372)) void IAcadDimAligned::PutAltUnitsScale ( ACAD_NOUNITS scale );
__declspec(implementation_key(373)) double IAcadDimAligned::GetAltRoundDistance ( );
__declspec(implementation_key(374)) void IAcadDimAligned::PutAltRoundDistance ( double Distance );
__declspec(implementation_key(375)) enum AcDimPrecision IAcadDimAligned::GetAltTolerancePrecision ( );
__declspec(implementation_key(376)) void IAcadDimAligned::PutAltTolerancePrecision ( enum AcDimPrecision Distance );
__declspec(implementation_key(377)) enum AcDimUnits IAcadDimAligned::GetAltUnitsFormat ( );
__declspec(implementation_key(378)) void IAcadDimAligned::PutAltUnitsFormat ( enum AcDimUnits Units );
__declspec(implementation_key(379)) _bstr_t IAcadDimAligned::GetAltTextPrefix ( );
__declspec(implementation_key(380)) void IAcadDimAligned::PutAltTextPrefix ( _bstr_t prefix );
__declspec(implementation_key(381)) _bstr_t IAcadDimAligned::GetAltTextSuffix ( );
__declspec(implementation_key(382)) void IAcadDimAligned::PutAltTextSuffix ( _bstr_t suffix );
__declspec(implementation_key(383)) ACAD_COLOR IAcadDimAligned::GetDimensionLineColor ( );
__declspec(implementation_key(384)) void IAcadDimAligned::PutDimensionLineColor ( ACAD_COLOR color );
__declspec(implementation_key(385)) ACAD_COLOR IAcadDimAligned::GetExtensionLineColor ( );
__declspec(implementation_key(386)) void IAcadDimAligned::PutExtensionLineColor ( ACAD_COLOR color );
__declspec(implementation_key(387)) enum AcDimPrecision IAcadDimAligned::GetPrimaryUnitsPrecision ( );
__declspec(implementation_key(388)) void IAcadDimAligned::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec );
__declspec(implementation_key(389)) double IAcadDimAligned::GetDimensionLineExtend ( );
__declspec(implementation_key(390)) void IAcadDimAligned::PutDimensionLineExtend ( double extend );
__declspec(implementation_key(391)) double IAcadDimAligned::GetExtensionLineExtend ( );
__declspec(implementation_key(392)) void IAcadDimAligned::PutExtensionLineExtend ( double extend );
__declspec(implementation_key(393)) enum AcDimFit IAcadDimAligned::GetFit ( );
__declspec(implementation_key(394)) void IAcadDimAligned::PutFit ( enum AcDimFit fittype );
__declspec(implementation_key(395)) enum AcDimFractionType IAcadDimAligned::GetFractionFormat ( );
__declspec(implementation_key(396)) void IAcadDimAligned::PutFractionFormat ( enum AcDimFractionType Type );
__declspec(implementation_key(397)) enum AcDimHorizontalJustification IAcadDimAligned::GetHorizontalTextPosition ( );
__declspec(implementation_key(398)) void IAcadDimAligned::PutHorizontalTextPosition ( enum AcDimHorizontalJustification Type );
__declspec(implementation_key(399)) ACAD_NOUNITS IAcadDimAligned::GetLinearScaleFactor ( );
__declspec(implementation_key(400)) void IAcadDimAligned::PutLinearScaleFactor ( ACAD_NOUNITS Type );
__declspec(implementation_key(401)) enum AcDimLUnits IAcadDimAligned::GetUnitsFormat ( );
__declspec(implementation_key(402)) void IAcadDimAligned::PutUnitsFormat ( enum AcDimLUnits format );
__declspec(implementation_key(403)) ACAD_LWEIGHT IAcadDimAligned::GetExtensionLineWeight ( );
__declspec(implementation_key(404)) void IAcadDimAligned::PutExtensionLineWeight ( ACAD_LWEIGHT lweight );
__declspec(implementation_key(405)) double IAcadDimAligned::GetRoundDistance ( );
__declspec(implementation_key(406)) void IAcadDimAligned::PutRoundDistance ( double Distance );
__declspec(implementation_key(407)) VARIANT_BOOL IAcadDimAligned::GetDimLine1Suppress ( );
__declspec(implementation_key(408)) void IAcadDimAligned::PutDimLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(409)) VARIANT_BOOL IAcadDimAligned::GetDimLine2Suppress ( );
__declspec(implementation_key(410)) void IAcadDimAligned::PutDimLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(411)) VARIANT_BOOL IAcadDimAligned::GetExtLine1Suppress ( );
__declspec(implementation_key(412)) void IAcadDimAligned::PutExtLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(413)) VARIANT_BOOL IAcadDimAligned::GetExtLine2Suppress ( );
__declspec(implementation_key(414)) void IAcadDimAligned::PutExtLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(415)) VARIANT_BOOL IAcadDimAligned::GetDimLineInside ( );
__declspec(implementation_key(416)) void IAcadDimAligned::PutDimLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(417)) VARIANT_BOOL IAcadDimAligned::GetTextInsideAlign ( );
__declspec(implementation_key(418)) void IAcadDimAligned::PutTextInsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(419)) VARIANT_BOOL IAcadDimAligned::GetTextInside ( );
__declspec(implementation_key(420)) void IAcadDimAligned::PutTextInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(421)) VARIANT_BOOL IAcadDimAligned::GetForceLineInside ( );
__declspec(implementation_key(422)) void IAcadDimAligned::PutForceLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(423)) VARIANT_BOOL IAcadDimAligned::GetTextOutsideAlign ( );
__declspec(implementation_key(424)) void IAcadDimAligned::PutTextOutsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(425)) double IAcadDimAligned::GetExtensionLineOffset ( );
__declspec(implementation_key(426)) void IAcadDimAligned::PutExtensionLineOffset ( double Offset );
__declspec(implementation_key(427)) VARIANT_BOOL IAcadDimAligned::GetAltSuppressLeadingZeros ( );
__declspec(implementation_key(428)) void IAcadDimAligned::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(429)) VARIANT_BOOL IAcadDimAligned::GetAltSuppressTrailingZeros ( );
__declspec(implementation_key(430)) void IAcadDimAligned::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(431)) VARIANT_BOOL IAcadDimAligned::GetAltSuppressZeroFeet ( );
__declspec(implementation_key(432)) void IAcadDimAligned::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(433)) VARIANT_BOOL IAcadDimAligned::GetAltSuppressZeroInches ( );
__declspec(implementation_key(434)) void IAcadDimAligned::PutAltSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(435)) VARIANT_BOOL IAcadDimAligned::GetAltToleranceSuppressLeadingZeros ( );
__declspec(implementation_key(436)) void IAcadDimAligned::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(437)) VARIANT_BOOL IAcadDimAligned::GetAltToleranceSuppressTrailingZeros ( );
__declspec(implementation_key(438)) void IAcadDimAligned::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(439)) VARIANT_BOOL IAcadDimAligned::GetAltToleranceSuppressZeroFeet ( );
__declspec(implementation_key(440)) void IAcadDimAligned::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(441)) VARIANT_BOOL IAcadDimAligned::GetAltToleranceSuppressZeroInches ( );
__declspec(implementation_key(442)) void IAcadDimAligned::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(443)) VARIANT_BOOL IAcadDimAligned::GetSuppressZeroFeet ( );
__declspec(implementation_key(444)) void IAcadDimAligned::PutSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(445)) VARIANT_BOOL IAcadDimAligned::GetSuppressZeroInches ( );
__declspec(implementation_key(446)) void IAcadDimAligned::PutSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(447)) VARIANT_BOOL IAcadDimAligned::GetToleranceSuppressZeroFeet ( );
__declspec(implementation_key(448)) void IAcadDimAligned::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(449)) VARIANT_BOOL IAcadDimAligned::GetToleranceSuppressZeroInches ( );
__declspec(implementation_key(450)) void IAcadDimAligned::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(451)) ACAD_LWEIGHT IAcadDimAligned::GetDimensionLineWeight ( );
__declspec(implementation_key(452)) void IAcadDimAligned::PutDimensionLineWeight ( ACAD_LWEIGHT weight );
__declspec(implementation_key(453)) double IAcadDimAligned::GetArrowheadSize ( );
__declspec(implementation_key(454)) void IAcadDimAligned::PutArrowheadSize ( double size );
__declspec(implementation_key(455)) enum AcDimArrowheadType IAcadDimAligned::GetArrowhead1Type ( );
__declspec(implementation_key(456)) void IAcadDimAligned::PutArrowhead1Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(457)) enum AcDimArrowheadType IAcadDimAligned::GetArrowhead2Type ( );
__declspec(implementation_key(458)) void IAcadDimAligned::PutArrowhead2Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(459)) double IAcadDimAligned::GetMeasurement ( );
__declspec(implementation_key(460)) _bstr_t IAcadDimAligned::GetArrowhead1Block ( );
__declspec(implementation_key(461)) void IAcadDimAligned::PutArrowhead1Block ( _bstr_t BlockName );
__declspec(implementation_key(462)) _bstr_t IAcadDimAligned::GetArrowhead2Block ( );
__declspec(implementation_key(463)) void IAcadDimAligned::PutArrowhead2Block ( _bstr_t BlockName );
__declspec(implementation_key(464)) _variant_t IAcadDimAngular::GetExtLine1StartPoint ( );
__declspec(implementation_key(465)) void IAcadDimAngular::PutExtLine1StartPoint ( const _variant_t & xLine1Point );
__declspec(implementation_key(466)) _variant_t IAcadDimAngular::GetExtLine1EndPoint ( );
__declspec(implementation_key(467)) void IAcadDimAngular::PutExtLine1EndPoint ( const _variant_t & xLine1Point );
__declspec(implementation_key(468)) _variant_t IAcadDimAngular::GetExtLine2StartPoint ( );
__declspec(implementation_key(469)) void IAcadDimAngular::PutExtLine2StartPoint ( const _variant_t & xLine2Point );
__declspec(implementation_key(470)) _variant_t IAcadDimAngular::GetExtLine2EndPoint ( );
__declspec(implementation_key(471)) void IAcadDimAngular::PutExtLine2EndPoint ( const _variant_t & xLine2Point );
__declspec(implementation_key(472)) enum AcAngleUnits IAcadDimAngular::GetAngleFormat ( );
__declspec(implementation_key(473)) void IAcadDimAngular::PutAngleFormat ( enum AcAngleUnits format );
__declspec(implementation_key(474)) ACAD_COLOR IAcadDimAngular::GetDimensionLineColor ( );
__declspec(implementation_key(475)) void IAcadDimAngular::PutDimensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(476)) ACAD_COLOR IAcadDimAngular::GetExtensionLineColor ( );
__declspec(implementation_key(477)) void IAcadDimAngular::PutExtensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(478)) double IAcadDimAngular::GetExtensionLineExtend ( );
__declspec(implementation_key(479)) void IAcadDimAngular::PutExtensionLineExtend ( double extend );
__declspec(implementation_key(480)) enum AcDimFit IAcadDimAngular::GetFit ( );
__declspec(implementation_key(481)) void IAcadDimAngular::PutFit ( enum AcDimFit fittype );
__declspec(implementation_key(482)) enum AcDimHorizontalJustification IAcadDimAngular::GetHorizontalTextPosition ( );
__declspec(implementation_key(483)) void IAcadDimAngular::PutHorizontalTextPosition ( enum AcDimHorizontalJustification Type );
__declspec(implementation_key(484)) ACAD_LWEIGHT IAcadDimAngular::GetExtensionLineWeight ( );
__declspec(implementation_key(485)) void IAcadDimAngular::PutExtensionLineWeight ( ACAD_LWEIGHT lweight );
__declspec(implementation_key(486)) VARIANT_BOOL IAcadDimAngular::GetDimLine1Suppress ( );
__declspec(implementation_key(487)) void IAcadDimAngular::PutDimLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(488)) VARIANT_BOOL IAcadDimAngular::GetDimLine2Suppress ( );
__declspec(implementation_key(489)) void IAcadDimAngular::PutDimLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(490)) VARIANT_BOOL IAcadDimAngular::GetExtLine1Suppress ( );
__declspec(implementation_key(491)) void IAcadDimAngular::PutExtLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(492)) VARIANT_BOOL IAcadDimAngular::GetExtLine2Suppress ( );
__declspec(implementation_key(493)) void IAcadDimAngular::PutExtLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(494)) VARIANT_BOOL IAcadDimAngular::GetDimLineInside ( );
__declspec(implementation_key(495)) void IAcadDimAngular::PutDimLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(496)) VARIANT_BOOL IAcadDimAngular::GetTextInsideAlign ( );
__declspec(implementation_key(497)) void IAcadDimAngular::PutTextInsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(498)) VARIANT_BOOL IAcadDimAngular::GetTextInside ( );
__declspec(implementation_key(499)) void IAcadDimAngular::PutTextInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(500)) VARIANT_BOOL IAcadDimAngular::GetForceLineInside ( );
__declspec(implementation_key(501)) void IAcadDimAngular::PutForceLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(502)) VARIANT_BOOL IAcadDimAngular::GetTextOutsideAlign ( );
__declspec(implementation_key(503)) void IAcadDimAngular::PutTextOutsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(504)) enum AcDimPrecision IAcadDimAngular::GetTextPrecision ( );
__declspec(implementation_key(505)) void IAcadDimAngular::PutTextPrecision ( enum AcDimPrecision precision );
__declspec(implementation_key(506)) double IAcadDimAngular::GetExtensionLineOffset ( );
__declspec(implementation_key(507)) void IAcadDimAngular::PutExtensionLineOffset ( double Offset );
__declspec(implementation_key(508)) ACAD_LWEIGHT IAcadDimAngular::GetDimensionLineWeight ( );
__declspec(implementation_key(509)) void IAcadDimAngular::PutDimensionLineWeight ( ACAD_LWEIGHT weight );
__declspec(implementation_key(510)) double IAcadDimAngular::GetArrowheadSize ( );
__declspec(implementation_key(511)) void IAcadDimAngular::PutArrowheadSize ( double size );
__declspec(implementation_key(512)) enum AcDimArrowheadType IAcadDimAngular::GetArrowhead1Type ( );
__declspec(implementation_key(513)) void IAcadDimAngular::PutArrowhead1Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(514)) enum AcDimArrowheadType IAcadDimAngular::GetArrowhead2Type ( );
__declspec(implementation_key(515)) void IAcadDimAngular::PutArrowhead2Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(516)) ACAD_ANGLE IAcadDimAngular::GetMeasurement ( );
__declspec(implementation_key(517)) _bstr_t IAcadDimAngular::GetArrowhead1Block ( );
__declspec(implementation_key(518)) void IAcadDimAngular::PutArrowhead1Block ( _bstr_t BlockName );
__declspec(implementation_key(519)) _bstr_t IAcadDimAngular::GetArrowhead2Block ( );
__declspec(implementation_key(520)) void IAcadDimAngular::PutArrowhead2Block ( _bstr_t BlockName );
__declspec(implementation_key(521)) void IAcadDimDiametric::PutLeaderLength ( double _arg1 );
__declspec(implementation_key(522)) VARIANT_BOOL IAcadDimDiametric::GetAltUnits ( );
__declspec(implementation_key(523)) void IAcadDimDiametric::PutAltUnits ( VARIANT_BOOL bAlternate );
__declspec(implementation_key(524)) enum AcDimPrecision IAcadDimDiametric::GetAltUnitsPrecision ( );
__declspec(implementation_key(525)) void IAcadDimDiametric::PutAltUnitsPrecision ( enum AcDimPrecision precision );
__declspec(implementation_key(526)) ACAD_NOUNITS IAcadDimDiametric::GetAltUnitsScale ( );
__declspec(implementation_key(527)) void IAcadDimDiametric::PutAltUnitsScale ( ACAD_NOUNITS scale );
__declspec(implementation_key(528)) double IAcadDimDiametric::GetAltRoundDistance ( );
__declspec(implementation_key(529)) void IAcadDimDiametric::PutAltRoundDistance ( double Distance );
__declspec(implementation_key(530)) enum AcDimPrecision IAcadDimDiametric::GetAltTolerancePrecision ( );
__declspec(implementation_key(531)) void IAcadDimDiametric::PutAltTolerancePrecision ( enum AcDimPrecision Distance );
__declspec(implementation_key(532)) enum AcDimUnits IAcadDimDiametric::GetAltUnitsFormat ( );
__declspec(implementation_key(533)) void IAcadDimDiametric::PutAltUnitsFormat ( enum AcDimUnits Units );
__declspec(implementation_key(534)) _bstr_t IAcadDimDiametric::GetAltTextPrefix ( );
__declspec(implementation_key(535)) void IAcadDimDiametric::PutAltTextPrefix ( _bstr_t prefix );
__declspec(implementation_key(536)) _bstr_t IAcadDimDiametric::GetAltTextSuffix ( );
__declspec(implementation_key(537)) void IAcadDimDiametric::PutAltTextSuffix ( _bstr_t prefix );
__declspec(implementation_key(538)) ACAD_COLOR IAcadDimDiametric::GetDimensionLineColor ( );
__declspec(implementation_key(539)) void IAcadDimDiametric::PutDimensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(540)) enum AcDimPrecision IAcadDimDiametric::GetPrimaryUnitsPrecision ( );
__declspec(implementation_key(541)) void IAcadDimDiametric::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec );
__declspec(implementation_key(542)) enum AcDimFractionType IAcadDimDiametric::GetFractionFormat ( );
__declspec(implementation_key(543)) void IAcadDimDiametric::PutFractionFormat ( enum AcDimFractionType Type );
__declspec(implementation_key(544)) enum AcDimFit IAcadDimDiametric::GetFit ( );
__declspec(implementation_key(545)) void IAcadDimDiametric::PutFit ( enum AcDimFit fittype );
__declspec(implementation_key(546)) ACAD_NOUNITS IAcadDimDiametric::GetLinearScaleFactor ( );
__declspec(implementation_key(547)) void IAcadDimDiametric::PutLinearScaleFactor ( ACAD_NOUNITS Type );
__declspec(implementation_key(548)) enum AcDimLUnits IAcadDimDiametric::GetUnitsFormat ( );
__declspec(implementation_key(549)) void IAcadDimDiametric::PutUnitsFormat ( enum AcDimLUnits format );
__declspec(implementation_key(550)) double IAcadDimDiametric::GetRoundDistance ( );
__declspec(implementation_key(551)) void IAcadDimDiametric::PutRoundDistance ( double Distance );
__declspec(implementation_key(552)) VARIANT_BOOL IAcadDimDiametric::GetDimLine1Suppress ( );
__declspec(implementation_key(553)) void IAcadDimDiametric::PutDimLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(554)) VARIANT_BOOL IAcadDimDiametric::GetDimLine2Suppress ( );
__declspec(implementation_key(555)) void IAcadDimDiametric::PutDimLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(556)) VARIANT_BOOL IAcadDimDiametric::GetTextInsideAlign ( );
__declspec(implementation_key(557)) void IAcadDimDiametric::PutTextInsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(558)) VARIANT_BOOL IAcadDimDiametric::GetTextInside ( );
__declspec(implementation_key(559)) void IAcadDimDiametric::PutTextInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(560)) VARIANT_BOOL IAcadDimDiametric::GetForceLineInside ( );
__declspec(implementation_key(561)) void IAcadDimDiametric::PutForceLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(562)) VARIANT_BOOL IAcadDimDiametric::GetTextOutsideAlign ( );
__declspec(implementation_key(563)) void IAcadDimDiametric::PutTextOutsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(564)) enum AcDimCenterType IAcadDimDiametric::GetCenterType ( );
__declspec(implementation_key(565)) void IAcadDimDiametric::PutCenterType ( enum AcDimCenterType Type );
__declspec(implementation_key(566)) double IAcadDimDiametric::GetCenterMarkSize ( );
__declspec(implementation_key(567)) void IAcadDimDiametric::PutCenterMarkSize ( double Type );
__declspec(implementation_key(568)) VARIANT_BOOL IAcadDimDiametric::GetAltSuppressLeadingZeros ( );
__declspec(implementation_key(569)) void IAcadDimDiametric::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(570)) VARIANT_BOOL IAcadDimDiametric::GetAltSuppressTrailingZeros ( );
__declspec(implementation_key(571)) void IAcadDimDiametric::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(572)) VARIANT_BOOL IAcadDimDiametric::GetAltSuppressZeroFeet ( );
__declspec(implementation_key(573)) void IAcadDimDiametric::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(574)) VARIANT_BOOL IAcadDimDiametric::GetAltSuppressZeroInches ( );
__declspec(implementation_key(575)) void IAcadDimDiametric::PutAltSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(576)) VARIANT_BOOL IAcadDimDiametric::GetAltToleranceSuppressLeadingZeros ( );
__declspec(implementation_key(577)) void IAcadDimDiametric::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(578)) VARIANT_BOOL IAcadDimDiametric::GetAltToleranceSuppressTrailingZeros ( );
__declspec(implementation_key(579)) void IAcadDimDiametric::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(580)) VARIANT_BOOL IAcadDimDiametric::GetAltToleranceSuppressZeroFeet ( );
__declspec(implementation_key(581)) void IAcadDimDiametric::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(582)) VARIANT_BOOL IAcadDimDiametric::GetAltToleranceSuppressZeroInches ( );
__declspec(implementation_key(583)) void IAcadDimDiametric::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(584)) VARIANT_BOOL IAcadDimDiametric::GetSuppressZeroFeet ( );
__declspec(implementation_key(585)) void IAcadDimDiametric::PutSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(586)) VARIANT_BOOL IAcadDimDiametric::GetSuppressZeroInches ( );
__declspec(implementation_key(587)) void IAcadDimDiametric::PutSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(588)) VARIANT_BOOL IAcadDimDiametric::GetToleranceSuppressZeroFeet ( );
__declspec(implementation_key(589)) void IAcadDimDiametric::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(590)) VARIANT_BOOL IAcadDimDiametric::GetToleranceSuppressZeroInches ( );
__declspec(implementation_key(591)) void IAcadDimDiametric::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(592)) ACAD_LWEIGHT IAcadDimDiametric::GetDimensionLineWeight ( );
__declspec(implementation_key(593)) void IAcadDimDiametric::PutDimensionLineWeight ( ACAD_LWEIGHT weight );
__declspec(implementation_key(594)) double IAcadDimDiametric::GetArrowheadSize ( );
__declspec(implementation_key(595)) void IAcadDimDiametric::PutArrowheadSize ( double size );
__declspec(implementation_key(596)) enum AcDimArrowheadType IAcadDimDiametric::GetArrowhead1Type ( );
__declspec(implementation_key(597)) void IAcadDimDiametric::PutArrowhead1Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(598)) enum AcDimArrowheadType IAcadDimDiametric::GetArrowhead2Type ( );
__declspec(implementation_key(599)) void IAcadDimDiametric::PutArrowhead2Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(600)) double IAcadDimDiametric::GetMeasurement ( );
__declspec(implementation_key(601)) _bstr_t IAcadDimDiametric::GetArrowhead1Block ( );
__declspec(implementation_key(602)) void IAcadDimDiametric::PutArrowhead1Block ( _bstr_t BlockName );
__declspec(implementation_key(603)) _bstr_t IAcadDimDiametric::GetArrowhead2Block ( );
__declspec(implementation_key(604)) void IAcadDimDiametric::PutArrowhead2Block ( _bstr_t BlockName );
__declspec(implementation_key(605)) VARIANT_BOOL IAcadDimRotated::GetAltUnits ( );
__declspec(implementation_key(606)) void IAcadDimRotated::PutAltUnits ( VARIANT_BOOL bAlternate );
__declspec(implementation_key(607)) enum AcDimPrecision IAcadDimRotated::GetAltUnitsPrecision ( );
__declspec(implementation_key(608)) void IAcadDimRotated::PutAltUnitsPrecision ( enum AcDimPrecision precision );
__declspec(implementation_key(609)) ACAD_NOUNITS IAcadDimRotated::GetAltUnitsScale ( );
__declspec(implementation_key(610)) void IAcadDimRotated::PutAltUnitsScale ( ACAD_NOUNITS scale );
__declspec(implementation_key(611)) double IAcadDimRotated::GetAltRoundDistance ( );
__declspec(implementation_key(612)) void IAcadDimRotated::PutAltRoundDistance ( double Distance );
__declspec(implementation_key(613)) enum AcDimPrecision IAcadDimRotated::GetAltTolerancePrecision ( );
__declspec(implementation_key(614)) void IAcadDimRotated::PutAltTolerancePrecision ( enum AcDimPrecision Distance );
__declspec(implementation_key(615)) enum AcDimUnits IAcadDimRotated::GetAltUnitsFormat ( );
__declspec(implementation_key(616)) void IAcadDimRotated::PutAltUnitsFormat ( enum AcDimUnits Units );
__declspec(implementation_key(617)) _bstr_t IAcadDimRotated::GetAltTextPrefix ( );
__declspec(implementation_key(618)) void IAcadDimRotated::PutAltTextPrefix ( _bstr_t prefix );
__declspec(implementation_key(619)) _bstr_t IAcadDimRotated::GetAltTextSuffix ( );
__declspec(implementation_key(620)) void IAcadDimRotated::PutAltTextSuffix ( _bstr_t prefix );
__declspec(implementation_key(621)) ACAD_COLOR IAcadDimRotated::GetDimensionLineColor ( );
__declspec(implementation_key(622)) void IAcadDimRotated::PutDimensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(623)) ACAD_COLOR IAcadDimRotated::GetExtensionLineColor ( );
__declspec(implementation_key(624)) void IAcadDimRotated::PutExtensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(625)) enum AcDimPrecision IAcadDimRotated::GetPrimaryUnitsPrecision ( );
__declspec(implementation_key(626)) void IAcadDimRotated::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec );
__declspec(implementation_key(627)) double IAcadDimRotated::GetDimensionLineExtend ( );
__declspec(implementation_key(628)) void IAcadDimRotated::PutDimensionLineExtend ( double extend );
__declspec(implementation_key(629)) double IAcadDimRotated::GetExtensionLineExtend ( );
__declspec(implementation_key(630)) void IAcadDimRotated::PutExtensionLineExtend ( double extend );
__declspec(implementation_key(631)) enum AcDimFit IAcadDimRotated::GetFit ( );
__declspec(implementation_key(632)) void IAcadDimRotated::PutFit ( enum AcDimFit fittype );
__declspec(implementation_key(633)) enum AcDimFractionType IAcadDimRotated::GetFractionFormat ( );
__declspec(implementation_key(634)) void IAcadDimRotated::PutFractionFormat ( enum AcDimFractionType Type );
__declspec(implementation_key(635)) enum AcDimHorizontalJustification IAcadDimRotated::GetHorizontalTextPosition ( );
__declspec(implementation_key(636)) void IAcadDimRotated::PutHorizontalTextPosition ( enum AcDimHorizontalJustification Type );
__declspec(implementation_key(637)) ACAD_NOUNITS IAcadDimRotated::GetLinearScaleFactor ( );
__declspec(implementation_key(638)) void IAcadDimRotated::PutLinearScaleFactor ( ACAD_NOUNITS Type );
__declspec(implementation_key(639)) enum AcDimLUnits IAcadDimRotated::GetUnitsFormat ( );
__declspec(implementation_key(640)) void IAcadDimRotated::PutUnitsFormat ( enum AcDimLUnits format );
__declspec(implementation_key(641)) ACAD_LWEIGHT IAcadDimRotated::GetExtensionLineWeight ( );
__declspec(implementation_key(642)) void IAcadDimRotated::PutExtensionLineWeight ( ACAD_LWEIGHT lweight );
__declspec(implementation_key(643)) double IAcadDimRotated::GetRoundDistance ( );
__declspec(implementation_key(644)) void IAcadDimRotated::PutRoundDistance ( double Distance );
__declspec(implementation_key(645)) VARIANT_BOOL IAcadDimRotated::GetDimLine1Suppress ( );
__declspec(implementation_key(646)) void IAcadDimRotated::PutDimLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(647)) VARIANT_BOOL IAcadDimRotated::GetDimLine2Suppress ( );
__declspec(implementation_key(648)) void IAcadDimRotated::PutDimLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(649)) VARIANT_BOOL IAcadDimRotated::GetExtLine1Suppress ( );
__declspec(implementation_key(650)) void IAcadDimRotated::PutExtLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(651)) VARIANT_BOOL IAcadDimRotated::GetExtLine2Suppress ( );
__declspec(implementation_key(652)) void IAcadDimRotated::PutExtLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(653)) VARIANT_BOOL IAcadDimRotated::GetDimLineInside ( );
__declspec(implementation_key(654)) void IAcadDimRotated::PutDimLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(655)) VARIANT_BOOL IAcadDimRotated::GetTextInsideAlign ( );
__declspec(implementation_key(656)) void IAcadDimRotated::PutTextInsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(657)) VARIANT_BOOL IAcadDimRotated::GetTextInside ( );
__declspec(implementation_key(658)) void IAcadDimRotated::PutTextInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(659)) VARIANT_BOOL IAcadDimRotated::GetForceLineInside ( );
__declspec(implementation_key(660)) void IAcadDimRotated::PutForceLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(661)) VARIANT_BOOL IAcadDimRotated::GetTextOutsideAlign ( );
__declspec(implementation_key(662)) void IAcadDimRotated::PutTextOutsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(663)) double IAcadDimRotated::GetExtensionLineOffset ( );
__declspec(implementation_key(664)) void IAcadDimRotated::PutExtensionLineOffset ( double Offset );
__declspec(implementation_key(665)) VARIANT_BOOL IAcadDimRotated::GetAltSuppressLeadingZeros ( );
__declspec(implementation_key(666)) void IAcadDimRotated::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(667)) VARIANT_BOOL IAcadDimRotated::GetAltSuppressTrailingZeros ( );
__declspec(implementation_key(668)) void IAcadDimRotated::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(669)) VARIANT_BOOL IAcadDimRotated::GetAltSuppressZeroFeet ( );
__declspec(implementation_key(670)) void IAcadDimRotated::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(671)) VARIANT_BOOL IAcadDimRotated::GetAltSuppressZeroInches ( );
__declspec(implementation_key(672)) void IAcadDimRotated::PutAltSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(673)) VARIANT_BOOL IAcadDimRotated::GetAltToleranceSuppressLeadingZeros ( );
__declspec(implementation_key(674)) void IAcadDimRotated::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(675)) VARIANT_BOOL IAcadDimRotated::GetAltToleranceSuppressTrailingZeros ( );
__declspec(implementation_key(676)) void IAcadDimRotated::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(677)) VARIANT_BOOL IAcadDimRotated::GetAltToleranceSuppressZeroFeet ( );
__declspec(implementation_key(678)) void IAcadDimRotated::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(679)) VARIANT_BOOL IAcadDimRotated::GetAltToleranceSuppressZeroInches ( );
__declspec(implementation_key(680)) void IAcadDimRotated::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(681)) VARIANT_BOOL IAcadDimRotated::GetSuppressZeroFeet ( );
__declspec(implementation_key(682)) void IAcadDimRotated::PutSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(683)) VARIANT_BOOL IAcadDimRotated::GetSuppressZeroInches ( );
__declspec(implementation_key(684)) void IAcadDimRotated::PutSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(685)) VARIANT_BOOL IAcadDimRotated::GetToleranceSuppressZeroFeet ( );
__declspec(implementation_key(686)) void IAcadDimRotated::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(687)) VARIANT_BOOL IAcadDimRotated::GetToleranceSuppressZeroInches ( );
__declspec(implementation_key(688)) void IAcadDimRotated::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(689)) ACAD_LWEIGHT IAcadDimRotated::GetDimensionLineWeight ( );
__declspec(implementation_key(690)) void IAcadDimRotated::PutDimensionLineWeight ( ACAD_LWEIGHT weight );
__declspec(implementation_key(691)) double IAcadDimRotated::GetArrowheadSize ( );
__declspec(implementation_key(692)) void IAcadDimRotated::PutArrowheadSize ( double size );
__declspec(implementation_key(693)) enum AcDimArrowheadType IAcadDimRotated::GetArrowhead1Type ( );
__declspec(implementation_key(694)) void IAcadDimRotated::PutArrowhead1Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(695)) enum AcDimArrowheadType IAcadDimRotated::GetArrowhead2Type ( );
__declspec(implementation_key(696)) void IAcadDimRotated::PutArrowhead2Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(697)) double IAcadDimRotated::GetMeasurement ( );
__declspec(implementation_key(698)) _bstr_t IAcadDimRotated::GetArrowhead1Block ( );
__declspec(implementation_key(699)) void IAcadDimRotated::PutArrowhead1Block ( _bstr_t BlockName );
__declspec(implementation_key(700)) _bstr_t IAcadDimRotated::GetArrowhead2Block ( );
__declspec(implementation_key(701)) void IAcadDimRotated::PutArrowhead2Block ( _bstr_t BlockName );
__declspec(implementation_key(702)) VARIANT_BOOL IAcadDimOrdinate::GetAltUnits ( );
__declspec(implementation_key(703)) void IAcadDimOrdinate::PutAltUnits ( VARIANT_BOOL bAlternate );
__declspec(implementation_key(704)) enum AcDimPrecision IAcadDimOrdinate::GetAltUnitsPrecision ( );
__declspec(implementation_key(705)) void IAcadDimOrdinate::PutAltUnitsPrecision ( enum AcDimPrecision precision );
__declspec(implementation_key(706)) ACAD_NOUNITS IAcadDimOrdinate::GetAltUnitsScale ( );
__declspec(implementation_key(707)) void IAcadDimOrdinate::PutAltUnitsScale ( ACAD_NOUNITS scale );
__declspec(implementation_key(708)) double IAcadDimOrdinate::GetAltRoundDistance ( );
__declspec(implementation_key(709)) void IAcadDimOrdinate::PutAltRoundDistance ( double Distance );
__declspec(implementation_key(710)) enum AcDimPrecision IAcadDimOrdinate::GetAltTolerancePrecision ( );
__declspec(implementation_key(711)) void IAcadDimOrdinate::PutAltTolerancePrecision ( enum AcDimPrecision Distance );
__declspec(implementation_key(712)) enum AcDimUnits IAcadDimOrdinate::GetAltUnitsFormat ( );
__declspec(implementation_key(713)) void IAcadDimOrdinate::PutAltUnitsFormat ( enum AcDimUnits Units );
__declspec(implementation_key(714)) _bstr_t IAcadDimOrdinate::GetAltTextPrefix ( );
__declspec(implementation_key(715)) void IAcadDimOrdinate::PutAltTextPrefix ( _bstr_t prefix );
__declspec(implementation_key(716)) _bstr_t IAcadDimOrdinate::GetAltTextSuffix ( );
__declspec(implementation_key(717)) void IAcadDimOrdinate::PutAltTextSuffix ( _bstr_t prefix );
__declspec(implementation_key(718)) ACAD_COLOR IAcadDimOrdinate::GetExtensionLineColor ( );
__declspec(implementation_key(719)) void IAcadDimOrdinate::PutExtensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(720)) enum AcDimPrecision IAcadDimOrdinate::GetPrimaryUnitsPrecision ( );
__declspec(implementation_key(721)) void IAcadDimOrdinate::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec );
__declspec(implementation_key(722)) enum AcDimFractionType IAcadDimOrdinate::GetFractionFormat ( );
__declspec(implementation_key(723)) void IAcadDimOrdinate::PutFractionFormat ( enum AcDimFractionType Type );
__declspec(implementation_key(724)) ACAD_NOUNITS IAcadDimOrdinate::GetLinearScaleFactor ( );
__declspec(implementation_key(725)) void IAcadDimOrdinate::PutLinearScaleFactor ( ACAD_NOUNITS Type );
__declspec(implementation_key(726)) enum AcDimLUnits IAcadDimOrdinate::GetUnitsFormat ( );
__declspec(implementation_key(727)) void IAcadDimOrdinate::PutUnitsFormat ( enum AcDimLUnits format );
__declspec(implementation_key(728)) ACAD_LWEIGHT IAcadDimOrdinate::GetExtensionLineWeight ( );
__declspec(implementation_key(729)) void IAcadDimOrdinate::PutExtensionLineWeight ( ACAD_LWEIGHT lweight );
__declspec(implementation_key(730)) double IAcadDimOrdinate::GetRoundDistance ( );
__declspec(implementation_key(731)) void IAcadDimOrdinate::PutRoundDistance ( double Distance );
__declspec(implementation_key(732)) double IAcadDimOrdinate::GetExtensionLineOffset ( );
__declspec(implementation_key(733)) void IAcadDimOrdinate::PutExtensionLineOffset ( double Offset );
__declspec(implementation_key(734)) VARIANT_BOOL IAcadDimOrdinate::GetAltSuppressLeadingZeros ( );
__declspec(implementation_key(735)) void IAcadDimOrdinate::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(736)) VARIANT_BOOL IAcadDimOrdinate::GetAltSuppressTrailingZeros ( );
__declspec(implementation_key(737)) void IAcadDimOrdinate::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(738)) VARIANT_BOOL IAcadDimOrdinate::GetAltSuppressZeroFeet ( );
__declspec(implementation_key(739)) void IAcadDimOrdinate::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(740)) VARIANT_BOOL IAcadDimOrdinate::GetAltSuppressZeroInches ( );
__declspec(implementation_key(741)) void IAcadDimOrdinate::PutAltSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(742)) VARIANT_BOOL IAcadDimOrdinate::GetAltToleranceSuppressLeadingZeros ( );
__declspec(implementation_key(743)) void IAcadDimOrdinate::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(744)) VARIANT_BOOL IAcadDimOrdinate::GetAltToleranceSuppressTrailingZeros ( );
__declspec(implementation_key(745)) void IAcadDimOrdinate::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(746)) VARIANT_BOOL IAcadDimOrdinate::GetAltToleranceSuppressZeroFeet ( );
__declspec(implementation_key(747)) void IAcadDimOrdinate::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(748)) VARIANT_BOOL IAcadDimOrdinate::GetAltToleranceSuppressZeroInches ( );
__declspec(implementation_key(749)) void IAcadDimOrdinate::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(750)) VARIANT_BOOL IAcadDimOrdinate::GetSuppressZeroFeet ( );
__declspec(implementation_key(751)) void IAcadDimOrdinate::PutSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(752)) VARIANT_BOOL IAcadDimOrdinate::GetSuppressZeroInches ( );
__declspec(implementation_key(753)) void IAcadDimOrdinate::PutSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(754)) VARIANT_BOOL IAcadDimOrdinate::GetToleranceSuppressZeroFeet ( );
__declspec(implementation_key(755)) void IAcadDimOrdinate::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(756)) VARIANT_BOOL IAcadDimOrdinate::GetToleranceSuppressZeroInches ( );
__declspec(implementation_key(757)) void IAcadDimOrdinate::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(758)) double IAcadDimOrdinate::GetArrowheadSize ( );
__declspec(implementation_key(759)) void IAcadDimOrdinate::PutArrowheadSize ( double size );
__declspec(implementation_key(760)) double IAcadDimOrdinate::GetMeasurement ( );
__declspec(implementation_key(761)) void IAcadDimRadial::PutLeaderLength ( double _arg1 );
__declspec(implementation_key(762)) VARIANT_BOOL IAcadDimRadial::GetAltUnits ( );
__declspec(implementation_key(763)) void IAcadDimRadial::PutAltUnits ( VARIANT_BOOL bAlternate );
__declspec(implementation_key(764)) enum AcDimPrecision IAcadDimRadial::GetAltUnitsPrecision ( );
__declspec(implementation_key(765)) void IAcadDimRadial::PutAltUnitsPrecision ( enum AcDimPrecision precision );
__declspec(implementation_key(766)) ACAD_NOUNITS IAcadDimRadial::GetAltUnitsScale ( );
__declspec(implementation_key(767)) void IAcadDimRadial::PutAltUnitsScale ( ACAD_NOUNITS scale );
__declspec(implementation_key(768)) double IAcadDimRadial::GetAltRoundDistance ( );
__declspec(implementation_key(769)) void IAcadDimRadial::PutAltRoundDistance ( double Distance );
__declspec(implementation_key(770)) enum AcDimPrecision IAcadDimRadial::GetAltTolerancePrecision ( );
__declspec(implementation_key(771)) void IAcadDimRadial::PutAltTolerancePrecision ( enum AcDimPrecision Distance );
__declspec(implementation_key(772)) enum AcDimUnits IAcadDimRadial::GetAltUnitsFormat ( );
__declspec(implementation_key(773)) void IAcadDimRadial::PutAltUnitsFormat ( enum AcDimUnits Units );
__declspec(implementation_key(774)) _bstr_t IAcadDimRadial::GetAltTextPrefix ( );
__declspec(implementation_key(775)) void IAcadDimRadial::PutAltTextPrefix ( _bstr_t prefix );
__declspec(implementation_key(776)) _bstr_t IAcadDimRadial::GetAltTextSuffix ( );
__declspec(implementation_key(777)) void IAcadDimRadial::PutAltTextSuffix ( _bstr_t prefix );
__declspec(implementation_key(778)) enum AcDimCenterType IAcadDimRadial::GetCenterType ( );
__declspec(implementation_key(779)) void IAcadDimRadial::PutCenterType ( enum AcDimCenterType Type );
__declspec(implementation_key(780)) double IAcadDimRadial::GetCenterMarkSize ( );
__declspec(implementation_key(781)) void IAcadDimRadial::PutCenterMarkSize ( double Type );
__declspec(implementation_key(782)) ACAD_COLOR IAcadDimRadial::GetDimensionLineColor ( );
__declspec(implementation_key(783)) void IAcadDimRadial::PutDimensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(784)) enum AcDimPrecision IAcadDimRadial::GetPrimaryUnitsPrecision ( );
__declspec(implementation_key(785)) void IAcadDimRadial::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec );
__declspec(implementation_key(786)) enum AcDimFractionType IAcadDimRadial::GetFractionFormat ( );
__declspec(implementation_key(787)) void IAcadDimRadial::PutFractionFormat ( enum AcDimFractionType Type );
__declspec(implementation_key(788)) enum AcDimFit IAcadDimRadial::GetFit ( );
__declspec(implementation_key(789)) void IAcadDimRadial::PutFit ( enum AcDimFit fittype );
__declspec(implementation_key(790)) ACAD_NOUNITS IAcadDimRadial::GetLinearScaleFactor ( );
__declspec(implementation_key(791)) void IAcadDimRadial::PutLinearScaleFactor ( ACAD_NOUNITS Type );
__declspec(implementation_key(792)) enum AcDimLUnits IAcadDimRadial::GetUnitsFormat ( );
__declspec(implementation_key(793)) void IAcadDimRadial::PutUnitsFormat ( enum AcDimLUnits format );
__declspec(implementation_key(794)) double IAcadDimRadial::GetRoundDistance ( );
__declspec(implementation_key(795)) void IAcadDimRadial::PutRoundDistance ( double Distance );
__declspec(implementation_key(796)) VARIANT_BOOL IAcadDimRadial::GetDimLineSuppress ( );
__declspec(implementation_key(797)) void IAcadDimRadial::PutDimLineSuppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(798)) VARIANT_BOOL IAcadDimRadial::GetTextInsideAlign ( );
__declspec(implementation_key(799)) void IAcadDimRadial::PutTextInsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(800)) VARIANT_BOOL IAcadDimRadial::GetTextInside ( );
__declspec(implementation_key(801)) void IAcadDimRadial::PutTextInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(802)) VARIANT_BOOL IAcadDimRadial::GetForceLineInside ( );
__declspec(implementation_key(803)) void IAcadDimRadial::PutForceLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(804)) VARIANT_BOOL IAcadDimRadial::GetTextOutsideAlign ( );
__declspec(implementation_key(805)) void IAcadDimRadial::PutTextOutsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(806)) VARIANT_BOOL IAcadDimRadial::GetAltSuppressLeadingZeros ( );
__declspec(implementation_key(807)) void IAcadDimRadial::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(808)) VARIANT_BOOL IAcadDimRadial::GetAltSuppressTrailingZeros ( );
__declspec(implementation_key(809)) void IAcadDimRadial::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(810)) VARIANT_BOOL IAcadDimRadial::GetAltSuppressZeroFeet ( );
__declspec(implementation_key(811)) void IAcadDimRadial::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(812)) VARIANT_BOOL IAcadDimRadial::GetAltSuppressZeroInches ( );
__declspec(implementation_key(813)) void IAcadDimRadial::PutAltSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(814)) VARIANT_BOOL IAcadDimRadial::GetAltToleranceSuppressLeadingZeros ( );
__declspec(implementation_key(815)) void IAcadDimRadial::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(816)) VARIANT_BOOL IAcadDimRadial::GetAltToleranceSuppressTrailingZeros ( );
__declspec(implementation_key(817)) void IAcadDimRadial::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(818)) VARIANT_BOOL IAcadDimRadial::GetAltToleranceSuppressZeroFeet ( );
__declspec(implementation_key(819)) void IAcadDimRadial::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(820)) VARIANT_BOOL IAcadDimRadial::GetAltToleranceSuppressZeroInches ( );
__declspec(implementation_key(821)) void IAcadDimRadial::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(822)) VARIANT_BOOL IAcadDimRadial::GetSuppressZeroFeet ( );
__declspec(implementation_key(823)) void IAcadDimRadial::PutSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(824)) VARIANT_BOOL IAcadDimRadial::GetSuppressZeroInches ( );
__declspec(implementation_key(825)) void IAcadDimRadial::PutSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(826)) VARIANT_BOOL IAcadDimRadial::GetToleranceSuppressZeroFeet ( );
__declspec(implementation_key(827)) void IAcadDimRadial::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(828)) VARIANT_BOOL IAcadDimRadial::GetToleranceSuppressZeroInches ( );
__declspec(implementation_key(829)) void IAcadDimRadial::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(830)) ACAD_LWEIGHT IAcadDimRadial::GetDimensionLineWeight ( );
__declspec(implementation_key(831)) void IAcadDimRadial::PutDimensionLineWeight ( ACAD_LWEIGHT weight );
__declspec(implementation_key(832)) double IAcadDimRadial::GetArrowheadSize ( );
__declspec(implementation_key(833)) void IAcadDimRadial::PutArrowheadSize ( double size );
__declspec(implementation_key(834)) enum AcDimArrowheadType IAcadDimRadial::GetArrowheadType ( );
__declspec(implementation_key(835)) void IAcadDimRadial::PutArrowheadType ( enum AcDimArrowheadType Type );
__declspec(implementation_key(836)) double IAcadDimRadial::GetMeasurement ( );
__declspec(implementation_key(837)) _bstr_t IAcadDimRadial::GetArrowheadBlock ( );
__declspec(implementation_key(838)) void IAcadDimRadial::PutArrowheadBlock ( _bstr_t BlockName );
__declspec(implementation_key(839)) _variant_t IAcadEllipse::GetStartPoint ( );
__declspec(implementation_key(840)) _variant_t IAcadEllipse::GetCenter ( );
__declspec(implementation_key(841)) void IAcadEllipse::PutCenter ( const _variant_t & Center );
__declspec(implementation_key(842)) _variant_t IAcadEllipse::GetEndPoint ( );
__declspec(implementation_key(843)) double IAcadEllipse::GetMajorRadius ( );
__declspec(implementation_key(844)) void IAcadEllipse::PutMajorRadius ( double MajorRadius );
__declspec(implementation_key(845)) double IAcadEllipse::GetMinorRadius ( );
__declspec(implementation_key(846)) void IAcadEllipse::PutMinorRadius ( double MinorRadius );
__declspec(implementation_key(847)) double IAcadEllipse::GetRadiusRatio ( );
__declspec(implementation_key(848)) void IAcadEllipse::PutRadiusRatio ( double RadiusRatio );
__declspec(implementation_key(849)) ACAD_ANGLE IAcadEllipse::GetStartAngle ( );
__declspec(implementation_key(850)) void IAcadEllipse::PutStartAngle ( ACAD_ANGLE StartAngle );
__declspec(implementation_key(851)) ACAD_ANGLE IAcadEllipse::GetEndAngle ( );
__declspec(implementation_key(852)) void IAcadEllipse::PutEndAngle ( ACAD_ANGLE EndAngle );
__declspec(implementation_key(853)) double IAcadEllipse::GetStartParameter ( );
__declspec(implementation_key(854)) void IAcadEllipse::PutStartParameter ( double StartParameter );
__declspec(implementation_key(855)) double IAcadEllipse::GetEndParameter ( );
__declspec(implementation_key(856)) void IAcadEllipse::PutEndParameter ( double EndParameter );
__declspec(implementation_key(857)) _variant_t IAcadEllipse::GetMajorAxis ( );
__declspec(implementation_key(858)) void IAcadEllipse::PutMajorAxis ( const _variant_t & MajorAxis );
__declspec(implementation_key(859)) _variant_t IAcadEllipse::GetMinorAxis ( );
__declspec(implementation_key(860)) _variant_t IAcadEllipse::GetNormal ( );
__declspec(implementation_key(861)) void IAcadEllipse::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(862)) double IAcadEllipse::GetArea ( );
__declspec(implementation_key(863)) _variant_t IAcadEllipse::Offset ( double Distance );
__declspec(implementation_key(864)) _variant_t IAcadLeader::GetCoordinates ( );
__declspec(implementation_key(865)) void IAcadLeader::PutCoordinates ( const _variant_t & Coordinates );
__declspec(implementation_key(866)) _variant_t IAcadLeader::GetNormal ( );
__declspec(implementation_key(867)) _bstr_t IAcadLeader::GetStyleName ( );
__declspec(implementation_key(868)) void IAcadLeader::PutStyleName ( _bstr_t bstrName );
__declspec(implementation_key(869)) enum AcLeaderType IAcadLeader::GetType ( );
__declspec(implementation_key(870)) void IAcadLeader::PutType ( enum AcLeaderType Type );
__declspec(implementation_key(871)) HRESULT IAcadLeader::Evaluate ( );
__declspec(implementation_key(872)) _variant_t IAcadLeader::GetCoordinate ( int Index );
__declspec(implementation_key(873)) void IAcadLeader::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(874)) IAcadEntityPtr IAcadLeader::GetAnnotation ( );
__declspec(implementation_key(875)) void IAcadLeader::PutAnnotation ( struct IAcadEntity * pVal );
__declspec(implementation_key(876)) double IAcadLeader::GetArrowheadSize ( );
__declspec(implementation_key(877)) void IAcadLeader::PutArrowheadSize ( double size );
__declspec(implementation_key(878)) enum AcDimArrowheadType IAcadLeader::GetArrowheadType ( );
__declspec(implementation_key(879)) void IAcadLeader::PutArrowheadType ( enum AcDimArrowheadType Type );
__declspec(implementation_key(880)) ACAD_COLOR IAcadLeader::GetDimensionLineColor ( );
__declspec(implementation_key(881)) void IAcadLeader::PutDimensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(882)) ACAD_LWEIGHT IAcadLeader::GetDimensionLineWeight ( );
__declspec(implementation_key(883)) void IAcadLeader::PutDimensionLineWeight ( ACAD_LWEIGHT weight );
__declspec(implementation_key(884)) ACAD_NOUNITS IAcadLeader::GetScaleFactor ( );
__declspec(implementation_key(885)) void IAcadLeader::PutScaleFactor ( ACAD_NOUNITS factor );
__declspec(implementation_key(886)) enum AcDimVerticalJustification IAcadLeader::GetVerticalTextPosition ( );
__declspec(implementation_key(887)) void IAcadLeader::PutVerticalTextPosition ( enum AcDimVerticalJustification Type );
__declspec(implementation_key(888)) double IAcadLeader::GetTextGap ( );
__declspec(implementation_key(889)) void IAcadLeader::PutTextGap ( double Offset );
__declspec(implementation_key(890)) _bstr_t IAcadLeader::GetArrowheadBlock ( );
__declspec(implementation_key(891)) void IAcadLeader::PutArrowheadBlock ( _bstr_t BlockName );
__declspec(implementation_key(892)) _bstr_t IAcadMText::GetTextString ( );
__declspec(implementation_key(893)) void IAcadMText::PutTextString ( _bstr_t bstrText );
__declspec(implementation_key(894)) _bstr_t IAcadMText::GetStyleName ( );
__declspec(implementation_key(895)) void IAcadMText::PutStyleName ( _bstr_t bstrName );
__declspec(implementation_key(896)) enum AcAttachmentPoint IAcadMText::GetAttachmentPoint ( );
__declspec(implementation_key(897)) void IAcadMText::PutAttachmentPoint ( enum AcAttachmentPoint attPoint );
__declspec(implementation_key(898)) enum AcDrawingDirection IAcadMText::GetDrawingDirection ( );
__declspec(implementation_key(899)) void IAcadMText::PutDrawingDirection ( enum AcDrawingDirection drawDir );
__declspec(implementation_key(900)) double IAcadMText::GetWidth ( );
__declspec(implementation_key(901)) void IAcadMText::PutWidth ( double Width );
__declspec(implementation_key(902)) double IAcadMText::GetHeight ( );
__declspec(implementation_key(903)) void IAcadMText::PutHeight ( double Height );
__declspec(implementation_key(904)) ACAD_ANGLE IAcadMText::GetRotation ( );
__declspec(implementation_key(905)) void IAcadMText::PutRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(906)) _variant_t IAcadMText::GetInsertionPoint ( );
__declspec(implementation_key(907)) void IAcadMText::PutInsertionPoint ( const _variant_t & insPoint );
__declspec(implementation_key(908)) _variant_t IAcadMText::GetNormal ( );
__declspec(implementation_key(909)) void IAcadMText::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(910)) double IAcadMText::GetLineSpacingFactor ( );
__declspec(implementation_key(911)) void IAcadMText::PutLineSpacingFactor ( double factor );
__declspec(implementation_key(912)) enum AcLineSpacingStyle IAcadMText::GetLineSpacingStyle ( );
__declspec(implementation_key(913)) void IAcadMText::PutLineSpacingStyle ( enum AcLineSpacingStyle style );
__declspec(implementation_key(914)) double IAcadMText::GetLineSpacingDistance ( );
__declspec(implementation_key(915)) void IAcadMText::PutLineSpacingDistance ( double Value );
__declspec(implementation_key(916)) _variant_t IAcadPoint::GetCoordinates ( );
__declspec(implementation_key(917)) void IAcadPoint::PutCoordinates ( const _variant_t & Coordinates );
__declspec(implementation_key(918)) _variant_t IAcadPoint::GetNormal ( );
__declspec(implementation_key(919)) void IAcadPoint::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(920)) double IAcadPoint::GetThickness ( );
__declspec(implementation_key(921)) void IAcadPoint::PutThickness ( double Thickness );
__declspec(implementation_key(922)) _variant_t IAcadLWPolyline::GetCoordinates ( );
__declspec(implementation_key(923)) void IAcadLWPolyline::PutCoordinates ( const _variant_t & Coordinates );
__declspec(implementation_key(924)) _variant_t IAcadLWPolyline::GetNormal ( );
__declspec(implementation_key(925)) void IAcadLWPolyline::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(926)) double IAcadLWPolyline::GetThickness ( );
__declspec(implementation_key(927)) void IAcadLWPolyline::PutThickness ( double Thickness );
__declspec(implementation_key(928)) HRESULT IAcadLWPolyline::AddVertex ( int Index, const _variant_t & vertex );
__declspec(implementation_key(929)) _variant_t IAcadLWPolyline::Explode ( );
__declspec(implementation_key(930)) double IAcadLWPolyline::GetBulge ( int Index );
__declspec(implementation_key(931)) HRESULT IAcadLWPolyline::SetBulge ( int Index, double bulge );
__declspec(implementation_key(932)) HRESULT IAcadLWPolyline::GetWidth ( int Index, double * StartWidth, double * EndWidth );
__declspec(implementation_key(933)) HRESULT IAcadLWPolyline::SetWidth ( int Index, double StartWidth, double EndWidth );
__declspec(implementation_key(934)) double IAcadLWPolyline::GetConstantWidth ( );
__declspec(implementation_key(935)) void IAcadLWPolyline::PutConstantWidth ( double Width );
__declspec(implementation_key(936)) _variant_t IAcadLWPolyline::Offset ( double Distance );
__declspec(implementation_key(937)) double IAcadLWPolyline::GetElevation ( );
__declspec(implementation_key(938)) void IAcadLWPolyline::PutElevation ( double Elevation );
__declspec(implementation_key(939)) double IAcadLWPolyline::GetArea ( );
__declspec(implementation_key(940)) _variant_t IAcadLWPolyline::GetCoordinate ( int Index );
__declspec(implementation_key(941)) void IAcadLWPolyline::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(942)) VARIANT_BOOL IAcadLWPolyline::GetClosed ( );
__declspec(implementation_key(943)) void IAcadLWPolyline::PutClosed ( VARIANT_BOOL fClose );
__declspec(implementation_key(944)) VARIANT_BOOL IAcadLWPolyline::GetLinetypeGeneration ( );
__declspec(implementation_key(945)) void IAcadLWPolyline::PutLinetypeGeneration ( VARIANT_BOOL bLinetypeGen );
__declspec(implementation_key(946)) double IAcadLWPolyline::GetLength ( );
__declspec(implementation_key(947)) _variant_t IAcadPolyline::GetCoordinates ( );
__declspec(implementation_key(948)) void IAcadPolyline::PutCoordinates ( const _variant_t & Coordinates );
__declspec(implementation_key(949)) _variant_t IAcadPolyline::GetNormal ( );
__declspec(implementation_key(950)) void IAcadPolyline::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(951)) double IAcadPolyline::GetThickness ( );
__declspec(implementation_key(952)) void IAcadPolyline::PutThickness ( double Thickness );
__declspec(implementation_key(953)) HRESULT IAcadPolyline::AppendVertex ( const _variant_t & vertex );
__declspec(implementation_key(954)) _variant_t IAcadPolyline::Explode ( );
__declspec(implementation_key(955)) double IAcadPolyline::GetBulge ( int Index );
__declspec(implementation_key(956)) HRESULT IAcadPolyline::SetBulge ( int Index, double bulge );
__declspec(implementation_key(957)) HRESULT IAcadPolyline::GetWidth ( int Index, double * StartWidth, double * EndWidth );
__declspec(implementation_key(958)) HRESULT IAcadPolyline::SetWidth ( int Index, double StartWidth, double EndWidth );
__declspec(implementation_key(959)) double IAcadPolyline::GetConstantWidth ( );
__declspec(implementation_key(960)) void IAcadPolyline::PutConstantWidth ( double Width );
__declspec(implementation_key(961)) _variant_t IAcadPolyline::Offset ( double Distance );
__declspec(implementation_key(962)) double IAcadPolyline::GetElevation ( );
__declspec(implementation_key(963)) void IAcadPolyline::PutElevation ( double Elevation );
__declspec(implementation_key(964)) enum AcPolylineType IAcadPolyline::GetType ( );
__declspec(implementation_key(965)) void IAcadPolyline::PutType ( enum AcPolylineType Type );
__declspec(implementation_key(966)) VARIANT_BOOL IAcadPolyline::GetClosed ( );
__declspec(implementation_key(967)) void IAcadPolyline::PutClosed ( VARIANT_BOOL fClose );
__declspec(implementation_key(968)) VARIANT_BOOL IAcadPolyline::GetLinetypeGeneration ( );
__declspec(implementation_key(969)) void IAcadPolyline::PutLinetypeGeneration ( VARIANT_BOOL bLinetypeGen );
__declspec(implementation_key(970)) double IAcadPolyline::GetArea ( );
__declspec(implementation_key(971)) _variant_t IAcadPolyline::GetCoordinate ( int Index );
__declspec(implementation_key(972)) void IAcadPolyline::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(973)) double IAcadPolyline::GetLength ( );
__declspec(implementation_key(974)) _variant_t IAcadRay::GetBasePoint ( );
__declspec(implementation_key(975)) void IAcadRay::PutBasePoint ( const _variant_t & BasePoint );
__declspec(implementation_key(976)) _variant_t IAcadRay::GetSecondPoint ( );
__declspec(implementation_key(977)) void IAcadRay::PutSecondPoint ( const _variant_t & SecondPoint );
__declspec(implementation_key(978)) _variant_t IAcadRay::GetDirectionVector ( );
__declspec(implementation_key(979)) void IAcadRay::PutDirectionVector ( const _variant_t & dirVector );
__declspec(implementation_key(980)) _variant_t IAcadShape::GetInsertionPoint ( );
__declspec(implementation_key(981)) void IAcadShape::PutInsertionPoint ( const _variant_t & insPoint );
__declspec(implementation_key(982)) _bstr_t IAcadShape::GetName ( );
__declspec(implementation_key(983)) void IAcadShape::PutName ( _bstr_t bstrName );
__declspec(implementation_key(984)) double IAcadShape::GetHeight ( );
__declspec(implementation_key(985)) void IAcadShape::PutHeight ( double Height );
__declspec(implementation_key(986)) ACAD_ANGLE IAcadShape::GetRotation ( );
__declspec(implementation_key(987)) void IAcadShape::PutRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(988)) ACAD_NOUNITS IAcadShape::GetScaleFactor ( );
__declspec(implementation_key(989)) void IAcadShape::PutScaleFactor ( ACAD_NOUNITS scalFactor );
__declspec(implementation_key(990)) ACAD_ANGLE IAcadShape::GetObliqueAngle ( );
__declspec(implementation_key(991)) void IAcadShape::PutObliqueAngle ( ACAD_ANGLE obliAngle );
__declspec(implementation_key(992)) _variant_t IAcadShape::GetNormal ( );
__declspec(implementation_key(993)) void IAcadShape::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(994)) double IAcadShape::GetThickness ( );
__declspec(implementation_key(995)) void IAcadShape::PutThickness ( double Thickness );
__declspec(implementation_key(996)) _variant_t IAcadSolid::GetCoordinates ( );
__declspec(implementation_key(997)) void IAcadSolid::PutCoordinates ( const _variant_t & corners );
__declspec(implementation_key(998)) _variant_t IAcadSolid::GetNormal ( );
__declspec(implementation_key(999)) void IAcadSolid::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1000)) double IAcadSolid::GetThickness ( );
__declspec(implementation_key(1001)) void IAcadSolid::PutThickness ( double Thickness );
__declspec(implementation_key(1002)) _variant_t IAcadSolid::GetCoordinate ( int Index );
__declspec(implementation_key(1003)) void IAcadSolid::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(1004)) long IAcadSpline::GetNumberOfControlPoints ( );
__declspec(implementation_key(1005)) _variant_t IAcadSpline::GetControlPoints ( );
__declspec(implementation_key(1006)) void IAcadSpline::PutControlPoints ( const _variant_t & controlPoint );
__declspec(implementation_key(1007)) long IAcadSpline::GetNumberOfFitPoints ( );
__declspec(implementation_key(1008)) _variant_t IAcadSpline::GetFitPoints ( );
__declspec(implementation_key(1009)) void IAcadSpline::PutFitPoints ( const _variant_t & fitPoint );
__declspec(implementation_key(1010)) long IAcadSpline::GetDegree ( );
__declspec(implementation_key(1011)) VARIANT_BOOL IAcadSpline::GetClosed ( );
__declspec(implementation_key(1012)) VARIANT_BOOL IAcadSpline::GetIsPlanar ( );
__declspec(implementation_key(1013)) VARIANT_BOOL IAcadSpline::GetIsRational ( );
__declspec(implementation_key(1014)) VARIANT_BOOL IAcadSpline::GetIsPeriodic ( );
__declspec(implementation_key(1015)) _variant_t IAcadSpline::GetStartTangent ( );
__declspec(implementation_key(1016)) void IAcadSpline::PutStartTangent ( const _variant_t & StartTangent );
__declspec(implementation_key(1017)) _variant_t IAcadSpline::GetEndTangent ( );
__declspec(implementation_key(1018)) void IAcadSpline::PutEndTangent ( const _variant_t & EndTangent );
__declspec(implementation_key(1019)) double IAcadSpline::GetFitTolerance ( );
__declspec(implementation_key(1020)) void IAcadSpline::PutFitTolerance ( double fitTol );
__declspec(implementation_key(1021)) double IAcadSpline::GetArea ( );
__declspec(implementation_key(1022)) HRESULT IAcadSpline::SetControlPoint ( int Index, const _variant_t & controlPoint );
__declspec(implementation_key(1023)) _variant_t IAcadSpline::GetControlPoint ( int Index );
__declspec(implementation_key(1024)) HRESULT IAcadSpline::SetFitPoint ( int Index, const _variant_t & fitPoint );
__declspec(implementation_key(1025)) _variant_t IAcadSpline::GetFitPoint ( int Index );
__declspec(implementation_key(1026)) HRESULT IAcadSpline::SetWeight ( int Index, double weight );
__declspec(implementation_key(1027)) double IAcadSpline::GetWeight ( int Index );
__declspec(implementation_key(1028)) HRESULT IAcadSpline::AddFitPoint ( int Index, const _variant_t & fitPoint );
__declspec(implementation_key(1029)) HRESULT IAcadSpline::DeleteFitPoint ( int Index );
__declspec(implementation_key(1030)) HRESULT IAcadSpline::ElevateOrder ( int Order );
__declspec(implementation_key(1031)) _variant_t IAcadSpline::Offset ( double Distance );
__declspec(implementation_key(1032)) HRESULT IAcadSpline::PurgeFitData ( );
__declspec(implementation_key(1033)) HRESULT IAcadSpline::Reverse ( );
__declspec(implementation_key(1034)) _variant_t IAcadSpline::GetKnots ( );
__declspec(implementation_key(1035)) void IAcadSpline::PutKnots ( const _variant_t & KnotValues );
__declspec(implementation_key(1036)) _variant_t IAcadSpline::GetWeights ( );
__declspec(implementation_key(1037)) void IAcadSpline::PutWeights ( const _variant_t & WeightValues );
__declspec(implementation_key(1038)) _bstr_t IAcadText::GetTextString ( );
__declspec(implementation_key(1039)) void IAcadText::PutTextString ( _bstr_t bstrText );
__declspec(implementation_key(1040)) _bstr_t IAcadText::GetStyleName ( );
__declspec(implementation_key(1041)) void IAcadText::PutStyleName ( _bstr_t bstrName );
__declspec(implementation_key(1042)) enum AcAlignment IAcadText::GetAlignment ( );
__declspec(implementation_key(1043)) void IAcadText::PutAlignment ( enum AcAlignment align );
__declspec(implementation_key(1044)) enum AcHorizontalAlignment IAcadText::GetHorizontalAlignment ( );
__declspec(implementation_key(1045)) void IAcadText::PutHorizontalAlignment ( enum AcHorizontalAlignment horizAlign );
__declspec(implementation_key(1046)) enum AcVerticalAlignment IAcadText::GetVerticalAlignment ( );
__declspec(implementation_key(1047)) void IAcadText::PutVerticalAlignment ( enum AcVerticalAlignment vertiAlign );
__declspec(implementation_key(1048)) double IAcadText::GetHeight ( );
__declspec(implementation_key(1049)) void IAcadText::PutHeight ( double Height );
__declspec(implementation_key(1050)) ACAD_ANGLE IAcadText::GetRotation ( );
__declspec(implementation_key(1051)) void IAcadText::PutRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(1052)) ACAD_NOUNITS IAcadText::GetScaleFactor ( );
__declspec(implementation_key(1053)) void IAcadText::PutScaleFactor ( ACAD_NOUNITS scalFactor );
__declspec(implementation_key(1054)) ACAD_ANGLE IAcadText::GetObliqueAngle ( );
__declspec(implementation_key(1055)) void IAcadText::PutObliqueAngle ( ACAD_ANGLE obliAngle );
__declspec(implementation_key(1056)) _variant_t IAcadText::GetTextAlignmentPoint ( );
__declspec(implementation_key(1057)) void IAcadText::PutTextAlignmentPoint ( const _variant_t & alignPoint );
__declspec(implementation_key(1058)) _variant_t IAcadText::GetInsertionPoint ( );
__declspec(implementation_key(1059)) void IAcadText::PutInsertionPoint ( const _variant_t & insPoint );
__declspec(implementation_key(1060)) _variant_t IAcadText::GetNormal ( );
__declspec(implementation_key(1061)) void IAcadText::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1062)) long IAcadText::GetTextGenerationFlag ( );
__declspec(implementation_key(1063)) void IAcadText::PutTextGenerationFlag ( long textGenFlag );
__declspec(implementation_key(1064)) double IAcadText::GetThickness ( );
__declspec(implementation_key(1065)) void IAcadText::PutThickness ( double Thickness );
__declspec(implementation_key(1066)) VARIANT_BOOL IAcadText::GetUpsideDown ( );
__declspec(implementation_key(1067)) void IAcadText::PutUpsideDown ( VARIANT_BOOL UpsideDown );
__declspec(implementation_key(1068)) VARIANT_BOOL IAcadText::GetBackward ( );
__declspec(implementation_key(1069)) void IAcadText::PutBackward ( VARIANT_BOOL Backward );
__declspec(implementation_key(1070)) _variant_t IAcadTolerance::GetDirectionVector ( );
__declspec(implementation_key(1071)) void IAcadTolerance::PutDirectionVector ( const _variant_t & dirVector );
__declspec(implementation_key(1072)) _variant_t IAcadTolerance::GetInsertionPoint ( );
__declspec(implementation_key(1073)) void IAcadTolerance::PutInsertionPoint ( const _variant_t & insPoint );
__declspec(implementation_key(1074)) _variant_t IAcadTolerance::GetNormal ( );
__declspec(implementation_key(1075)) void IAcadTolerance::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1076)) _bstr_t IAcadTolerance::GetStyleName ( );
__declspec(implementation_key(1077)) void IAcadTolerance::PutStyleName ( _bstr_t bstrName );
__declspec(implementation_key(1078)) ACAD_COLOR IAcadTolerance::GetTextColor ( );
__declspec(implementation_key(1079)) void IAcadTolerance::PutTextColor ( ACAD_COLOR color );
__declspec(implementation_key(1080)) _bstr_t IAcadTolerance::GetTextString ( );
__declspec(implementation_key(1081)) void IAcadTolerance::PutTextString ( _bstr_t bstrText );
__declspec(implementation_key(1082)) _bstr_t IAcadTolerance::GetTextStyle ( );
__declspec(implementation_key(1083)) void IAcadTolerance::PutTextStyle ( _bstr_t style );
__declspec(implementation_key(1084)) double IAcadTolerance::GetTextHeight ( );
__declspec(implementation_key(1085)) void IAcadTolerance::PutTextHeight ( double Height );
__declspec(implementation_key(1086)) ACAD_NOUNITS IAcadTolerance::GetScaleFactor ( );
__declspec(implementation_key(1087)) void IAcadTolerance::PutScaleFactor ( ACAD_NOUNITS factor );
__declspec(implementation_key(1088)) ACAD_COLOR IAcadTolerance::GetDimensionLineColor ( );
__declspec(implementation_key(1089)) void IAcadTolerance::PutDimensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(1090)) _variant_t IAcadTrace::GetCoordinates ( );
__declspec(implementation_key(1091)) void IAcadTrace::PutCoordinates ( const _variant_t & corners );
__declspec(implementation_key(1092)) _variant_t IAcadTrace::GetNormal ( );
__declspec(implementation_key(1093)) void IAcadTrace::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1094)) double IAcadTrace::GetThickness ( );
__declspec(implementation_key(1095)) void IAcadTrace::PutThickness ( double Thickness );
__declspec(implementation_key(1096)) _variant_t IAcadTrace::GetCoordinate ( int Index );
__declspec(implementation_key(1097)) void IAcadTrace::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(1098)) _variant_t IAcadXline::GetBasePoint ( );
__declspec(implementation_key(1099)) void IAcadXline::PutBasePoint ( const _variant_t & BasePoint );
__declspec(implementation_key(1100)) _variant_t IAcadXline::GetSecondPoint ( );
__declspec(implementation_key(1101)) void IAcadXline::PutSecondPoint ( const _variant_t & SecondPoint );
__declspec(implementation_key(1102)) _variant_t IAcadXline::GetDirectionVector ( );
__declspec(implementation_key(1103)) void IAcadXline::PutDirectionVector ( const _variant_t & dirVector );
__declspec(implementation_key(1104)) _variant_t IAcadXline::Offset ( double Distance );
__declspec(implementation_key(1105)) _variant_t IAcadBlockReference::GetInsertionPoint ( );
__declspec(implementation_key(1106)) void IAcadBlockReference::PutInsertionPoint ( const _variant_t & insPoint );
__declspec(implementation_key(1107)) _bstr_t IAcadBlockReference::GetName ( );
__declspec(implementation_key(1108)) void IAcadBlockReference::PutName ( _bstr_t bstrName );
__declspec(implementation_key(1109)) _variant_t IAcadBlockReference::GetNormal ( );
__declspec(implementation_key(1110)) void IAcadBlockReference::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1111)) ACAD_ANGLE IAcadBlockReference::GetRotation ( );
__declspec(implementation_key(1112)) void IAcadBlockReference::PutRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(1113)) ACAD_NOUNITS IAcadBlockReference::GetXScaleFactor ( );
__declspec(implementation_key(1114)) void IAcadBlockReference::PutXScaleFactor ( ACAD_NOUNITS ScaleFactor );
__declspec(implementation_key(1115)) ACAD_NOUNITS IAcadBlockReference::GetYScaleFactor ( );
__declspec(implementation_key(1116)) void IAcadBlockReference::PutYScaleFactor ( ACAD_NOUNITS ScaleFactor );
__declspec(implementation_key(1117)) ACAD_NOUNITS IAcadBlockReference::GetZScaleFactor ( );
__declspec(implementation_key(1118)) void IAcadBlockReference::PutZScaleFactor ( ACAD_NOUNITS ScaleFactor );
__declspec(implementation_key(1119)) _variant_t IAcadBlockReference::Explode ( );
__declspec(implementation_key(1120)) _variant_t IAcadBlockReference::GetAttributes ( );
__declspec(implementation_key(1121)) _variant_t IAcadBlockReference::GetConstantAttributes ( );
__declspec(implementation_key(1122)) VARIANT_BOOL IAcadBlockReference::GetHasAttributes ( );
__declspec(implementation_key(1123)) _variant_t IAcadHatch::GetNormal ( );
__declspec(implementation_key(1124)) void IAcadHatch::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1125)) long IAcadHatch::GetNumberOfLoops ( );
__declspec(implementation_key(1126)) enum AcPatternType IAcadHatch::GetPatternType ( );
__declspec(implementation_key(1127)) _bstr_t IAcadHatch::GetPatternName ( );
__declspec(implementation_key(1128)) ACAD_ANGLE IAcadHatch::GetPatternAngle ( );
__declspec(implementation_key(1129)) void IAcadHatch::PutPatternAngle ( ACAD_ANGLE PatternAngle );
__declspec(implementation_key(1130)) ACAD_NOUNITS IAcadHatch::GetPatternScale ( );
__declspec(implementation_key(1131)) void IAcadHatch::PutPatternScale ( ACAD_NOUNITS PatternScale );
__declspec(implementation_key(1132)) double IAcadHatch::GetPatternSpace ( );
__declspec(implementation_key(1133)) void IAcadHatch::PutPatternSpace ( double PatternSpace );
__declspec(implementation_key(1134)) enum AcISOPenWidth IAcadHatch::GetISOPenWidth ( );
__declspec(implementation_key(1135)) void IAcadHatch::PutISOPenWidth ( enum AcISOPenWidth penWidth );
__declspec(implementation_key(1136)) VARIANT_BOOL IAcadHatch::GetPatternDouble ( );
__declspec(implementation_key(1137)) void IAcadHatch::PutPatternDouble ( VARIANT_BOOL bDouble );
__declspec(implementation_key(1138)) double IAcadHatch::GetElevation ( );
__declspec(implementation_key(1139)) void IAcadHatch::PutElevation ( double Elevation );
__declspec(implementation_key(1140)) VARIANT_BOOL IAcadHatch::GetAssociativeHatch ( );
__declspec(implementation_key(1141)) void IAcadHatch::PutAssociativeHatch ( VARIANT_BOOL fAssoc );
__declspec(implementation_key(1142)) enum AcHatchStyle IAcadHatch::GetHatchStyle ( );
__declspec(implementation_key(1143)) void IAcadHatch::PutHatchStyle ( enum AcHatchStyle HatchStyle );
__declspec(implementation_key(1144)) HRESULT IAcadHatch::SetPattern ( int PatternType, _bstr_t PatternName );
__declspec(implementation_key(1145)) HRESULT IAcadHatch::AppendOuterLoop ( const _variant_t & ObjectArray );
__declspec(implementation_key(1146)) HRESULT IAcadHatch::AppendInnerLoop ( const _variant_t & ObjectArray );
__declspec(implementation_key(1147)) HRESULT IAcadHatch::InsertLoopAt ( int Index, enum AcLoopType LoopType, const _variant_t & ObjectArray );
__declspec(implementation_key(1148)) HRESULT IAcadHatch::GetLoopAt ( int Index, VARIANT * ObjectArray );
__declspec(implementation_key(1149)) HRESULT IAcadHatch::Evaluate ( );
__declspec(implementation_key(1150)) IAcadAcCmColorPtr IAcadHatch::GetGradientColor1 ( );
__declspec(implementation_key(1151)) void IAcadHatch::PutGradientColor1 ( struct IAcadAcCmColor * pColor );
__declspec(implementation_key(1152)) IAcadAcCmColorPtr IAcadHatch::GetGradientColor2 ( );
__declspec(implementation_key(1153)) void IAcadHatch::PutGradientColor2 ( struct IAcadAcCmColor * pColor );
__declspec(implementation_key(1154)) ACAD_ANGLE IAcadHatch::GetGradientAngle ( );
__declspec(implementation_key(1155)) void IAcadHatch::PutGradientAngle ( ACAD_ANGLE GradientAngle );
__declspec(implementation_key(1156)) VARIANT_BOOL IAcadHatch::GetGradientCentered ( );
__declspec(implementation_key(1157)) void IAcadHatch::PutGradientCentered ( VARIANT_BOOL fCentered );
__declspec(implementation_key(1158)) _bstr_t IAcadHatch::GetGradientName ( );
__declspec(implementation_key(1159)) void IAcadHatch::PutGradientName ( _bstr_t bstrName );
__declspec(implementation_key(1160)) enum AcHatchObjectType IAcadHatch::GetHatchObjectType ( );
__declspec(implementation_key(1161)) void IAcadHatch::PutHatchObjectType ( enum AcHatchObjectType hatchType );
__declspec(implementation_key(1162)) long IAcadRasterImage::GetBrightness ( );
__declspec(implementation_key(1163)) void IAcadRasterImage::PutBrightness ( long Brightness );
__declspec(implementation_key(1164)) long IAcadRasterImage::GetContrast ( );
__declspec(implementation_key(1165)) void IAcadRasterImage::PutContrast ( long Contrast );
__declspec(implementation_key(1166)) long IAcadRasterImage::GetFade ( );
__declspec(implementation_key(1167)) void IAcadRasterImage::PutFade ( long Fade );
__declspec(implementation_key(1168)) _variant_t IAcadRasterImage::GetOrigin ( );
__declspec(implementation_key(1169)) void IAcadRasterImage::PutOrigin ( const _variant_t & Origin );
__declspec(implementation_key(1170)) ACAD_ANGLE IAcadRasterImage::GetRotation ( );
__declspec(implementation_key(1171)) void IAcadRasterImage::PutRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(1172)) double IAcadRasterImage::GetImageWidth ( );
__declspec(implementation_key(1173)) void IAcadRasterImage::PutImageWidth ( double Width );
__declspec(implementation_key(1174)) double IAcadRasterImage::GetImageHeight ( );
__declspec(implementation_key(1175)) void IAcadRasterImage::PutImageHeight ( double Height );
__declspec(implementation_key(1176)) _bstr_t IAcadRasterImage::GetName ( );
__declspec(implementation_key(1177)) void IAcadRasterImage::PutName ( _bstr_t Name );
__declspec(implementation_key(1178)) void IAcadRasterImage::PutImageFile ( _bstr_t imageFileName );
__declspec(implementation_key(1179)) _bstr_t IAcadRasterImage::GetImageFile ( );
__declspec(implementation_key(1180)) VARIANT_BOOL IAcadRasterImage::GetImageVisibility ( );
__declspec(implementation_key(1181)) void IAcadRasterImage::PutImageVisibility ( VARIANT_BOOL fVisible );
__declspec(implementation_key(1182)) VARIANT_BOOL IAcadRasterImage::GetClippingEnabled ( );
__declspec(implementation_key(1183)) void IAcadRasterImage::PutClippingEnabled ( VARIANT_BOOL kClip );
__declspec(implementation_key(1184)) VARIANT_BOOL IAcadRasterImage::GetTransparency ( );
__declspec(implementation_key(1185)) void IAcadRasterImage::PutTransparency ( VARIANT_BOOL bTransp );
__declspec(implementation_key(1186)) HRESULT IAcadRasterImage::ClipBoundary ( const _variant_t & boundry );
__declspec(implementation_key(1187)) double IAcadRasterImage::GetHeight ( );
__declspec(implementation_key(1188)) double IAcadRasterImage::GetWidth ( );
__declspec(implementation_key(1189)) VARIANT_BOOL IAcadRasterImage::GetShowRotation ( );
__declspec(implementation_key(1190)) void IAcadRasterImage::PutShowRotation ( VARIANT_BOOL bShow );
__declspec(implementation_key(1191)) ACAD_NOUNITS IAcadRasterImage::GetScaleFactor ( );
__declspec(implementation_key(1192)) void IAcadRasterImage::PutScaleFactor ( ACAD_NOUNITS ScaleFactor );
__declspec(implementation_key(1193)) _variant_t IAcadLine::GetStartPoint ( );
__declspec(implementation_key(1194)) void IAcadLine::PutStartPoint ( const _variant_t & StartPoint );
__declspec(implementation_key(1195)) _variant_t IAcadLine::GetEndPoint ( );
__declspec(implementation_key(1196)) void IAcadLine::PutEndPoint ( const _variant_t & EndPoint );
__declspec(implementation_key(1197)) _variant_t IAcadLine::GetNormal ( );
__declspec(implementation_key(1198)) void IAcadLine::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1199)) double IAcadLine::GetThickness ( );
__declspec(implementation_key(1200)) void IAcadLine::PutThickness ( double Thickness );
__declspec(implementation_key(1201)) _variant_t IAcadLine::Offset ( double Distance );
__declspec(implementation_key(1202)) _variant_t IAcadLine::GetDelta ( );
__declspec(implementation_key(1203)) double IAcadLine::GetLength ( );
__declspec(implementation_key(1204)) ACAD_ANGLE IAcadLine::GetAngle ( );
__declspec(implementation_key(1205)) _bstr_t IAcadPlotConfiguration::GetName ( );
__declspec(implementation_key(1206)) void IAcadPlotConfiguration::PutName ( _bstr_t pName );
__declspec(implementation_key(1207)) _bstr_t IAcadPlotConfiguration::GetConfigName ( );
__declspec(implementation_key(1208)) void IAcadPlotConfiguration::PutConfigName ( _bstr_t pName );
__declspec(implementation_key(1209)) _bstr_t IAcadPlotConfiguration::GetCanonicalMediaName ( );
__declspec(implementation_key(1210)) void IAcadPlotConfiguration::PutCanonicalMediaName ( _bstr_t pName );
__declspec(implementation_key(1211)) enum AcPlotPaperUnits IAcadPlotConfiguration::GetPaperUnits ( );
__declspec(implementation_key(1212)) void IAcadPlotConfiguration::PutPaperUnits ( enum AcPlotPaperUnits pPaperUnits );
__declspec(implementation_key(1213)) VARIANT_BOOL IAcadPlotConfiguration::GetPlotViewportBorders ( );
__declspec(implementation_key(1214)) void IAcadPlotConfiguration::PutPlotViewportBorders ( VARIANT_BOOL pViewportBorders );
__declspec(implementation_key(1215)) VARIANT_BOOL IAcadPlotConfiguration::GetShowPlotStyles ( );
__declspec(implementation_key(1216)) void IAcadPlotConfiguration::PutShowPlotStyles ( VARIANT_BOOL pStyles );
__declspec(implementation_key(1217)) enum AcPlotRotation IAcadPlotConfiguration::GetPlotRotation ( );
__declspec(implementation_key(1218)) void IAcadPlotConfiguration::PutPlotRotation ( enum AcPlotRotation pRotation );
__declspec(implementation_key(1219)) VARIANT_BOOL IAcadPlotConfiguration::GetCenterPlot ( );
__declspec(implementation_key(1220)) void IAcadPlotConfiguration::PutCenterPlot ( VARIANT_BOOL pCentered );
__declspec(implementation_key(1221)) VARIANT_BOOL IAcadPlotConfiguration::GetPlotHidden ( );
__declspec(implementation_key(1222)) void IAcadPlotConfiguration::PutPlotHidden ( VARIANT_BOOL pHidden );
__declspec(implementation_key(1223)) enum AcPlotType IAcadPlotConfiguration::GetPlotType ( );
__declspec(implementation_key(1224)) void IAcadPlotConfiguration::PutPlotType ( enum AcPlotType pType );
__declspec(implementation_key(1225)) _bstr_t IAcadPlotConfiguration::GetViewToPlot ( );
__declspec(implementation_key(1226)) void IAcadPlotConfiguration::PutViewToPlot ( _bstr_t pName );
__declspec(implementation_key(1227)) VARIANT_BOOL IAcadPlotConfiguration::GetUseStandardScale ( );
__declspec(implementation_key(1228)) void IAcadPlotConfiguration::PutUseStandardScale ( VARIANT_BOOL pUseStdScale );
__declspec(implementation_key(1229)) enum AcPlotScale IAcadPlotConfiguration::GetStandardScale ( );
__declspec(implementation_key(1230)) void IAcadPlotConfiguration::PutStandardScale ( enum AcPlotScale pStdScale );
__declspec(implementation_key(1231)) HRESULT IAcadPlotConfiguration::GetCustomScale ( double * Numerator, double * Denominator );
__declspec(implementation_key(1232)) HRESULT IAcadPlotConfiguration::SetCustomScale ( double Numerator, double Denominator );
__declspec(implementation_key(1233)) VARIANT_BOOL IAcadPlotConfiguration::GetScaleLineweights ( );
__declspec(implementation_key(1234)) void IAcadPlotConfiguration::PutScaleLineweights ( VARIANT_BOOL pScale );
__declspec(implementation_key(1235)) VARIANT_BOOL IAcadPlotConfiguration::GetPlotWithLineweights ( );
__declspec(implementation_key(1236)) void IAcadPlotConfiguration::PutPlotWithLineweights ( VARIANT_BOOL pPlot );
__declspec(implementation_key(1237)) VARIANT_BOOL IAcadPlotConfiguration::GetPlotViewportsFirst ( );
__declspec(implementation_key(1238)) void IAcadPlotConfiguration::PutPlotViewportsFirst ( VARIANT_BOOL pViewportsFirst );
__declspec(implementation_key(1239)) _bstr_t IAcadPlotConfiguration::GetStyleSheet ( );
__declspec(implementation_key(1240)) void IAcadPlotConfiguration::PutStyleSheet ( _bstr_t pName );
__declspec(implementation_key(1241)) HRESULT IAcadPlotConfiguration::GetPaperMargins ( VARIANT * LowerLeft, VARIANT * UpperRight );
__declspec(implementation_key(1242)) HRESULT IAcadPlotConfiguration::GetPaperSize ( double * Width, double * Height );
__declspec(implementation_key(1243)) _variant_t IAcadPlotConfiguration::GetPlotOrigin ( );
__declspec(implementation_key(1244)) void IAcadPlotConfiguration::PutPlotOrigin ( const _variant_t & pOrigin );
__declspec(implementation_key(1245)) HRESULT IAcadPlotConfiguration::GetWindowToPlot ( VARIANT * LowerLeft, VARIANT * UpperRight );
__declspec(implementation_key(1246)) HRESULT IAcadPlotConfiguration::SetWindowToPlot ( const _variant_t & LowerLeft, const _variant_t & UpperRight );
__declspec(implementation_key(1247)) VARIANT_BOOL IAcadPlotConfiguration::GetPlotWithPlotStyles ( );
__declspec(implementation_key(1248)) void IAcadPlotConfiguration::PutPlotWithPlotStyles ( VARIANT_BOOL pStyles );
__declspec(implementation_key(1249)) VARIANT_BOOL IAcadPlotConfiguration::GetModelType ( );
__declspec(implementation_key(1250)) HRESULT IAcadPlotConfiguration::CopyFrom ( struct IAcadPlotConfiguration * pPlotConfig );
__declspec(implementation_key(1251)) _variant_t IAcadPlotConfiguration::GetCanonicalMediaNames ( );
__declspec(implementation_key(1252)) _variant_t IAcadPlotConfiguration::GetPlotDeviceNames ( );
__declspec(implementation_key(1253)) _variant_t IAcadPlotConfiguration::GetPlotStyleTableNames ( );
__declspec(implementation_key(1254)) HRESULT IAcadPlotConfiguration::RefreshPlotDeviceInfo ( );
__declspec(implementation_key(1255)) _bstr_t IAcadPlotConfiguration::GetLocaleMediaName ( _bstr_t Name );
__declspec(implementation_key(1256)) IAcadBlockPtr IAcadLayout::GetBlock ( );
__declspec(implementation_key(1257)) long IAcadLayout::GetTabOrder ( );
__declspec(implementation_key(1258)) void IAcadLayout::PutTabOrder ( long pOrder );
__declspec(implementation_key(1259)) void IAcadMInsertBlock::PutColumns ( long NumColumns );
__declspec(implementation_key(1260)) long IAcadMInsertBlock::GetColumns ( );
__declspec(implementation_key(1261)) void IAcadMInsertBlock::PutColumnSpacing ( double Spacing );
__declspec(implementation_key(1262)) double IAcadMInsertBlock::GetColumnSpacing ( );
__declspec(implementation_key(1263)) void IAcadMInsertBlock::PutRows ( long NumRows );
__declspec(implementation_key(1264)) long IAcadMInsertBlock::GetRows ( );
__declspec(implementation_key(1265)) void IAcadMInsertBlock::PutRowSpacing ( double Spacing );
__declspec(implementation_key(1266)) double IAcadMInsertBlock::GetRowSpacing ( );
__declspec(implementation_key(1267)) void IAcadPolyfaceMesh::PutCoordinates ( const _variant_t & Vertices );
__declspec(implementation_key(1268)) _variant_t IAcadPolyfaceMesh::GetCoordinates ( );
__declspec(implementation_key(1269)) _variant_t IAcadPolyfaceMesh::GetCoordinate ( int Index );
__declspec(implementation_key(1270)) void IAcadPolyfaceMesh::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(1271)) long IAcadPolyfaceMesh::GetNumberOfVertices ( );
__declspec(implementation_key(1272)) long IAcadPolyfaceMesh::GetNumberOfFaces ( );
__declspec(implementation_key(1273)) void IAcadPolyfaceMesh::PutFaces ( const _variant_t & _arg1 );
__declspec(implementation_key(1274)) _bstr_t IAcadMLine::GetStyleName ( );
__declspec(implementation_key(1275)) _variant_t IAcadMLine::GetCoordinates ( );
__declspec(implementation_key(1276)) void IAcadMLine::PutCoordinates ( const _variant_t & Vertices );
__declspec(implementation_key(1277)) _variant_t IAcadDim3PointAngular::GetExtLine1EndPoint ( );
__declspec(implementation_key(1278)) void IAcadDim3PointAngular::PutExtLine1EndPoint ( const _variant_t & xLine1Point );
__declspec(implementation_key(1279)) _variant_t IAcadDim3PointAngular::GetExtLine2EndPoint ( );
__declspec(implementation_key(1280)) void IAcadDim3PointAngular::PutExtLine2EndPoint ( const _variant_t & xLine2Point );
__declspec(implementation_key(1281)) _variant_t IAcadDim3PointAngular::GetAngleVertex ( );
__declspec(implementation_key(1282)) void IAcadDim3PointAngular::PutAngleVertex ( const _variant_t & AngleVertex );
__declspec(implementation_key(1283)) enum AcDimPrecision IAcadDim3PointAngular::GetTextPrecision ( );
__declspec(implementation_key(1284)) void IAcadDim3PointAngular::PutTextPrecision ( enum AcDimPrecision AngleVertex );
__declspec(implementation_key(1285)) enum AcAngleUnits IAcadDim3PointAngular::GetAngleFormat ( );
__declspec(implementation_key(1286)) void IAcadDim3PointAngular::PutAngleFormat ( enum AcAngleUnits format );
__declspec(implementation_key(1287)) ACAD_COLOR IAcadDim3PointAngular::GetDimensionLineColor ( );
__declspec(implementation_key(1288)) void IAcadDim3PointAngular::PutDimensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(1289)) ACAD_COLOR IAcadDim3PointAngular::GetExtensionLineColor ( );
__declspec(implementation_key(1290)) void IAcadDim3PointAngular::PutExtensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(1291)) double IAcadDim3PointAngular::GetExtensionLineExtend ( );
__declspec(implementation_key(1292)) void IAcadDim3PointAngular::PutExtensionLineExtend ( double extend );
__declspec(implementation_key(1293)) enum AcDimFit IAcadDim3PointAngular::GetFit ( );
__declspec(implementation_key(1294)) void IAcadDim3PointAngular::PutFit ( enum AcDimFit fittype );
__declspec(implementation_key(1295)) enum AcDimHorizontalJustification IAcadDim3PointAngular::GetHorizontalTextPosition ( );
__declspec(implementation_key(1296)) void IAcadDim3PointAngular::PutHorizontalTextPosition ( enum AcDimHorizontalJustification Type );
__declspec(implementation_key(1297)) ACAD_LWEIGHT IAcadDim3PointAngular::GetExtensionLineWeight ( );
__declspec(implementation_key(1298)) void IAcadDim3PointAngular::PutExtensionLineWeight ( ACAD_LWEIGHT lweight );
__declspec(implementation_key(1299)) VARIANT_BOOL IAcadDim3PointAngular::GetDimLine1Suppress ( );
__declspec(implementation_key(1300)) void IAcadDim3PointAngular::PutDimLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(1301)) VARIANT_BOOL IAcadDim3PointAngular::GetDimLine2Suppress ( );
__declspec(implementation_key(1302)) void IAcadDim3PointAngular::PutDimLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(1303)) VARIANT_BOOL IAcadDim3PointAngular::GetExtLine1Suppress ( );
__declspec(implementation_key(1304)) void IAcadDim3PointAngular::PutExtLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(1305)) VARIANT_BOOL IAcadDim3PointAngular::GetExtLine2Suppress ( );
__declspec(implementation_key(1306)) void IAcadDim3PointAngular::PutExtLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(1307)) VARIANT_BOOL IAcadDim3PointAngular::GetDimLineInside ( );
__declspec(implementation_key(1308)) void IAcadDim3PointAngular::PutDimLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(1309)) VARIANT_BOOL IAcadDim3PointAngular::GetTextInsideAlign ( );
__declspec(implementation_key(1310)) void IAcadDim3PointAngular::PutTextInsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(1311)) VARIANT_BOOL IAcadDim3PointAngular::GetTextInside ( );
__declspec(implementation_key(1312)) void IAcadDim3PointAngular::PutTextInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(1313)) VARIANT_BOOL IAcadDim3PointAngular::GetForceLineInside ( );
__declspec(implementation_key(1314)) void IAcadDim3PointAngular::PutForceLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(1315)) VARIANT_BOOL IAcadDim3PointAngular::GetTextOutsideAlign ( );
__declspec(implementation_key(1316)) void IAcadDim3PointAngular::PutTextOutsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(1317)) double IAcadDim3PointAngular::GetExtensionLineOffset ( );
__declspec(implementation_key(1318)) void IAcadDim3PointAngular::PutExtensionLineOffset ( double Offset );
__declspec(implementation_key(1319)) ACAD_LWEIGHT IAcadDim3PointAngular::GetDimensionLineWeight ( );
__declspec(implementation_key(1320)) void IAcadDim3PointAngular::PutDimensionLineWeight ( ACAD_LWEIGHT weight );
__declspec(implementation_key(1321)) double IAcadDim3PointAngular::GetArrowheadSize ( );
__declspec(implementation_key(1322)) void IAcadDim3PointAngular::PutArrowheadSize ( double size );
__declspec(implementation_key(1323)) enum AcDimArrowheadType IAcadDim3PointAngular::GetArrowhead1Type ( );
__declspec(implementation_key(1324)) void IAcadDim3PointAngular::PutArrowhead1Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(1325)) enum AcDimArrowheadType IAcadDim3PointAngular::GetArrowhead2Type ( );
__declspec(implementation_key(1326)) void IAcadDim3PointAngular::PutArrowhead2Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(1327)) ACAD_ANGLE IAcadDim3PointAngular::GetMeasurement ( );
__declspec(implementation_key(1328)) _bstr_t IAcadDim3PointAngular::GetArrowhead1Block ( );
__declspec(implementation_key(1329)) void IAcadDim3PointAngular::PutArrowhead1Block ( _bstr_t BlockName );
__declspec(implementation_key(1330)) _bstr_t IAcadDim3PointAngular::GetArrowhead2Block ( );
__declspec(implementation_key(1331)) void IAcadDim3PointAngular::PutArrowhead2Block ( _bstr_t BlockName );
__declspec(implementation_key(1332)) _bstr_t IAcadExternalReference::GetPath ( );
__declspec(implementation_key(1333)) void IAcadExternalReference::PutPath ( _bstr_t bstrName );
__declspec(implementation_key(1334)) IAcadPViewportPtr IAcadPaperSpace::AddPViewport ( const _variant_t & Center, double Width, double Height );
__declspec(implementation_key(1335)) _variant_t IAcadPViewport::GetCenter ( );
__declspec(implementation_key(1336)) void IAcadPViewport::PutCenter ( const _variant_t & CenterPoint );
__declspec(implementation_key(1337)) _variant_t IAcadPViewport::GetDirection ( );
__declspec(implementation_key(1338)) void IAcadPViewport::PutDirection ( const _variant_t & dirVector );
__declspec(implementation_key(1339)) VARIANT_BOOL IAcadPViewport::GetGridOn ( );
__declspec(implementation_key(1340)) void IAcadPViewport::PutGridOn ( VARIANT_BOOL bGridOn );
__declspec(implementation_key(1341)) double IAcadPViewport::GetHeight ( );
__declspec(implementation_key(1342)) void IAcadPViewport::PutHeight ( double Height );
__declspec(implementation_key(1343)) double IAcadPViewport::GetWidth ( );
__declspec(implementation_key(1344)) void IAcadPViewport::PutWidth ( double Width );
__declspec(implementation_key(1345)) VARIANT_BOOL IAcadPViewport::GetViewportOn ( );
__declspec(implementation_key(1346)) void IAcadPViewport::PutViewportOn ( VARIANT_BOOL bOn );
__declspec(implementation_key(1347)) VARIANT_BOOL IAcadPViewport::GetClipped ( );
__declspec(implementation_key(1348)) VARIANT_BOOL IAcadPViewport::GetDisplayLocked ( );
__declspec(implementation_key(1349)) void IAcadPViewport::PutDisplayLocked ( VARIANT_BOOL bLocked );
__declspec(implementation_key(1350)) enum AcViewportScale IAcadPViewport::GetStandardScale ( );
__declspec(implementation_key(1351)) void IAcadPViewport::PutStandardScale ( enum AcViewportScale scale );
__declspec(implementation_key(1352)) double IAcadPViewport::GetCustomScale ( );
__declspec(implementation_key(1353)) void IAcadPViewport::PutCustomScale ( double scale );
__declspec(implementation_key(1354)) _bstr_t IAcadPViewport::GetStyleSheet ( );
__declspec(implementation_key(1355)) void IAcadPViewport::PutStyleSheet ( _bstr_t pName );
__declspec(implementation_key(1356)) VARIANT_BOOL IAcadPViewport::GetUCSPerViewport ( );
__declspec(implementation_key(1357)) void IAcadPViewport::PutUCSPerViewport ( VARIANT_BOOL UCSSaved );
__declspec(implementation_key(1358)) _variant_t IAcadPViewport::GetSnapBasePoint ( );
__declspec(implementation_key(1359)) void IAcadPViewport::PutSnapBasePoint ( const _variant_t & lowLeft );
__declspec(implementation_key(1360)) VARIANT_BOOL IAcadPViewport::GetSnapOn ( );
__declspec(implementation_key(1361)) void IAcadPViewport::PutSnapOn ( VARIANT_BOOL bSnapOn );
__declspec(implementation_key(1362)) double IAcadPViewport::GetSnapRotationAngle ( );
__declspec(implementation_key(1363)) void IAcadPViewport::PutSnapRotationAngle ( double Angle );
__declspec(implementation_key(1364)) VARIANT_BOOL IAcadPViewport::GetUCSIconOn ( );
__declspec(implementation_key(1365)) void IAcadPViewport::PutUCSIconOn ( VARIANT_BOOL bIconOn );
__declspec(implementation_key(1366)) VARIANT_BOOL IAcadPViewport::GetUCSIconAtOrigin ( );
__declspec(implementation_key(1367)) void IAcadPViewport::PutUCSIconAtOrigin ( VARIANT_BOOL bIconAtOrigin );
__declspec(implementation_key(1368)) HRESULT IAcadPViewport::GetGridSpacing ( double * XSpacing, double * YSpacing );
__declspec(implementation_key(1369)) HRESULT IAcadPViewport::SetGridSpacing ( double XSpacing, double YSpacing );
__declspec(implementation_key(1370)) HRESULT IAcadPViewport::GetSnapSpacing ( double * XSpacing, double * YSpacing );
__declspec(implementation_key(1371)) HRESULT IAcadPViewport::SetSnapSpacing ( double XSpacing, double YSpacing );
__declspec(implementation_key(1372)) HRESULT IAcadPViewport::Display ( VARIANT_BOOL bStatus );
__declspec(implementation_key(1373)) ACAD_ANGLE IAcadPViewport::GetTwistAngle ( );
__declspec(implementation_key(1374)) void IAcadPViewport::PutTwistAngle ( ACAD_ANGLE Angle );
__declspec(implementation_key(1375)) double IAcadPViewport::GetLensLength ( );
__declspec(implementation_key(1376)) void IAcadPViewport::PutLensLength ( double Length );
__declspec(implementation_key(1377)) VARIANT_BOOL IAcadPViewport::GetRemoveHiddenLines ( );
__declspec(implementation_key(1378)) void IAcadPViewport::PutRemoveHiddenLines ( VARIANT_BOOL bRemoval );
__declspec(implementation_key(1379)) _variant_t IAcadPViewport::GetTarget ( );
__declspec(implementation_key(1380)) void IAcadPViewport::PutTarget ( const _variant_t & targetPoint );
__declspec(implementation_key(1381)) long IAcadPViewport::GetArcSmoothness ( );
__declspec(implementation_key(1382)) void IAcadPViewport::PutArcSmoothness ( long arcSmooth );
__declspec(implementation_key(1383)) enum AcShadePlot IAcadPViewport::GetShadePlot ( );
__declspec(implementation_key(1384)) void IAcadPViewport::PutShadePlot ( enum AcShadePlot ShadePlot );
__declspec(implementation_key(1385)) IAcadBlockPtr IAcadBlocks::Item ( const _variant_t & Index );
__declspec(implementation_key(1386)) long IAcadBlocks::GetCount ( );
__declspec(implementation_key(1387)) IUnknownPtr IAcadBlocks::Get_NewEnum ( );
__declspec(implementation_key(1388)) IAcadBlockPtr IAcadBlocks::Add ( const _variant_t & InsertionPoint, _bstr_t Name );
__declspec(implementation_key(1389)) IAcadGroupPtr IAcadGroups::Item ( const _variant_t & Index );
__declspec(implementation_key(1390)) long IAcadGroups::GetCount ( );
__declspec(implementation_key(1391)) IUnknownPtr IAcadGroups::Get_NewEnum ( );
__declspec(implementation_key(1392)) IAcadGroupPtr IAcadGroups::Add ( _bstr_t Name );
__declspec(implementation_key(1393)) IAcadEntityPtr IAcadGroup::Item ( const _variant_t & Index );
__declspec(implementation_key(1394)) IUnknownPtr IAcadGroup::Get_NewEnum ( );
__declspec(implementation_key(1395)) long IAcadGroup::GetCount ( );
__declspec(implementation_key(1396)) void IAcadGroup::PutTrueColor ( struct IAcadAcCmColor * _arg1 );
__declspec(implementation_key(1397)) void IAcadGroup::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(1398)) void IAcadGroup::PutLinetype ( _bstr_t _arg1 );
__declspec(implementation_key(1399)) void IAcadGroup::PutLinetypeScale ( ACAD_NOUNITS _arg1 );
__declspec(implementation_key(1400)) void IAcadGroup::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1401)) HRESULT IAcadGroup::Highlight ( VARIANT_BOOL HighlightFlag );
__declspec(implementation_key(1402)) void IAcadGroup::PutPlotStyleName ( _bstr_t _arg1 );
__declspec(implementation_key(1403)) void IAcadGroup::PutLineweight ( ACAD_LWEIGHT _arg1 );
__declspec(implementation_key(1404)) _bstr_t IAcadGroup::GetName ( );
__declspec(implementation_key(1405)) void IAcadGroup::PutName ( _bstr_t pVal );
__declspec(implementation_key(1406)) HRESULT IAcadGroup::AppendItems ( const _variant_t & Objects );
__declspec(implementation_key(1407)) HRESULT IAcadGroup::RemoveItems ( const _variant_t & Objects );
__declspec(implementation_key(1408)) HRESULT IAcadGroup::Update ( );
__declspec(implementation_key(1409)) void IAcadGroup::Putcolor ( enum AcColor _arg1 );
__declspec(implementation_key(1410)) IAcadDimStylePtr IAcadDimStyles::Item ( const _variant_t & Index );
__declspec(implementation_key(1411)) long IAcadDimStyles::GetCount ( );
__declspec(implementation_key(1412)) IUnknownPtr IAcadDimStyles::Get_NewEnum ( );
__declspec(implementation_key(1413)) IAcadDimStylePtr IAcadDimStyles::Add ( _bstr_t Name );
__declspec(implementation_key(1414)) _bstr_t IAcadDimStyle::GetName ( );
__declspec(implementation_key(1415)) void IAcadDimStyle::PutName ( _bstr_t bstrName );
__declspec(implementation_key(1416)) HRESULT IAcadDimStyle::CopyFrom ( IDispatch * StyleSource );
__declspec(implementation_key(1417)) IAcadLayerPtr IAcadLayers::Item ( const _variant_t & Index );
__declspec(implementation_key(1418)) long IAcadLayers::GetCount ( );
__declspec(implementation_key(1419)) IUnknownPtr IAcadLayers::Get_NewEnum ( );
__declspec(implementation_key(1420)) IAcadLayerPtr IAcadLayers::Add ( _bstr_t Name );
__declspec(implementation_key(1421)) enum AcColor IAcadLayer::Getcolor ( );
__declspec(implementation_key(1422)) void IAcadLayer::Putcolor ( enum AcColor color );
__declspec(implementation_key(1423)) IAcadAcCmColorPtr IAcadLayer::GetTrueColor ( );
__declspec(implementation_key(1424)) void IAcadLayer::PutTrueColor ( struct IAcadAcCmColor * pColor );
__declspec(implementation_key(1425)) VARIANT_BOOL IAcadLayer::GetFreeze ( );
__declspec(implementation_key(1426)) void IAcadLayer::PutFreeze ( VARIANT_BOOL bFreeze );
__declspec(implementation_key(1427)) VARIANT_BOOL IAcadLayer::GetLayerOn ( );
__declspec(implementation_key(1428)) void IAcadLayer::PutLayerOn ( VARIANT_BOOL bOn );
__declspec(implementation_key(1429)) _bstr_t IAcadLayer::GetLinetype ( );
__declspec(implementation_key(1430)) void IAcadLayer::PutLinetype ( _bstr_t Linetype );
__declspec(implementation_key(1431)) VARIANT_BOOL IAcadLayer::GetLock ( );
__declspec(implementation_key(1432)) void IAcadLayer::PutLock ( VARIANT_BOOL Block );
__declspec(implementation_key(1433)) _bstr_t IAcadLayer::GetName ( );
__declspec(implementation_key(1434)) void IAcadLayer::PutName ( _bstr_t bstrName );
__declspec(implementation_key(1435)) VARIANT_BOOL IAcadLayer::GetPlottable ( );
__declspec(implementation_key(1436)) void IAcadLayer::PutPlottable ( VARIANT_BOOL bPlottable );
__declspec(implementation_key(1437)) VARIANT_BOOL IAcadLayer::GetViewportDefault ( );
__declspec(implementation_key(1438)) void IAcadLayer::PutViewportDefault ( VARIANT_BOOL bDefault );
__declspec(implementation_key(1439)) _bstr_t IAcadLayer::GetPlotStyleName ( );
__declspec(implementation_key(1440)) void IAcadLayer::PutPlotStyleName ( _bstr_t plotStyle );
__declspec(implementation_key(1441)) ACAD_LWEIGHT IAcadLayer::GetLineweight ( );
__declspec(implementation_key(1442)) void IAcadLayer::PutLineweight ( ACAD_LWEIGHT Lineweight );
__declspec(implementation_key(1443)) IAcadLineTypePtr IAcadLineTypes::Item ( const _variant_t & Index );
__declspec(implementation_key(1444)) long IAcadLineTypes::GetCount ( );
__declspec(implementation_key(1445)) IUnknownPtr IAcadLineTypes::Get_NewEnum ( );
__declspec(implementation_key(1446)) IAcadLineTypePtr IAcadLineTypes::Add ( _bstr_t Name );
__declspec(implementation_key(1447)) HRESULT IAcadLineTypes::Load ( _bstr_t Name, _bstr_t FileName );
__declspec(implementation_key(1448)) _bstr_t IAcadLineType::GetDescription ( );
__declspec(implementation_key(1449)) void IAcadLineType::PutDescription ( _bstr_t bstrDes );
__declspec(implementation_key(1450)) _bstr_t IAcadLineType::GetName ( );
__declspec(implementation_key(1451)) void IAcadLineType::PutName ( _bstr_t bstrName );
__declspec(implementation_key(1452)) IAcadObjectPtr IAcadDictionaries::Item ( const _variant_t & Index );
__declspec(implementation_key(1453)) long IAcadDictionaries::GetCount ( );
__declspec(implementation_key(1454)) IUnknownPtr IAcadDictionaries::Get_NewEnum ( );
__declspec(implementation_key(1455)) IAcadDictionaryPtr IAcadDictionaries::Add ( _bstr_t Name );
__declspec(implementation_key(1456)) _bstr_t IAcadDictionary::GetName ( );
__declspec(implementation_key(1457)) void IAcadDictionary::PutName ( _bstr_t pVal );
__declspec(implementation_key(1458)) IAcadObjectPtr IAcadDictionary::AddObject ( _bstr_t Keyword, _bstr_t ObjectName );
__declspec(implementation_key(1459)) _bstr_t IAcadDictionary::GetName ( struct IAcadObject * Object );
__declspec(implementation_key(1460)) IAcadObjectPtr IAcadDictionary::GetObject ( _bstr_t Name );
__declspec(implementation_key(1461)) IAcadObjectPtr IAcadDictionary::Remove ( _bstr_t Name );
__declspec(implementation_key(1462)) HRESULT IAcadDictionary::Rename ( _bstr_t OldName, _bstr_t NewName );
__declspec(implementation_key(1463)) HRESULT IAcadDictionary::Replace ( _bstr_t OldName, struct IAcadObject * pObj );
__declspec(implementation_key(1464)) IAcadObjectPtr IAcadDictionary::Item ( const _variant_t & Index );
__declspec(implementation_key(1465)) IUnknownPtr IAcadDictionary::Get_NewEnum ( );
__declspec(implementation_key(1466)) long IAcadDictionary::GetCount ( );
__declspec(implementation_key(1467)) IAcadXRecordPtr IAcadDictionary::AddXRecord ( _bstr_t Keyword );
__declspec(implementation_key(1468)) _bstr_t IAcadXRecord::GetName ( );
__declspec(implementation_key(1469)) void IAcadXRecord::PutName ( _bstr_t bstrName );
__declspec(implementation_key(1470)) HRESULT IAcadXRecord::GetXRecordData ( VARIANT * XRecordDataType, VARIANT * XRecordDataValue );
__declspec(implementation_key(1471)) HRESULT IAcadXRecord::SetXRecordData ( const _variant_t & XRecordDataType, const _variant_t & XRecordDataValue );
__declspec(implementation_key(1472)) VARIANT_BOOL IAcadXRecord::GetTranslateIDs ( );
__declspec(implementation_key(1473)) void IAcadXRecord::PutTranslateIDs ( VARIANT_BOOL xlateIds );
__declspec(implementation_key(1474)) IAcadRegisteredApplicationPtr IAcadRegisteredApplications::Item ( const _variant_t & Index );
__declspec(implementation_key(1475)) long IAcadRegisteredApplications::GetCount ( );
__declspec(implementation_key(1476)) IUnknownPtr IAcadRegisteredApplications::Get_NewEnum ( );
__declspec(implementation_key(1477)) IAcadRegisteredApplicationPtr IAcadRegisteredApplications::Add ( _bstr_t Name );
__declspec(implementation_key(1478)) _bstr_t IAcadRegisteredApplication::GetName ( );
__declspec(implementation_key(1479)) void IAcadRegisteredApplication::PutName ( _bstr_t bstrName );
__declspec(implementation_key(1480)) IAcadTextStylePtr IAcadTextStyles::Item ( const _variant_t & Index );
__declspec(implementation_key(1481)) long IAcadTextStyles::GetCount ( );
__declspec(implementation_key(1482)) IUnknownPtr IAcadTextStyles::Get_NewEnum ( );
__declspec(implementation_key(1483)) IAcadTextStylePtr IAcadTextStyles::Add ( _bstr_t Name );
__declspec(implementation_key(1484)) _bstr_t IAcadTextStyle::GetBigFontFile ( );
__declspec(implementation_key(1485)) void IAcadTextStyle::PutBigFontFile ( _bstr_t fontFile );
__declspec(implementation_key(1486)) _bstr_t IAcadTextStyle::GetfontFile ( );
__declspec(implementation_key(1487)) void IAcadTextStyle::PutfontFile ( _bstr_t fontFile );
__declspec(implementation_key(1488)) double IAcadTextStyle::GetHeight ( );
__declspec(implementation_key(1489)) void IAcadTextStyle::PutHeight ( double Height );
__declspec(implementation_key(1490)) double IAcadTextStyle::GetLastHeight ( );
__declspec(implementation_key(1491)) void IAcadTextStyle::PutLastHeight ( double Height );
__declspec(implementation_key(1492)) _bstr_t IAcadTextStyle::GetName ( );
__declspec(implementation_key(1493)) ACAD_ANGLE IAcadTextStyle::GetObliqueAngle ( );
__declspec(implementation_key(1494)) void IAcadTextStyle::PutObliqueAngle ( ACAD_ANGLE obliAngle );
__declspec(implementation_key(1495)) long IAcadTextStyle::GetTextGenerationFlag ( );
__declspec(implementation_key(1496)) void IAcadTextStyle::PutTextGenerationFlag ( long textGenFlag );
__declspec(implementation_key(1497)) double IAcadTextStyle::GetWidth ( );
__declspec(implementation_key(1498)) void IAcadTextStyle::PutWidth ( double Width );
__declspec(implementation_key(1499)) HRESULT IAcadTextStyle::GetFont ( BSTR * TypeFace, VARIANT_BOOL * Bold, VARIANT_BOOL * Italic, long * Charset, long * PitchAndFamily );
__declspec(implementation_key(1500)) HRESULT IAcadTextStyle::SetFont ( _bstr_t TypeFace, VARIANT_BOOL Bold, VARIANT_BOOL Italic, long Charset, long PitchAndFamily );
__declspec(implementation_key(1501)) IAcadUCSPtr IAcadUCSs::Item ( const _variant_t & Index );
__declspec(implementation_key(1502)) long IAcadUCSs::GetCount ( );
__declspec(implementation_key(1503)) IUnknownPtr IAcadUCSs::Get_NewEnum ( );
__declspec(implementation_key(1504)) IAcadUCSPtr IAcadUCSs::Add ( const _variant_t & Origin, const _variant_t & XAxisPoint, const _variant_t & YAxisPoint, _bstr_t Name );
__declspec(implementation_key(1505)) _bstr_t IAcadUCS::GetName ( );
__declspec(implementation_key(1506)) void IAcadUCS::PutName ( _bstr_t bstrName );
__declspec(implementation_key(1507)) _variant_t IAcadUCS::GetOrigin ( );
__declspec(implementation_key(1508)) void IAcadUCS::PutOrigin ( const _variant_t & Origin );
__declspec(implementation_key(1509)) _variant_t IAcadUCS::GetXVector ( );
__declspec(implementation_key(1510)) void IAcadUCS::PutXVector ( const _variant_t & XVector );
__declspec(implementation_key(1511)) _variant_t IAcadUCS::GetYVector ( );
__declspec(implementation_key(1512)) void IAcadUCS::PutYVector ( const _variant_t & YVector );
__declspec(implementation_key(1513)) _variant_t IAcadUCS::GetUCSMatrix ( );
__declspec(implementation_key(1514)) IAcadViewPtr IAcadViews::Item ( const _variant_t & Index );
__declspec(implementation_key(1515)) long IAcadViews::GetCount ( );
__declspec(implementation_key(1516)) IUnknownPtr IAcadViews::Get_NewEnum ( );
__declspec(implementation_key(1517)) IAcadViewPtr IAcadViews::Add ( _bstr_t Name );
__declspec(implementation_key(1518)) _variant_t IAcadView::GetCenter ( );
__declspec(implementation_key(1519)) void IAcadView::PutCenter ( const _variant_t & Center );
__declspec(implementation_key(1520)) double IAcadView::GetHeight ( );
__declspec(implementation_key(1521)) void IAcadView::PutHeight ( double Height );
__declspec(implementation_key(1522)) double IAcadView::GetWidth ( );
__declspec(implementation_key(1523)) void IAcadView::PutWidth ( double Width );
__declspec(implementation_key(1524)) _variant_t IAcadView::GetTarget ( );
__declspec(implementation_key(1525)) void IAcadView::PutTarget ( const _variant_t & targetPoint );
__declspec(implementation_key(1526)) _variant_t IAcadView::GetDirection ( );
__declspec(implementation_key(1527)) void IAcadView::PutDirection ( const _variant_t & dirVec );
__declspec(implementation_key(1528)) _bstr_t IAcadView::GetName ( );
__declspec(implementation_key(1529)) void IAcadView::PutName ( _bstr_t bstrName );
__declspec(implementation_key(1530)) IAcadViewportPtr IAcadViewports::Item ( const _variant_t & Index );
__declspec(implementation_key(1531)) long IAcadViewports::GetCount ( );
__declspec(implementation_key(1532)) IUnknownPtr IAcadViewports::Get_NewEnum ( );
__declspec(implementation_key(1533)) IAcadViewportPtr IAcadViewports::Add ( _bstr_t Name );
__declspec(implementation_key(1534)) HRESULT IAcadViewports::DeleteConfiguration ( _bstr_t Name );
__declspec(implementation_key(1535)) _variant_t IAcadViewport::GetCenter ( );
__declspec(implementation_key(1536)) void IAcadViewport::PutCenter ( const _variant_t & Center );
__declspec(implementation_key(1537)) double IAcadViewport::GetHeight ( );
__declspec(implementation_key(1538)) void IAcadViewport::PutHeight ( double Height );
__declspec(implementation_key(1539)) double IAcadViewport::GetWidth ( );
__declspec(implementation_key(1540)) void IAcadViewport::PutWidth ( double Width );
__declspec(implementation_key(1541)) _variant_t IAcadViewport::GetTarget ( );
__declspec(implementation_key(1542)) void IAcadViewport::PutTarget ( const _variant_t & targetPoint );
__declspec(implementation_key(1543)) _variant_t IAcadViewport::GetDirection ( );
__declspec(implementation_key(1544)) void IAcadViewport::PutDirection ( const _variant_t & dirVec );
__declspec(implementation_key(1545)) _bstr_t IAcadViewport::GetName ( );
__declspec(implementation_key(1546)) void IAcadViewport::PutName ( _bstr_t bstrName );
__declspec(implementation_key(1547)) VARIANT_BOOL IAcadViewport::GetGridOn ( );
__declspec(implementation_key(1548)) void IAcadViewport::PutGridOn ( VARIANT_BOOL bGridOn );
__declspec(implementation_key(1549)) VARIANT_BOOL IAcadViewport::GetOrthoOn ( );
__declspec(implementation_key(1550)) void IAcadViewport::PutOrthoOn ( VARIANT_BOOL bOrthoOn );
__declspec(implementation_key(1551)) _variant_t IAcadViewport::GetSnapBasePoint ( );
__declspec(implementation_key(1552)) void IAcadViewport::PutSnapBasePoint ( const _variant_t & lowLeft );
__declspec(implementation_key(1553)) VARIANT_BOOL IAcadViewport::GetSnapOn ( );
__declspec(implementation_key(1554)) void IAcadViewport::PutSnapOn ( VARIANT_BOOL bSnapOn );
__declspec(implementation_key(1555)) ACAD_ANGLE IAcadViewport::GetSnapRotationAngle ( );
__declspec(implementation_key(1556)) void IAcadViewport::PutSnapRotationAngle ( ACAD_ANGLE Angle );
__declspec(implementation_key(1557)) VARIANT_BOOL IAcadViewport::GetUCSIconOn ( );
__declspec(implementation_key(1558)) void IAcadViewport::PutUCSIconOn ( VARIANT_BOOL bIconOn );
__declspec(implementation_key(1559)) VARIANT_BOOL IAcadViewport::GetUCSIconAtOrigin ( );
__declspec(implementation_key(1560)) void IAcadViewport::PutUCSIconAtOrigin ( VARIANT_BOOL bIconAtOrigin );
__declspec(implementation_key(1561)) _variant_t IAcadViewport::GetLowerLeftCorner ( );
__declspec(implementation_key(1562)) _variant_t IAcadViewport::GetUpperRightCorner ( );
__declspec(implementation_key(1563)) HRESULT IAcadViewport::Split ( enum AcViewportSplitType NumWins );
__declspec(implementation_key(1564)) HRESULT IAcadViewport::GetGridSpacing ( double * XSpacing, double * YSpacing );
__declspec(implementation_key(1565)) HRESULT IAcadViewport::SetGridSpacing ( double XSpacing, double YSpacing );
__declspec(implementation_key(1566)) HRESULT IAcadViewport::GetSnapSpacing ( double * XSpacing, double * YSpacing );
__declspec(implementation_key(1567)) HRESULT IAcadViewport::SetSnapSpacing ( double XSpacing, double YSpacing );
__declspec(implementation_key(1568)) HRESULT IAcadViewport::SetView ( struct IAcadView * View );
__declspec(implementation_key(1569)) long IAcadViewport::GetArcSmoothness ( );
__declspec(implementation_key(1570)) void IAcadViewport::PutArcSmoothness ( long arcSmooth );
__declspec(implementation_key(1571)) IAcadLayoutPtr IAcadLayouts::Item ( const _variant_t & Index );
__declspec(implementation_key(1572)) long IAcadLayouts::GetCount ( );
__declspec(implementation_key(1573)) IUnknownPtr IAcadLayouts::Get_NewEnum ( );
__declspec(implementation_key(1574)) IAcadLayoutPtr IAcadLayouts::Add ( _bstr_t Name );
__declspec(implementation_key(1575)) IAcadPlotConfigurationPtr IAcadPlotConfigurations::Item ( const _variant_t & Index );
__declspec(implementation_key(1576)) long IAcadPlotConfigurations::GetCount ( );
__declspec(implementation_key(1577)) IUnknownPtr IAcadPlotConfigurations::Get_NewEnum ( );
__declspec(implementation_key(1578)) IAcadPlotConfigurationPtr IAcadPlotConfigurations::Add ( _bstr_t Name, const _variant_t & ModelType );
__declspec(implementation_key(1579)) IDispatchPtr IAcadDatabasePreferences::GetApplication ( );
__declspec(implementation_key(1580)) VARIANT_BOOL IAcadDatabasePreferences::GetSolidFill ( );
__declspec(implementation_key(1581)) void IAcadDatabasePreferences::PutSolidFill ( VARIANT_BOOL Fill );
__declspec(implementation_key(1582)) VARIANT_BOOL IAcadDatabasePreferences::GetXRefEdit ( );
__declspec(implementation_key(1583)) void IAcadDatabasePreferences::PutXRefEdit ( VARIANT_BOOL Edit );
__declspec(implementation_key(1584)) VARIANT_BOOL IAcadDatabasePreferences::GetXRefLayerVisibility ( );
__declspec(implementation_key(1585)) void IAcadDatabasePreferences::PutXRefLayerVisibility ( VARIANT_BOOL XRefLayerVis );
__declspec(implementation_key(1586)) VARIANT_BOOL IAcadDatabasePreferences::GetOLELaunch ( );
__declspec(implementation_key(1587)) void IAcadDatabasePreferences::PutOLELaunch ( VARIANT_BOOL Launch );
__declspec(implementation_key(1588)) VARIANT_BOOL IAcadDatabasePreferences::GetAllowLongSymbolNames ( );
__declspec(implementation_key(1589)) void IAcadDatabasePreferences::PutAllowLongSymbolNames ( VARIANT_BOOL LongNames );
__declspec(implementation_key(1590)) VARIANT_BOOL IAcadDatabasePreferences::GetObjectSortBySelection ( );
__declspec(implementation_key(1591)) void IAcadDatabasePreferences::PutObjectSortBySelection ( VARIANT_BOOL Sort );
__declspec(implementation_key(1592)) VARIANT_BOOL IAcadDatabasePreferences::GetObjectSortBySnap ( );
__declspec(implementation_key(1593)) void IAcadDatabasePreferences::PutObjectSortBySnap ( VARIANT_BOOL Sort );
__declspec(implementation_key(1594)) VARIANT_BOOL IAcadDatabasePreferences::GetObjectSortByRedraws ( );
__declspec(implementation_key(1595)) void IAcadDatabasePreferences::PutObjectSortByRedraws ( VARIANT_BOOL Sort );
__declspec(implementation_key(1596)) VARIANT_BOOL IAcadDatabasePreferences::GetObjectSortByRegens ( );
__declspec(implementation_key(1597)) void IAcadDatabasePreferences::PutObjectSortByRegens ( VARIANT_BOOL Sort );
__declspec(implementation_key(1598)) VARIANT_BOOL IAcadDatabasePreferences::GetObjectSortByPlotting ( );
__declspec(implementation_key(1599)) void IAcadDatabasePreferences::PutObjectSortByPlotting ( VARIANT_BOOL Sort );
__declspec(implementation_key(1600)) VARIANT_BOOL IAcadDatabasePreferences::GetObjectSortByPSOutput ( );
__declspec(implementation_key(1601)) void IAcadDatabasePreferences::PutObjectSortByPSOutput ( VARIANT_BOOL Sort );
__declspec(implementation_key(1602)) void IAcadDatabasePreferences::PutContourLinesPerSurface ( long Path );
__declspec(implementation_key(1603)) long IAcadDatabasePreferences::GetContourLinesPerSurface ( );
__declspec(implementation_key(1604)) void IAcadDatabasePreferences::PutDisplaySilhouette ( VARIANT_BOOL Path );
__declspec(implementation_key(1605)) VARIANT_BOOL IAcadDatabasePreferences::GetDisplaySilhouette ( );
__declspec(implementation_key(1606)) void IAcadDatabasePreferences::PutMaxActiveViewports ( long Path );
__declspec(implementation_key(1607)) long IAcadDatabasePreferences::GetMaxActiveViewports ( );
__declspec(implementation_key(1608)) void IAcadDatabasePreferences::PutRenderSmoothness ( double Path );
__declspec(implementation_key(1609)) double IAcadDatabasePreferences::GetRenderSmoothness ( );
__declspec(implementation_key(1610)) void IAcadDatabasePreferences::PutSegmentPerPolyline ( long Path );
__declspec(implementation_key(1611)) long IAcadDatabasePreferences::GetSegmentPerPolyline ( );
__declspec(implementation_key(1612)) void IAcadDatabasePreferences::PutTextFrameDisplay ( VARIANT_BOOL Path );
__declspec(implementation_key(1613)) VARIANT_BOOL IAcadDatabasePreferences::GetTextFrameDisplay ( );
__declspec(implementation_key(1614)) void IAcadDatabasePreferences::PutLineweight ( enum AcLineWeight Path );
__declspec(implementation_key(1615)) enum AcLineWeight IAcadDatabasePreferences::GetLineweight ( );
__declspec(implementation_key(1616)) void IAcadDatabasePreferences::PutLineWeightDisplay ( VARIANT_BOOL Path );
__declspec(implementation_key(1617)) VARIANT_BOOL IAcadDatabasePreferences::GetLineWeightDisplay ( );
__declspec(implementation_key(1618)) IAcadFileDependencyPtr IAcadFileDependencies::Item ( const _variant_t & Index );
__declspec(implementation_key(1619)) IUnknownPtr IAcadFileDependencies::Get_NewEnum ( );
__declspec(implementation_key(1620)) IDispatchPtr IAcadFileDependencies::GetApplication ( );
__declspec(implementation_key(1621)) long IAcadFileDependencies::GetCount ( );
__declspec(implementation_key(1622)) long IAcadFileDependencies::CreateEntry ( _bstr_t Feature, _bstr_t FullFileName, VARIANT_BOOL AffectsGraphics, VARIANT_BOOL noIncrement );
__declspec(implementation_key(1623)) long IAcadFileDependencies::IndexOf ( _bstr_t Feature, _bstr_t FullFileName );
__declspec(implementation_key(1624)) HRESULT IAcadFileDependencies::RemoveEntry ( long Index, VARIANT_BOOL forceRemove );
__declspec(implementation_key(1625)) HRESULT IAcadFileDependencies::UpdateEntry ( long Index );
__declspec(implementation_key(1626)) _bstr_t IAcadFileDependency::GetFullFileName ( );
__declspec(implementation_key(1627)) _bstr_t IAcadFileDependency::GetFileName ( );
__declspec(implementation_key(1628)) _bstr_t IAcadFileDependency::GetFoundPath ( );
__declspec(implementation_key(1629)) _bstr_t IAcadFileDependency::GetFingerprintGuid ( );
__declspec(implementation_key(1630)) _bstr_t IAcadFileDependency::GetVersionGuid ( );
__declspec(implementation_key(1631)) _bstr_t IAcadFileDependency::GetFeature ( );
__declspec(implementation_key(1632)) VARIANT_BOOL IAcadFileDependency::GetIsModified ( );
__declspec(implementation_key(1633)) VARIANT_BOOL IAcadFileDependency::GetAffectsGraphics ( );
__declspec(implementation_key(1634)) long IAcadFileDependency::GetIndex ( );
__declspec(implementation_key(1635)) long IAcadFileDependency::GetTimeStamp ( );
__declspec(implementation_key(1636)) long IAcadFileDependency::GetFileSize ( );
__declspec(implementation_key(1637)) long IAcadFileDependency::GetReferenceCount ( );
__declspec(implementation_key(1638)) _bstr_t IAcadSummaryInfo::GetAuthor ( );
__declspec(implementation_key(1639)) void IAcadSummaryInfo::PutAuthor ( _bstr_t pAuthor );
__declspec(implementation_key(1640)) _bstr_t IAcadSummaryInfo::GetComments ( );
__declspec(implementation_key(1641)) void IAcadSummaryInfo::PutComments ( _bstr_t pComments );
__declspec(implementation_key(1642)) _bstr_t IAcadSummaryInfo::GetHyperlinkBase ( );
__declspec(implementation_key(1643)) void IAcadSummaryInfo::PutHyperlinkBase ( _bstr_t pHyperlinkBase );
__declspec(implementation_key(1644)) _bstr_t IAcadSummaryInfo::GetKeywords ( );
__declspec(implementation_key(1645)) void IAcadSummaryInfo::PutKeywords ( _bstr_t pKeywords );
__declspec(implementation_key(1646)) _bstr_t IAcadSummaryInfo::GetLastSavedBy ( );
__declspec(implementation_key(1647)) void IAcadSummaryInfo::PutLastSavedBy ( _bstr_t pLastSavedBy );
__declspec(implementation_key(1648)) _bstr_t IAcadSummaryInfo::GetRevisionNumber ( );
__declspec(implementation_key(1649)) void IAcadSummaryInfo::PutRevisionNumber ( _bstr_t pRevisionNumber );
__declspec(implementation_key(1650)) _bstr_t IAcadSummaryInfo::GetSubject ( );
__declspec(implementation_key(1651)) void IAcadSummaryInfo::PutSubject ( _bstr_t pSubject );
__declspec(implementation_key(1652)) _bstr_t IAcadSummaryInfo::GetTitle ( );
__declspec(implementation_key(1653)) void IAcadSummaryInfo::PutTitle ( _bstr_t pTitle );
__declspec(implementation_key(1654)) int IAcadSummaryInfo::NumCustomInfo ( );
__declspec(implementation_key(1655)) HRESULT IAcadSummaryInfo::GetCustomByIndex ( int Index, BSTR * pKey, BSTR * pValue );
__declspec(implementation_key(1656)) HRESULT IAcadSummaryInfo::GetCustomByKey ( _bstr_t key, BSTR * pValue );
__declspec(implementation_key(1657)) HRESULT IAcadSummaryInfo::SetCustomByIndex ( int Index, _bstr_t key, _bstr_t Value );
__declspec(implementation_key(1658)) HRESULT IAcadSummaryInfo::SetCustomByKey ( _bstr_t key, _bstr_t Value );
__declspec(implementation_key(1659)) HRESULT IAcadSummaryInfo::AddCustomInfo ( _bstr_t key, _bstr_t Value );
__declspec(implementation_key(1660)) HRESULT IAcadSummaryInfo::RemoveCustomByIndex ( int Index );
__declspec(implementation_key(1661)) HRESULT IAcadSummaryInfo::RemoveCustomByKey ( _bstr_t key );
__declspec(implementation_key(1662)) HRESULT IAcadObjectEvents::Modified ( struct IAcadObject * pObject );
__declspec(implementation_key(1663)) VARIANT_BOOL IAcadIdPair::GetIsCloned ( );
__declspec(implementation_key(1664)) VARIANT_BOOL IAcadIdPair::GetIsOwnerXlated ( );
__declspec(implementation_key(1665)) VARIANT_BOOL IAcadIdPair::GetIsPrimary ( );
__declspec(implementation_key(1666)) long IAcadIdPair::Getkey ( );
__declspec(implementation_key(1667)) long IAcadIdPair::GetValue ( );
__declspec(implementation_key(1668)) IDispatchPtr IAcadIdPair::GetApplication ( );
__declspec(implementation_key(1669)) double IAcadAttributeReference::GetHeight ( );
__declspec(implementation_key(1670)) void IAcadAttributeReference::PutHeight ( double Height );
__declspec(implementation_key(1671)) enum AcHorizontalAlignment IAcadAttributeReference::GetHorizontalAlignment ( );
__declspec(implementation_key(1672)) void IAcadAttributeReference::PutHorizontalAlignment ( enum AcHorizontalAlignment horizAlign );
__declspec(implementation_key(1673)) _variant_t IAcadAttributeReference::GetInsertionPoint ( );
__declspec(implementation_key(1674)) void IAcadAttributeReference::PutInsertionPoint ( const _variant_t & insPoint );
__declspec(implementation_key(1675)) _variant_t IAcadAttributeReference::GetNormal ( );
__declspec(implementation_key(1676)) void IAcadAttributeReference::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1677)) ACAD_ANGLE IAcadAttributeReference::GetObliqueAngle ( );
__declspec(implementation_key(1678)) void IAcadAttributeReference::PutObliqueAngle ( ACAD_ANGLE obliAngle );
__declspec(implementation_key(1679)) ACAD_ANGLE IAcadAttributeReference::GetRotation ( );
__declspec(implementation_key(1680)) void IAcadAttributeReference::PutRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(1681)) ACAD_NOUNITS IAcadAttributeReference::GetScaleFactor ( );
__declspec(implementation_key(1682)) void IAcadAttributeReference::PutScaleFactor ( ACAD_NOUNITS scalFactor );
__declspec(implementation_key(1683)) _bstr_t IAcadAttributeReference::GetStyleName ( );
__declspec(implementation_key(1684)) void IAcadAttributeReference::PutStyleName ( _bstr_t Name );
__declspec(implementation_key(1685)) _bstr_t IAcadAttributeReference::GetTagString ( );
__declspec(implementation_key(1686)) void IAcadAttributeReference::PutTagString ( _bstr_t bstrTag );
__declspec(implementation_key(1687)) _variant_t IAcadAttributeReference::GetTextAlignmentPoint ( );
__declspec(implementation_key(1688)) void IAcadAttributeReference::PutTextAlignmentPoint ( const _variant_t & alignPoint );
__declspec(implementation_key(1689)) long IAcadAttributeReference::GetTextGenerationFlag ( );
__declspec(implementation_key(1690)) void IAcadAttributeReference::PutTextGenerationFlag ( long textGenFlag );
__declspec(implementation_key(1691)) _bstr_t IAcadAttributeReference::GetTextString ( );
__declspec(implementation_key(1692)) void IAcadAttributeReference::PutTextString ( _bstr_t bstrText );
__declspec(implementation_key(1693)) double IAcadAttributeReference::GetThickness ( );
__declspec(implementation_key(1694)) void IAcadAttributeReference::PutThickness ( double Thickness );
__declspec(implementation_key(1695)) enum AcVerticalAlignment IAcadAttributeReference::GetVerticalAlignment ( );
__declspec(implementation_key(1696)) void IAcadAttributeReference::PutVerticalAlignment ( enum AcVerticalAlignment vertiAlign );
__declspec(implementation_key(1697)) long IAcadAttributeReference::GetFieldLength ( );
__declspec(implementation_key(1698)) void IAcadAttributeReference::PutFieldLength ( long fieldLen );
__declspec(implementation_key(1699)) enum AcAlignment IAcadAttributeReference::GetAlignment ( );
__declspec(implementation_key(1700)) void IAcadAttributeReference::PutAlignment ( enum AcAlignment align );
__declspec(implementation_key(1701)) VARIANT_BOOL IAcadAttributeReference::GetUpsideDown ( );
__declspec(implementation_key(1702)) void IAcadAttributeReference::PutUpsideDown ( VARIANT_BOOL bUpsideDown );
__declspec(implementation_key(1703)) VARIANT_BOOL IAcadAttributeReference::GetBackward ( );
__declspec(implementation_key(1704)) void IAcadAttributeReference::PutBackward ( VARIANT_BOOL bBackward );
__declspec(implementation_key(1705)) VARIANT_BOOL IAcadAttributeReference::GetInvisible ( );
__declspec(implementation_key(1706)) void IAcadAttributeReference::PutInvisible ( VARIANT_BOOL bInvisible );
__declspec(implementation_key(1707)) VARIANT_BOOL IAcadAttributeReference::GetConstant ( );
__declspec(implementation_key(1708)) void IAcadSecurityParams::PutAction ( long pOperations );
__declspec(implementation_key(1709)) long IAcadSecurityParams::GetAction ( );
__declspec(implementation_key(1710)) void IAcadSecurityParams::PutPassword ( _bstr_t pSecret );
__declspec(implementation_key(1711)) _bstr_t IAcadSecurityParams::GetPassword ( );
__declspec(implementation_key(1712)) void IAcadSecurityParams::PutProviderType ( long pProvType );
__declspec(implementation_key(1713)) long IAcadSecurityParams::GetProviderType ( );
__declspec(implementation_key(1714)) void IAcadSecurityParams::PutProviderName ( _bstr_t pProvName );
__declspec(implementation_key(1715)) _bstr_t IAcadSecurityParams::GetProviderName ( );
__declspec(implementation_key(1716)) void IAcadSecurityParams::PutAlgorithm ( long pAlgId );
__declspec(implementation_key(1717)) long IAcadSecurityParams::GetAlgorithm ( );
__declspec(implementation_key(1718)) void IAcadSecurityParams::PutKeyLength ( long pKeyLen );
__declspec(implementation_key(1719)) long IAcadSecurityParams::GetKeyLength ( );
__declspec(implementation_key(1720)) void IAcadSecurityParams::PutSubject ( _bstr_t pCertSubject );
__declspec(implementation_key(1721)) _bstr_t IAcadSecurityParams::GetSubject ( );
__declspec(implementation_key(1722)) void IAcadSecurityParams::PutIssuer ( _bstr_t pCertIssuer );
__declspec(implementation_key(1723)) _bstr_t IAcadSecurityParams::GetIssuer ( );
__declspec(implementation_key(1724)) void IAcadSecurityParams::PutSerialNumber ( _bstr_t pSerialNum );
__declspec(implementation_key(1725)) _bstr_t IAcadSecurityParams::GetSerialNumber ( );
__declspec(implementation_key(1726)) void IAcadSecurityParams::PutComment ( _bstr_t pText );
__declspec(implementation_key(1727)) _bstr_t IAcadSecurityParams::GetComment ( );
__declspec(implementation_key(1728)) void IAcadSecurityParams::PutTimeServer ( _bstr_t pTimeServerName );
__declspec(implementation_key(1729)) _bstr_t IAcadSecurityParams::GetTimeServer ( );
__declspec(implementation_key(1730)) HRESULT IAcadLayerStateManager::SetDatabase ( struct IAcadDatabase * iHostDb );
__declspec(implementation_key(1731)) void IAcadLayerStateManager::PutMask ( _bstr_t bsName, enum AcLayerStateMask eMask );
__declspec(implementation_key(1732)) enum AcLayerStateMask IAcadLayerStateManager::GetMask ( _bstr_t bsName );
__declspec(implementation_key(1733)) HRESULT IAcadLayerStateManager::Save ( _bstr_t bsName, enum AcLayerStateMask eMask );
__declspec(implementation_key(1734)) HRESULT IAcadLayerStateManager::Restore ( _bstr_t bsName );
__declspec(implementation_key(1735)) HRESULT IAcadLayerStateManager::Delete ( _bstr_t bsName );
__declspec(implementation_key(1736)) HRESULT IAcadLayerStateManager::Rename ( _bstr_t bsName, _bstr_t bsNewName );
__declspec(implementation_key(1737)) HRESULT IAcadLayerStateManager::Import ( _bstr_t bsFilename );
__declspec(implementation_key(1738)) HRESULT IAcadLayerStateManager::Export ( _bstr_t bsName, _bstr_t bsFilename );
__declspec(implementation_key(1739)) HRESULT _DAcadApplicationEvents::SysVarChanged ( _bstr_t SysvarName, const _variant_t & newVal );
__declspec(implementation_key(1740)) HRESULT _DAcadApplicationEvents::NewDrawing ( );
__declspec(implementation_key(1741)) HRESULT _DAcadApplicationEvents::AppActivate ( );
__declspec(implementation_key(1742)) HRESULT _DAcadApplicationEvents::AppDeactivate ( );
__declspec(implementation_key(1743)) HRESULT _DAcadApplicationEvents::WindowMovedOrResized ( long HWNDFrame, VARIANT_BOOL bMoved );
__declspec(implementation_key(1744)) HRESULT _DAcadApplicationEvents::BeginModal ( );
__declspec(implementation_key(1745)) HRESULT _DAcadApplicationEvents::EndModal ( );
__declspec(implementation_key(1746)) HRESULT _DAcadApplicationEvents::BeginQuit ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(1747)) HRESULT _DAcadApplicationEvents::BeginFileDrop ( _bstr_t FileName, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1748)) HRESULT _DAcadApplicationEvents::ARXLoaded ( _bstr_t AppName );
__declspec(implementation_key(1749)) HRESULT _DAcadApplicationEvents::ARXUnloaded ( _bstr_t AppName );
__declspec(implementation_key(1750)) HRESULT _DAcadApplicationEvents::BeginPlot ( _bstr_t DrawingName );
__declspec(implementation_key(1751)) HRESULT _DAcadApplicationEvents::EndPlot ( _bstr_t DrawingName );
__declspec(implementation_key(1752)) HRESULT _DAcadApplicationEvents::BeginSave ( _bstr_t FileName );
__declspec(implementation_key(1753)) HRESULT _DAcadApplicationEvents::EndSave ( _bstr_t FileName );
__declspec(implementation_key(1754)) HRESULT _DAcadApplicationEvents::BeginOpen ( BSTR * FileName );
__declspec(implementation_key(1755)) HRESULT _DAcadApplicationEvents::EndOpen ( _bstr_t FileName );
__declspec(implementation_key(1756)) HRESULT _DAcadApplicationEvents::BeginCommand ( _bstr_t CommandName );
__declspec(implementation_key(1757)) HRESULT _DAcadApplicationEvents::EndCommand ( _bstr_t CommandName );
__declspec(implementation_key(1758)) HRESULT _DAcadApplicationEvents::BeginLisp ( _bstr_t FirstLine );
__declspec(implementation_key(1759)) HRESULT _DAcadApplicationEvents::EndLisp ( );
__declspec(implementation_key(1760)) HRESULT _DAcadApplicationEvents::LispCancelled ( );
__declspec(implementation_key(1761)) HRESULT _DAcadApplicationEvents::WindowChanged ( enum AcWindowState WindowState );
__declspec(implementation_key(1762)) IAcadPlotPtr IAcadDocument::GetPlot ( );
__declspec(implementation_key(1763)) IAcadLayerPtr IAcadDocument::GetActiveLayer ( );
__declspec(implementation_key(1764)) void IAcadDocument::PutActiveLayer ( struct IAcadLayer * pActLayer );
__declspec(implementation_key(1765)) IAcadLineTypePtr IAcadDocument::GetActiveLinetype ( );
__declspec(implementation_key(1766)) void IAcadDocument::PutActiveLinetype ( struct IAcadLineType * pActLinetype );
__declspec(implementation_key(1767)) IAcadDimStylePtr IAcadDocument::GetActiveDimStyle ( );
__declspec(implementation_key(1768)) void IAcadDocument::PutActiveDimStyle ( struct IAcadDimStyle * pActDimStyle );
__declspec(implementation_key(1769)) IAcadTextStylePtr IAcadDocument::GetActiveTextStyle ( );
__declspec(implementation_key(1770)) void IAcadDocument::PutActiveTextStyle ( struct IAcadTextStyle * pActTextStyle );
__declspec(implementation_key(1771)) IAcadUCSPtr IAcadDocument::GetActiveUCS ( );
__declspec(implementation_key(1772)) void IAcadDocument::PutActiveUCS ( struct IAcadUCS * pActUCS );
__declspec(implementation_key(1773)) IAcadViewportPtr IAcadDocument::GetActiveViewport ( );
__declspec(implementation_key(1774)) void IAcadDocument::PutActiveViewport ( struct IAcadViewport * pActView );
__declspec(implementation_key(1775)) IAcadPViewportPtr IAcadDocument::GetActivePViewport ( );
__declspec(implementation_key(1776)) void IAcadDocument::PutActivePViewport ( struct IAcadPViewport * pActView );
__declspec(implementation_key(1777)) enum AcActiveSpace IAcadDocument::GetActiveSpace ( );
__declspec(implementation_key(1778)) void IAcadDocument::PutActiveSpace ( enum AcActiveSpace ActSpace );
__declspec(implementation_key(1779)) IAcadSelectionSetsPtr IAcadDocument::GetSelectionSets ( );
__declspec(implementation_key(1780)) IAcadSelectionSetPtr IAcadDocument::GetActiveSelectionSet ( );
__declspec(implementation_key(1781)) _bstr_t IAcadDocument::GetFullName ( );
__declspec(implementation_key(1782)) _bstr_t IAcadDocument::GetName ( );
__declspec(implementation_key(1783)) _bstr_t IAcadDocument::GetPath ( );
__declspec(implementation_key(1784)) VARIANT_BOOL IAcadDocument::GetObjectSnapMode ( );
__declspec(implementation_key(1785)) void IAcadDocument::PutObjectSnapMode ( VARIANT_BOOL fSnapMode );
__declspec(implementation_key(1786)) VARIANT_BOOL IAcadDocument::GetReadOnly ( );
__declspec(implementation_key(1787)) VARIANT_BOOL IAcadDocument::GetSaved ( );
__declspec(implementation_key(1788)) VARIANT_BOOL IAcadDocument::GetMSpace ( );
__declspec(implementation_key(1789)) void IAcadDocument::PutMSpace ( VARIANT_BOOL Mode );
__declspec(implementation_key(1790)) IAcadUtilityPtr IAcadDocument::GetUtility ( );
__declspec(implementation_key(1791)) IAcadDocumentPtr IAcadDocument::Open ( _bstr_t FullName, const _variant_t & Password );
__declspec(implementation_key(1792)) HRESULT IAcadDocument::AuditInfo ( VARIANT_BOOL FixErr );
__declspec(implementation_key(1793)) IDispatchPtr IAcadDocument::Import ( _bstr_t FileName, const _variant_t & InsertionPoint, double ScaleFactor );
__declspec(implementation_key(1794)) HRESULT IAcadDocument::Export ( _bstr_t FileName, _bstr_t Extension, struct IAcadSelectionSet * SelectionSet );
__declspec(implementation_key(1795)) IAcadDocumentPtr IAcadDocument::New ( _bstr_t TemplateFileName );
__declspec(implementation_key(1796)) HRESULT IAcadDocument::Save ( );
__declspec(implementation_key(1797)) HRESULT IAcadDocument::SaveAs ( _bstr_t FullFileName, const _variant_t & SaveAsType, const _variant_t & vSecurityParams );
__declspec(implementation_key(1798)) HRESULT IAcadDocument::Wblock ( _bstr_t FileName, struct IAcadSelectionSet * SelectionSet );
__declspec(implementation_key(1799)) HRESULT IAcadDocument::PurgeAll ( );
__declspec(implementation_key(1800)) _variant_t IAcadDocument::GetVariable ( _bstr_t Name );
__declspec(implementation_key(1801)) HRESULT IAcadDocument::SetVariable ( _bstr_t Name, const _variant_t & Value );
__declspec(implementation_key(1802)) HRESULT IAcadDocument::LoadShapeFile ( _bstr_t FullName );
__declspec(implementation_key(1803)) HRESULT IAcadDocument::Regen ( enum AcRegenType WhichViewports );
__declspec(implementation_key(1804)) IAcadSelectionSetPtr IAcadDocument::GetPickfirstSelectionSet ( );
__declspec(implementation_key(1805)) VARIANT_BOOL IAcadDocument::GetActive ( );
__declspec(implementation_key(1806)) HRESULT IAcadDocument::Activate ( );
__declspec(implementation_key(1807)) HRESULT IAcadDocument::Close ( const _variant_t & SaveChanges, const _variant_t & FileName );
__declspec(implementation_key(1808)) void IAcadDocument::PutWindowState ( enum AcWindowState pWinState );
__declspec(implementation_key(1809)) enum AcWindowState IAcadDocument::GetWindowState ( );
__declspec(implementation_key(1810)) void IAcadDocument::PutWidth ( int pWidth );
__declspec(implementation_key(1811)) int IAcadDocument::GetWidth ( );
__declspec(implementation_key(1812)) void IAcadDocument::PutHeight ( int pHeight );
__declspec(implementation_key(1813)) int IAcadDocument::GetHeight ( );
__declspec(implementation_key(1814)) void IAcadDocument::PutActiveLayout ( struct IAcadLayout * pLayout );
__declspec(implementation_key(1815)) IAcadLayoutPtr IAcadDocument::GetActiveLayout ( );
__declspec(implementation_key(1816)) HRESULT IAcadDocument::SendCommand ( _bstr_t Command );
__declspec(implementation_key(1817)) long IAcadDocument::GetHWND ( );
__declspec(implementation_key(1818)) _bstr_t IAcadDocument::GetWindowTitle ( );
__declspec(implementation_key(1819)) IAcadApplicationPtr IAcadDocument::GetApplication ( );
__declspec(implementation_key(1820)) IAcadDatabasePtr IAcadDocument::GetDatabase ( );
__declspec(implementation_key(1821)) HRESULT IAcadDocument::StartUndoMark ( );
__declspec(implementation_key(1822)) HRESULT IAcadDocument::EndUndoMark ( );
__declspec(implementation_key(1823)) IAcadApplicationPtr IAcadPlot::GetApplication ( );
__declspec(implementation_key(1824)) VARIANT_BOOL IAcadPlot::GetQuietErrorMode ( );
__declspec(implementation_key(1825)) void IAcadPlot::PutQuietErrorMode ( VARIANT_BOOL bErrorMode );
__declspec(implementation_key(1826)) long IAcadPlot::GetNumberOfCopies ( );
__declspec(implementation_key(1827)) void IAcadPlot::PutNumberOfCopies ( long numCopies );
__declspec(implementation_key(1828)) VARIANT_BOOL IAcadPlot::GetBatchPlotProgress ( );
__declspec(implementation_key(1829)) void IAcadPlot::PutBatchPlotProgress ( VARIANT_BOOL bProgressStatus );
__declspec(implementation_key(1830)) HRESULT IAcadPlot::DisplayPlotPreview ( enum AcPreviewMode Preview );
__declspec(implementation_key(1831)) VARIANT_BOOL IAcadPlot::PlotToFile ( _bstr_t plotFile, const _variant_t & plotConfig );
__declspec(implementation_key(1832)) VARIANT_BOOL IAcadPlot::PlotToDevice ( const _variant_t & plotConfig );
__declspec(implementation_key(1833)) HRESULT IAcadPlot::SetLayoutsToPlot ( const _variant_t & layoutList );
__declspec(implementation_key(1834)) HRESULT IAcadPlot::StartBatchMode ( long entryCount );
__declspec(implementation_key(1835)) VARIANT_BOOL IAcadApplication::GetVisible ( );
__declspec(implementation_key(1836)) void IAcadApplication::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(1837)) _bstr_t IAcadApplication::GetName ( );
__declspec(implementation_key(1838)) _bstr_t IAcadApplication::GetCaption ( );
__declspec(implementation_key(1839)) IAcadApplicationPtr IAcadApplication::GetApplication ( );
__declspec(implementation_key(1840)) IAcadDocumentPtr IAcadApplication::GetActiveDocument ( );
__declspec(implementation_key(1841)) void IAcadApplication::PutActiveDocument ( struct IAcadDocument * pActiveDoc );
__declspec(implementation_key(1842)) _bstr_t IAcadApplication::GetFullName ( );
__declspec(implementation_key(1843)) int IAcadApplication::GetHeight ( );
__declspec(implementation_key(1844)) void IAcadApplication::PutHeight ( int Height );
__declspec(implementation_key(1845)) int IAcadApplication::GetWindowLeft ( );
__declspec(implementation_key(1846)) void IAcadApplication::PutWindowLeft ( int left );
__declspec(implementation_key(1847)) _bstr_t IAcadApplication::GetPath ( );
__declspec(implementation_key(1848)) long IAcadApplication::GetLocaleId ( );
__declspec(implementation_key(1849)) int IAcadApplication::GetWindowTop ( );
__declspec(implementation_key(1850)) void IAcadApplication::PutWindowTop ( int top );
__declspec(implementation_key(1851)) _bstr_t IAcadApplication::GetVersion ( );
__declspec(implementation_key(1852)) int IAcadApplication::GetWidth ( );
__declspec(implementation_key(1853)) void IAcadApplication::PutWidth ( int Width );
__declspec(implementation_key(1854)) IAcadPreferencesPtr IAcadApplication::GetPreferences ( );
__declspec(implementation_key(1855)) VARIANT_BOOL IAcadApplication::GetStatusId ( IDispatch * VportObj );
__declspec(implementation_key(1856)) _variant_t IAcadApplication::ListArx ( );
__declspec(implementation_key(1857)) HRESULT IAcadApplication::LoadArx ( _bstr_t Name );
__declspec(implementation_key(1858)) IDispatchPtr IAcadApplication::GetInterfaceObject ( _bstr_t ProgID );
__declspec(implementation_key(1859)) HRESULT IAcadApplication::UnloadArx ( _bstr_t Name );
__declspec(implementation_key(1860)) HRESULT IAcadApplication::Update ( );
__declspec(implementation_key(1861)) HRESULT IAcadApplication::Quit ( );
__declspec(implementation_key(1862)) HRESULT IAcadApplication::Zoom ( int Type, VARIANT * vParams );
__declspec(implementation_key(1863)) IDispatchPtr IAcadApplication::GetVBE ( );
__declspec(implementation_key(1864)) IAcadMenuGroupsPtr IAcadApplication::GetMenuGroups ( );
__declspec(implementation_key(1865)) IAcadMenuBarPtr IAcadApplication::GetMenuBar ( );
__declspec(implementation_key(1866)) HRESULT IAcadApplication::LoadDVB ( _bstr_t Name );
__declspec(implementation_key(1867)) HRESULT IAcadApplication::UnloadDVB ( _bstr_t Name );
__declspec(implementation_key(1868)) IAcadDocumentsPtr IAcadApplication::GetDocuments ( );
__declspec(implementation_key(1869)) HRESULT IAcadApplication::Eval ( _bstr_t Expression );
__declspec(implementation_key(1870)) enum AcWindowState IAcadApplication::GetWindowState ( );
__declspec(implementation_key(1871)) void IAcadApplication::PutWindowState ( enum AcWindowState eWinState );
__declspec(implementation_key(1872)) HRESULT IAcadApplication::RunMacro ( _bstr_t MacroPath );
__declspec(implementation_key(1873)) HRESULT IAcadApplication::ZoomExtents ( );
__declspec(implementation_key(1874)) HRESULT IAcadApplication::ZoomAll ( );
__declspec(implementation_key(1875)) HRESULT IAcadApplication::ZoomCenter ( const _variant_t & Center, double Magnify );
__declspec(implementation_key(1876)) HRESULT IAcadApplication::ZoomScaled ( double scale, enum AcZoomScaleType ScaleType );
__declspec(implementation_key(1877)) HRESULT IAcadApplication::ZoomWindow ( const _variant_t & LowerLeft, const _variant_t & UpperRight );
__declspec(implementation_key(1878)) HRESULT IAcadApplication::ZoomPickWindow ( );
__declspec(implementation_key(1879)) IAcadStatePtr IAcadApplication::GetAcadState ( );
__declspec(implementation_key(1880)) HRESULT IAcadApplication::ZoomPrevious ( );
__declspec(implementation_key(1881)) long IAcadApplication::GetHWND ( );
__declspec(implementation_key(1882)) IAcadApplicationPtr IAcadPreferences::GetApplication ( );
__declspec(implementation_key(1883)) IAcadPreferencesFilesPtr IAcadPreferences::GetFiles ( );
__declspec(implementation_key(1884)) IAcadPreferencesDisplayPtr IAcadPreferences::GetDisplay ( );
__declspec(implementation_key(1885)) IAcadPreferencesOpenSavePtr IAcadPreferences::GetOpenSave ( );
__declspec(implementation_key(1886)) IAcadPreferencesOutputPtr IAcadPreferences::GetOutput ( );
__declspec(implementation_key(1887)) IAcadPreferencesSystemPtr IAcadPreferences::GetSystem ( );
__declspec(implementation_key(1888)) IAcadPreferencesUserPtr IAcadPreferences::GetUser ( );
__declspec(implementation_key(1889)) IAcadPreferencesDraftingPtr IAcadPreferences::GetDrafting ( );
__declspec(implementation_key(1890)) IAcadPreferencesSelectionPtr IAcadPreferences::GetSelection ( );
__declspec(implementation_key(1891)) IAcadPreferencesProfilesPtr IAcadPreferences::GetProfiles ( );
__declspec(implementation_key(1892)) IAcadApplicationPtr IAcadPreferencesFiles::GetApplication ( );
__declspec(implementation_key(1893)) void IAcadPreferencesFiles::PutSupportPath ( _bstr_t orient );
__declspec(implementation_key(1894)) _bstr_t IAcadPreferencesFiles::GetSupportPath ( );
__declspec(implementation_key(1895)) void IAcadPreferencesFiles::PutDriversPath ( _bstr_t Path );
__declspec(implementation_key(1896)) _bstr_t IAcadPreferencesFiles::GetDriversPath ( );
__declspec(implementation_key(1897)) void IAcadPreferencesFiles::PutMenuFile ( _bstr_t Path );
__declspec(implementation_key(1898)) _bstr_t IAcadPreferencesFiles::GetMenuFile ( );
__declspec(implementation_key(1899)) void IAcadPreferencesFiles::PutHelpFilePath ( _bstr_t Path );
__declspec(implementation_key(1900)) _bstr_t IAcadPreferencesFiles::GetHelpFilePath ( );
__declspec(implementation_key(1901)) void IAcadPreferencesFiles::PutDefaultInternetURL ( _bstr_t Path );
__declspec(implementation_key(1902)) _bstr_t IAcadPreferencesFiles::GetDefaultInternetURL ( );
__declspec(implementation_key(1903)) _bstr_t IAcadPreferencesFiles::GetConfigFile ( );
__declspec(implementation_key(1904)) _bstr_t IAcadPreferencesFiles::GetLicenseServer ( );
__declspec(implementation_key(1905)) void IAcadPreferencesFiles::PutTextEditor ( _bstr_t Path );
__declspec(implementation_key(1906)) _bstr_t IAcadPreferencesFiles::GetTextEditor ( );
__declspec(implementation_key(1907)) void IAcadPreferencesFiles::PutMainDictionary ( _bstr_t Path );
__declspec(implementation_key(1908)) _bstr_t IAcadPreferencesFiles::GetMainDictionary ( );
__declspec(implementation_key(1909)) void IAcadPreferencesFiles::PutCustomDictionary ( _bstr_t Path );
__declspec(implementation_key(1910)) _bstr_t IAcadPreferencesFiles::GetCustomDictionary ( );
__declspec(implementation_key(1911)) void IAcadPreferencesFiles::PutAltFontFile ( _bstr_t fontFile );
__declspec(implementation_key(1912)) _bstr_t IAcadPreferencesFiles::GetAltFontFile ( );
__declspec(implementation_key(1913)) void IAcadPreferencesFiles::PutFontFileMap ( _bstr_t Path );
__declspec(implementation_key(1914)) _bstr_t IAcadPreferencesFiles::GetFontFileMap ( );
__declspec(implementation_key(1915)) void IAcadPreferencesFiles::PutPrintFile ( _bstr_t Path );
__declspec(implementation_key(1916)) _bstr_t IAcadPreferencesFiles::GetPrintFile ( );
__declspec(implementation_key(1917)) void IAcadPreferencesFiles::PutPrintSpoolExecutable ( _bstr_t Path );
__declspec(implementation_key(1918)) _bstr_t IAcadPreferencesFiles::GetPrintSpoolExecutable ( );
__declspec(implementation_key(1919)) void IAcadPreferencesFiles::PutPostScriptPrologFile ( _bstr_t Path );
__declspec(implementation_key(1920)) _bstr_t IAcadPreferencesFiles::GetPostScriptPrologFile ( );
__declspec(implementation_key(1921)) void IAcadPreferencesFiles::PutPrintSpoolerPath ( _bstr_t Path );
__declspec(implementation_key(1922)) _bstr_t IAcadPreferencesFiles::GetPrintSpoolerPath ( );
__declspec(implementation_key(1923)) void IAcadPreferencesFiles::PutAutoSavePath ( _bstr_t AutoSavePath );
__declspec(implementation_key(1924)) _bstr_t IAcadPreferencesFiles::GetAutoSavePath ( );
__declspec(implementation_key(1925)) void IAcadPreferencesFiles::PutTemplateDwgPath ( _bstr_t Path );
__declspec(implementation_key(1926)) _bstr_t IAcadPreferencesFiles::GetTemplateDwgPath ( );
__declspec(implementation_key(1927)) void IAcadPreferencesFiles::PutLogFilePath ( _bstr_t Path );
__declspec(implementation_key(1928)) _bstr_t IAcadPreferencesFiles::GetLogFilePath ( );
__declspec(implementation_key(1929)) void IAcadPreferencesFiles::PutTempFilePath ( _bstr_t Path );
__declspec(implementation_key(1930)) _bstr_t IAcadPreferencesFiles::GetTempFilePath ( );
__declspec(implementation_key(1931)) void IAcadPreferencesFiles::PutTempXrefPath ( _bstr_t Path );
__declspec(implementation_key(1932)) _bstr_t IAcadPreferencesFiles::GetTempXrefPath ( );
__declspec(implementation_key(1933)) void IAcadPreferencesFiles::PutTextureMapPath ( _bstr_t Path );
__declspec(implementation_key(1934)) _bstr_t IAcadPreferencesFiles::GetTextureMapPath ( );
__declspec(implementation_key(1935)) void IAcadPreferencesFiles::PutAltTabletMenuFile ( _bstr_t MenuFile );
__declspec(implementation_key(1936)) _bstr_t IAcadPreferencesFiles::GetAltTabletMenuFile ( );
__declspec(implementation_key(1937)) HRESULT IAcadPreferencesFiles::SetProjectFilePath ( _bstr_t ProjectName, _bstr_t ProjectFilePath );
__declspec(implementation_key(1938)) _bstr_t IAcadPreferencesFiles::GetProjectFilePath ( _bstr_t ProjectName );
__declspec(implementation_key(1939)) void IAcadPreferencesFiles::PutPrinterConfigPath ( _bstr_t Path );
__declspec(implementation_key(1940)) _bstr_t IAcadPreferencesFiles::GetPrinterConfigPath ( );
__declspec(implementation_key(1941)) void IAcadPreferencesFiles::PutPrinterDescPath ( _bstr_t Path );
__declspec(implementation_key(1942)) _bstr_t IAcadPreferencesFiles::GetPrinterDescPath ( );
__declspec(implementation_key(1943)) void IAcadPreferencesFiles::PutPrinterStyleSheetPath ( _bstr_t Path );
__declspec(implementation_key(1944)) _bstr_t IAcadPreferencesFiles::GetPrinterStyleSheetPath ( );
__declspec(implementation_key(1945)) void IAcadPreferencesFiles::PutWorkspacePath ( _bstr_t Path );
__declspec(implementation_key(1946)) _bstr_t IAcadPreferencesFiles::GetWorkspacePath ( );
__declspec(implementation_key(1947)) void IAcadPreferencesFiles::PutObjectARXPath ( _bstr_t Path );
__declspec(implementation_key(1948)) _bstr_t IAcadPreferencesFiles::GetObjectARXPath ( );
__declspec(implementation_key(1949)) void IAcadPreferencesFiles::PutColorBookPath ( _bstr_t Path );
__declspec(implementation_key(1950)) _bstr_t IAcadPreferencesFiles::GetColorBookPath ( );
__declspec(implementation_key(1951)) void IAcadPreferencesFiles::PutToolPalettePath ( _bstr_t Path );
__declspec(implementation_key(1952)) _bstr_t IAcadPreferencesFiles::GetToolPalettePath ( );
__declspec(implementation_key(1953)) IAcadApplicationPtr IAcadPreferencesDisplay::GetApplication ( );
__declspec(implementation_key(1954)) void IAcadPreferencesDisplay::PutLayoutDisplayMargins ( VARIANT_BOOL Path );
__declspec(implementation_key(1955)) VARIANT_BOOL IAcadPreferencesDisplay::GetLayoutDisplayMargins ( );
__declspec(implementation_key(1956)) void IAcadPreferencesDisplay::PutLayoutDisplayPaper ( VARIANT_BOOL Path );
__declspec(implementation_key(1957)) VARIANT_BOOL IAcadPreferencesDisplay::GetLayoutDisplayPaper ( );
__declspec(implementation_key(1958)) void IAcadPreferencesDisplay::PutLayoutDisplayPaperShadow ( VARIANT_BOOL Path );
__declspec(implementation_key(1959)) VARIANT_BOOL IAcadPreferencesDisplay::GetLayoutDisplayPaperShadow ( );
__declspec(implementation_key(1960)) void IAcadPreferencesDisplay::PutLayoutShowPlotSetup ( VARIANT_BOOL Path );
__declspec(implementation_key(1961)) VARIANT_BOOL IAcadPreferencesDisplay::GetLayoutShowPlotSetup ( );
__declspec(implementation_key(1962)) void IAcadPreferencesDisplay::PutLayoutCreateViewport ( VARIANT_BOOL Path );
__declspec(implementation_key(1963)) VARIANT_BOOL IAcadPreferencesDisplay::GetLayoutCreateViewport ( );
__declspec(implementation_key(1964)) void IAcadPreferencesDisplay::PutDisplayScrollBars ( VARIANT_BOOL Path );
__declspec(implementation_key(1965)) VARIANT_BOOL IAcadPreferencesDisplay::GetDisplayScrollBars ( );
__declspec(implementation_key(1966)) void IAcadPreferencesDisplay::PutDisplayScreenMenu ( VARIANT_BOOL Path );
__declspec(implementation_key(1967)) VARIANT_BOOL IAcadPreferencesDisplay::GetDisplayScreenMenu ( );
__declspec(implementation_key(1968)) void IAcadPreferencesDisplay::PutCursorSize ( int Path );
__declspec(implementation_key(1969)) int IAcadPreferencesDisplay::GetCursorSize ( );
__declspec(implementation_key(1970)) void IAcadPreferencesDisplay::PutDockedVisibleLines ( int Path );
__declspec(implementation_key(1971)) int IAcadPreferencesDisplay::GetDockedVisibleLines ( );
__declspec(implementation_key(1972)) void IAcadPreferencesDisplay::PutShowRasterImage ( VARIANT_BOOL Path );
__declspec(implementation_key(1973)) VARIANT_BOOL IAcadPreferencesDisplay::GetShowRasterImage ( );
__declspec(implementation_key(1974)) void IAcadPreferencesDisplay::PutGraphicsWinModelBackgrndColor ( OLE_COLOR color );
__declspec(implementation_key(1975)) OLE_COLOR IAcadPreferencesDisplay::GetGraphicsWinModelBackgrndColor ( );
__declspec(implementation_key(1976)) void IAcadPreferencesDisplay::PutModelCrosshairColor ( OLE_COLOR crossHairColor );
__declspec(implementation_key(1977)) OLE_COLOR IAcadPreferencesDisplay::GetModelCrosshairColor ( );
__declspec(implementation_key(1978)) void IAcadPreferencesDisplay::PutGraphicsWinLayoutBackgrndColor ( OLE_COLOR color );
__declspec(implementation_key(1979)) OLE_COLOR IAcadPreferencesDisplay::GetGraphicsWinLayoutBackgrndColor ( );
__declspec(implementation_key(1980)) void IAcadPreferencesDisplay::PutTextWinBackgrndColor ( OLE_COLOR Path );
__declspec(implementation_key(1981)) OLE_COLOR IAcadPreferencesDisplay::GetTextWinBackgrndColor ( );
__declspec(implementation_key(1982)) void IAcadPreferencesDisplay::PutTextWinTextColor ( OLE_COLOR Path );
__declspec(implementation_key(1983)) OLE_COLOR IAcadPreferencesDisplay::GetTextWinTextColor ( );
__declspec(implementation_key(1984)) void IAcadPreferencesDisplay::PutLayoutCrosshairColor ( OLE_COLOR crossHairColor );
__declspec(implementation_key(1985)) OLE_COLOR IAcadPreferencesDisplay::GetLayoutCrosshairColor ( );
__declspec(implementation_key(1986)) void IAcadPreferencesDisplay::PutAutoTrackingVecColor ( OLE_COLOR AutoTrackingVecColor );
__declspec(implementation_key(1987)) OLE_COLOR IAcadPreferencesDisplay::GetAutoTrackingVecColor ( );
__declspec(implementation_key(1988)) void IAcadPreferencesDisplay::PutTextFont ( _bstr_t Path );
__declspec(implementation_key(1989)) _bstr_t IAcadPreferencesDisplay::GetTextFont ( );
__declspec(implementation_key(1990)) void IAcadPreferencesDisplay::PutTextFontStyle ( enum AcTextFontStyle Path );
__declspec(implementation_key(1991)) enum AcTextFontStyle IAcadPreferencesDisplay::GetTextFontStyle ( );
__declspec(implementation_key(1992)) void IAcadPreferencesDisplay::PutTextFontSize ( int Path );
__declspec(implementation_key(1993)) int IAcadPreferencesDisplay::GetTextFontSize ( );
__declspec(implementation_key(1994)) void IAcadPreferencesDisplay::PutHistoryLines ( int Path );
__declspec(implementation_key(1995)) int IAcadPreferencesDisplay::GetHistoryLines ( );
__declspec(implementation_key(1996)) void IAcadPreferencesDisplay::PutMaxAutoCADWindow ( VARIANT_BOOL Path );
__declspec(implementation_key(1997)) VARIANT_BOOL IAcadPreferencesDisplay::GetMaxAutoCADWindow ( );
__declspec(implementation_key(1998)) void IAcadPreferencesDisplay::PutDisplayLayoutTabs ( VARIANT_BOOL Path );
__declspec(implementation_key(1999)) VARIANT_BOOL IAcadPreferencesDisplay::GetDisplayLayoutTabs ( );
__declspec(implementation_key(2000)) void IAcadPreferencesDisplay::PutImageFrameHighlight ( VARIANT_BOOL Path );
__declspec(implementation_key(2001)) VARIANT_BOOL IAcadPreferencesDisplay::GetImageFrameHighlight ( );
__declspec(implementation_key(2002)) void IAcadPreferencesDisplay::PutTrueColorImages ( VARIANT_BOOL Path );
__declspec(implementation_key(2003)) VARIANT_BOOL IAcadPreferencesDisplay::GetTrueColorImages ( );
__declspec(implementation_key(2004)) void IAcadPreferencesDisplay::PutXRefFadeIntensity ( long Path );
__declspec(implementation_key(2005)) long IAcadPreferencesDisplay::GetXRefFadeIntensity ( );
__declspec(implementation_key(2006)) IAcadApplicationPtr IAcadPreferencesOpenSave::GetApplication ( );
__declspec(implementation_key(2007)) void IAcadPreferencesOpenSave::PutSavePreviewThumbnail ( VARIANT_BOOL Path );
__declspec(implementation_key(2008)) VARIANT_BOOL IAcadPreferencesOpenSave::GetSavePreviewThumbnail ( );
__declspec(implementation_key(2009)) void IAcadPreferencesOpenSave::PutIncrementalSavePercent ( int Path );
__declspec(implementation_key(2010)) int IAcadPreferencesOpenSave::GetIncrementalSavePercent ( );
__declspec(implementation_key(2011)) void IAcadPreferencesOpenSave::PutAutoSaveInterval ( int Path );
__declspec(implementation_key(2012)) int IAcadPreferencesOpenSave::GetAutoSaveInterval ( );
__declspec(implementation_key(2013)) void IAcadPreferencesOpenSave::PutCreateBackup ( VARIANT_BOOL CreateBackup );
__declspec(implementation_key(2014)) VARIANT_BOOL IAcadPreferencesOpenSave::GetCreateBackup ( );
__declspec(implementation_key(2015)) void IAcadPreferencesOpenSave::PutFullCRCValidation ( VARIANT_BOOL Path );
__declspec(implementation_key(2016)) VARIANT_BOOL IAcadPreferencesOpenSave::GetFullCRCValidation ( );
__declspec(implementation_key(2017)) void IAcadPreferencesOpenSave::PutLogFileOn ( VARIANT_BOOL Path );
__declspec(implementation_key(2018)) VARIANT_BOOL IAcadPreferencesOpenSave::GetLogFileOn ( );
__declspec(implementation_key(2019)) void IAcadPreferencesOpenSave::PutTempFileExtension ( _bstr_t Path );
__declspec(implementation_key(2020)) _bstr_t IAcadPreferencesOpenSave::GetTempFileExtension ( );
__declspec(implementation_key(2021)) void IAcadPreferencesOpenSave::PutXrefDemandLoad ( enum AcXRefDemandLoad Path );
__declspec(implementation_key(2022)) enum AcXRefDemandLoad IAcadPreferencesOpenSave::GetXrefDemandLoad ( );
__declspec(implementation_key(2023)) void IAcadPreferencesOpenSave::PutDemandLoadARXApp ( enum AcARXDemandLoad Path );
__declspec(implementation_key(2024)) enum AcARXDemandLoad IAcadPreferencesOpenSave::GetDemandLoadARXApp ( );
__declspec(implementation_key(2025)) void IAcadPreferencesOpenSave::PutProxyImage ( enum AcProxyImage Path );
__declspec(implementation_key(2026)) enum AcProxyImage IAcadPreferencesOpenSave::GetProxyImage ( );
__declspec(implementation_key(2027)) void IAcadPreferencesOpenSave::PutShowProxyDialogBox ( VARIANT_BOOL Path );
__declspec(implementation_key(2028)) VARIANT_BOOL IAcadPreferencesOpenSave::GetShowProxyDialogBox ( );
__declspec(implementation_key(2029)) void IAcadPreferencesOpenSave::PutAutoAudit ( VARIANT_BOOL bAudit );
__declspec(implementation_key(2030)) VARIANT_BOOL IAcadPreferencesOpenSave::GetAutoAudit ( );
__declspec(implementation_key(2031)) void IAcadPreferencesOpenSave::PutSaveAsType ( enum AcSaveAsType Path );
__declspec(implementation_key(2032)) enum AcSaveAsType IAcadPreferencesOpenSave::GetSaveAsType ( );
__declspec(implementation_key(2033)) long IAcadPreferencesOpenSave::GetMRUNumber ( );
__declspec(implementation_key(2034)) IAcadApplicationPtr IAcadPreferencesOutput::GetApplication ( );
__declspec(implementation_key(2035)) void IAcadPreferencesOutput::PutDefaultOutputDevice ( _bstr_t Path );
__declspec(implementation_key(2036)) _bstr_t IAcadPreferencesOutput::GetDefaultOutputDevice ( );
__declspec(implementation_key(2037)) void IAcadPreferencesOutput::PutPrinterSpoolAlert ( enum AcPrinterSpoolAlert Path );
__declspec(implementation_key(2038)) enum AcPrinterSpoolAlert IAcadPreferencesOutput::GetPrinterSpoolAlert ( );
__declspec(implementation_key(2039)) void IAcadPreferencesOutput::PutPrinterPaperSizeAlert ( VARIANT_BOOL Path );
__declspec(implementation_key(2040)) VARIANT_BOOL IAcadPreferencesOutput::GetPrinterPaperSizeAlert ( );
__declspec(implementation_key(2041)) void IAcadPreferencesOutput::PutPlotLegacy ( VARIANT_BOOL Path );
__declspec(implementation_key(2042)) VARIANT_BOOL IAcadPreferencesOutput::GetPlotLegacy ( );
__declspec(implementation_key(2043)) void IAcadPreferencesOutput::PutOLEQuality ( enum AcOleQuality Path );
__declspec(implementation_key(2044)) enum AcOleQuality IAcadPreferencesOutput::GetOLEQuality ( );
__declspec(implementation_key(2045)) void IAcadPreferencesOutput::PutUseLastPlotSettings ( VARIANT_BOOL Path );
__declspec(implementation_key(2046)) VARIANT_BOOL IAcadPreferencesOutput::GetUseLastPlotSettings ( );
__declspec(implementation_key(2047)) void IAcadPreferencesOutput::PutPlotPolicy ( enum AcPlotPolicy Path );
__declspec(implementation_key(2048)) enum AcPlotPolicy IAcadPreferencesOutput::GetPlotPolicy ( );
__declspec(implementation_key(2049)) void IAcadPreferencesOutput::PutDefaultPlotStyleTable ( _bstr_t Path );
__declspec(implementation_key(2050)) _bstr_t IAcadPreferencesOutput::GetDefaultPlotStyleTable ( );
__declspec(implementation_key(2051)) void IAcadPreferencesOutput::PutDefaultPlotStyleForObjects ( _bstr_t Path );
__declspec(implementation_key(2052)) _bstr_t IAcadPreferencesOutput::GetDefaultPlotStyleForObjects ( );
__declspec(implementation_key(2053)) void IAcadPreferencesOutput::PutDefaultPlotStyleForLayer ( _bstr_t Path );
__declspec(implementation_key(2054)) _bstr_t IAcadPreferencesOutput::GetDefaultPlotStyleForLayer ( );
__declspec(implementation_key(2055)) IAcadApplicationPtr IAcadPreferencesSystem::GetApplication ( );
__declspec(implementation_key(2056)) void IAcadPreferencesSystem::PutSingleDocumentMode ( VARIANT_BOOL Path );
__declspec(implementation_key(2057)) VARIANT_BOOL IAcadPreferencesSystem::GetSingleDocumentMode ( );
__declspec(implementation_key(2058)) void IAcadPreferencesSystem::PutDisplayOLEScale ( VARIANT_BOOL Path );
__declspec(implementation_key(2059)) VARIANT_BOOL IAcadPreferencesSystem::GetDisplayOLEScale ( );
__declspec(implementation_key(2060)) void IAcadPreferencesSystem::PutStoreSQLIndex ( VARIANT_BOOL Path );
__declspec(implementation_key(2061)) VARIANT_BOOL IAcadPreferencesSystem::GetStoreSQLIndex ( );
__declspec(implementation_key(2062)) void IAcadPreferencesSystem::PutTablesReadOnly ( VARIANT_BOOL Path );
__declspec(implementation_key(2063)) VARIANT_BOOL IAcadPreferencesSystem::GetTablesReadOnly ( );
__declspec(implementation_key(2064)) void IAcadPreferencesSystem::PutEnableStartupDialog ( VARIANT_BOOL Path );
__declspec(implementation_key(2065)) VARIANT_BOOL IAcadPreferencesSystem::GetEnableStartupDialog ( );
__declspec(implementation_key(2066)) void IAcadPreferencesSystem::PutBeepOnError ( VARIANT_BOOL BeepOnError );
__declspec(implementation_key(2067)) VARIANT_BOOL IAcadPreferencesSystem::GetBeepOnError ( );
__declspec(implementation_key(2068)) void IAcadPreferencesSystem::PutShowWarningMessages ( VARIANT_BOOL Path );
__declspec(implementation_key(2069)) VARIANT_BOOL IAcadPreferencesSystem::GetShowWarningMessages ( );
__declspec(implementation_key(2070)) void IAcadPreferencesSystem::PutLoadAcadLspInAllDocuments ( VARIANT_BOOL pALID );
__declspec(implementation_key(2071)) VARIANT_BOOL IAcadPreferencesSystem::GetLoadAcadLspInAllDocuments ( );
__declspec(implementation_key(2072)) IAcadApplicationPtr IAcadPreferencesUser::GetApplication ( );
__declspec(implementation_key(2073)) void IAcadPreferencesUser::PutKeyboardAccelerator ( enum AcKeyboardAccelerator Path );
__declspec(implementation_key(2074)) enum AcKeyboardAccelerator IAcadPreferencesUser::GetKeyboardAccelerator ( );
__declspec(implementation_key(2075)) void IAcadPreferencesUser::PutKeyboardPriority ( enum AcKeyboardPriority Path );
__declspec(implementation_key(2076)) enum AcKeyboardPriority IAcadPreferencesUser::GetKeyboardPriority ( );
__declspec(implementation_key(2077)) void IAcadPreferencesUser::PutHyperlinkDisplayCursor ( VARIANT_BOOL Path );
__declspec(implementation_key(2078)) VARIANT_BOOL IAcadPreferencesUser::GetHyperlinkDisplayCursor ( );
__declspec(implementation_key(2079)) void IAcadPreferencesUser::PutHyperlinkDisplayTooltip ( VARIANT_BOOL Path );
__declspec(implementation_key(2080)) VARIANT_BOOL IAcadPreferencesUser::GetHyperlinkDisplayTooltip ( );
__declspec(implementation_key(2081)) void IAcadPreferencesUser::PutADCInsertUnitsDefaultSource ( enum AcInsertUnits pIU );
__declspec(implementation_key(2082)) enum AcInsertUnits IAcadPreferencesUser::GetADCInsertUnitsDefaultSource ( );
__declspec(implementation_key(2083)) void IAcadPreferencesUser::PutADCInsertUnitsDefaultTarget ( enum AcInsertUnits pSUunits );
__declspec(implementation_key(2084)) enum AcInsertUnits IAcadPreferencesUser::GetADCInsertUnitsDefaultTarget ( );
__declspec(implementation_key(2085)) void IAcadPreferencesUser::PutShortCutMenuDisplay ( VARIANT_BOOL pSCM );
__declspec(implementation_key(2086)) VARIANT_BOOL IAcadPreferencesUser::GetShortCutMenuDisplay ( );
__declspec(implementation_key(2087)) void IAcadPreferencesUser::PutSCMDefaultMode ( enum AcDrawingAreaSCMDefault pSCM );
__declspec(implementation_key(2088)) enum AcDrawingAreaSCMDefault IAcadPreferencesUser::GetSCMDefaultMode ( );
__declspec(implementation_key(2089)) void IAcadPreferencesUser::PutSCMEditMode ( enum AcDrawingAreaSCMEdit pSCM );
__declspec(implementation_key(2090)) enum AcDrawingAreaSCMEdit IAcadPreferencesUser::GetSCMEditMode ( );
__declspec(implementation_key(2091)) void IAcadPreferencesUser::PutSCMCommandMode ( enum AcDrawingAreaSCMCommand pSCM );
__declspec(implementation_key(2092)) enum AcDrawingAreaSCMCommand IAcadPreferencesUser::GetSCMCommandMode ( );
__declspec(implementation_key(2093)) void IAcadPreferencesUser::PutSCMTimeMode ( VARIANT_BOOL time );
__declspec(implementation_key(2094)) VARIANT_BOOL IAcadPreferencesUser::GetSCMTimeMode ( );
__declspec(implementation_key(2095)) void IAcadPreferencesUser::PutSCMTimeValue ( int time );
__declspec(implementation_key(2096)) int IAcadPreferencesUser::GetSCMTimeValue ( );
__declspec(implementation_key(2097)) IAcadApplicationPtr IAcadPreferencesDrafting::GetApplication ( );
__declspec(implementation_key(2098)) void IAcadPreferencesDrafting::PutAutoSnapMarker ( VARIANT_BOOL Path );
__declspec(implementation_key(2099)) VARIANT_BOOL IAcadPreferencesDrafting::GetAutoSnapMarker ( );
__declspec(implementation_key(2100)) void IAcadPreferencesDrafting::PutAutoSnapMagnet ( VARIANT_BOOL Path );
__declspec(implementation_key(2101)) VARIANT_BOOL IAcadPreferencesDrafting::GetAutoSnapMagnet ( );
__declspec(implementation_key(2102)) void IAcadPreferencesDrafting::PutAutoSnapTooltip ( VARIANT_BOOL Path );
__declspec(implementation_key(2103)) VARIANT_BOOL IAcadPreferencesDrafting::GetAutoSnapTooltip ( );
__declspec(implementation_key(2104)) void IAcadPreferencesDrafting::PutAutoSnapAperture ( VARIANT_BOOL Path );
__declspec(implementation_key(2105)) VARIANT_BOOL IAcadPreferencesDrafting::GetAutoSnapAperture ( );
__declspec(implementation_key(2106)) void IAcadPreferencesDrafting::PutAutoSnapApertureSize ( long Path );
__declspec(implementation_key(2107)) long IAcadPreferencesDrafting::GetAutoSnapApertureSize ( );
__declspec(implementation_key(2108)) void IAcadPreferencesDrafting::PutAutoSnapMarkerColor ( enum AcColor Path );
__declspec(implementation_key(2109)) enum AcColor IAcadPreferencesDrafting::GetAutoSnapMarkerColor ( );
__declspec(implementation_key(2110)) void IAcadPreferencesDrafting::PutAutoSnapMarkerSize ( long Path );
__declspec(implementation_key(2111)) long IAcadPreferencesDrafting::GetAutoSnapMarkerSize ( );
__declspec(implementation_key(2112)) void IAcadPreferencesDrafting::PutPolarTrackingVector ( VARIANT_BOOL Path );
__declspec(implementation_key(2113)) VARIANT_BOOL IAcadPreferencesDrafting::GetPolarTrackingVector ( );
__declspec(implementation_key(2114)) void IAcadPreferencesDrafting::PutFullScreenTrackingVector ( VARIANT_BOOL Path );
__declspec(implementation_key(2115)) VARIANT_BOOL IAcadPreferencesDrafting::GetFullScreenTrackingVector ( );
__declspec(implementation_key(2116)) void IAcadPreferencesDrafting::PutAutoTrackTooltip ( VARIANT_BOOL Path );
__declspec(implementation_key(2117)) VARIANT_BOOL IAcadPreferencesDrafting::GetAutoTrackTooltip ( );
__declspec(implementation_key(2118)) void IAcadPreferencesDrafting::PutAlignmentPointAcquisition ( enum AcAlignmentPointAcquisition Path );
__declspec(implementation_key(2119)) enum AcAlignmentPointAcquisition IAcadPreferencesDrafting::GetAlignmentPointAcquisition ( );
__declspec(implementation_key(2120)) IAcadApplicationPtr IAcadPreferencesSelection::GetApplication ( );
__declspec(implementation_key(2121)) void IAcadPreferencesSelection::PutPickFirst ( VARIANT_BOOL Path );
__declspec(implementation_key(2122)) VARIANT_BOOL IAcadPreferencesSelection::GetPickFirst ( );
__declspec(implementation_key(2123)) void IAcadPreferencesSelection::PutPickAdd ( VARIANT_BOOL Path );
__declspec(implementation_key(2124)) VARIANT_BOOL IAcadPreferencesSelection::GetPickAdd ( );
__declspec(implementation_key(2125)) void IAcadPreferencesSelection::PutPickDrag ( VARIANT_BOOL Path );
__declspec(implementation_key(2126)) VARIANT_BOOL IAcadPreferencesSelection::GetPickDrag ( );
__declspec(implementation_key(2127)) void IAcadPreferencesSelection::PutPickAuto ( VARIANT_BOOL Path );
__declspec(implementation_key(2128)) VARIANT_BOOL IAcadPreferencesSelection::GetPickAuto ( );
__declspec(implementation_key(2129)) void IAcadPreferencesSelection::PutPickBoxSize ( long Path );
__declspec(implementation_key(2130)) long IAcadPreferencesSelection::GetPickBoxSize ( );
__declspec(implementation_key(2131)) void IAcadPreferencesSelection::PutDisplayGrips ( VARIANT_BOOL Path );
__declspec(implementation_key(2132)) VARIANT_BOOL IAcadPreferencesSelection::GetDisplayGrips ( );
__declspec(implementation_key(2133)) void IAcadPreferencesSelection::PutDisplayGripsWithinBlocks ( VARIANT_BOOL Path );
__declspec(implementation_key(2134)) VARIANT_BOOL IAcadPreferencesSelection::GetDisplayGripsWithinBlocks ( );
__declspec(implementation_key(2135)) void IAcadPreferencesSelection::PutGripColorSelected ( enum AcColor Path );
__declspec(implementation_key(2136)) enum AcColor IAcadPreferencesSelection::GetGripColorSelected ( );
__declspec(implementation_key(2137)) void IAcadPreferencesSelection::PutGripColorUnselected ( enum AcColor Path );
__declspec(implementation_key(2138)) enum AcColor IAcadPreferencesSelection::GetGripColorUnselected ( );
__declspec(implementation_key(2139)) void IAcadPreferencesSelection::PutGripSize ( long Path );
__declspec(implementation_key(2140)) long IAcadPreferencesSelection::GetGripSize ( );
__declspec(implementation_key(2141)) void IAcadPreferencesSelection::PutPickGroup ( VARIANT_BOOL pick );
__declspec(implementation_key(2142)) VARIANT_BOOL IAcadPreferencesSelection::GetPickGroup ( );
__declspec(implementation_key(2143)) IAcadApplicationPtr IAcadPreferencesProfiles::GetApplication ( );
__declspec(implementation_key(2144)) void IAcadPreferencesProfiles::PutActiveProfile ( _bstr_t Path );
__declspec(implementation_key(2145)) _bstr_t IAcadPreferencesProfiles::GetActiveProfile ( );
__declspec(implementation_key(2146)) HRESULT IAcadPreferencesProfiles::ImportProfile ( _bstr_t ProfileName, _bstr_t RegFile, VARIANT_BOOL IncludePathInfo );
__declspec(implementation_key(2147)) HRESULT IAcadPreferencesProfiles::ExportProfile ( _bstr_t ProfileName, _bstr_t RegFile );
__declspec(implementation_key(2148)) HRESULT IAcadPreferencesProfiles::DeleteProfile ( _bstr_t ProfileName );
__declspec(implementation_key(2149)) HRESULT IAcadPreferencesProfiles::ResetProfile ( _bstr_t Profile );
__declspec(implementation_key(2150)) HRESULT IAcadPreferencesProfiles::RenameProfile ( _bstr_t origProfileName, _bstr_t newProfileName );
__declspec(implementation_key(2151)) HRESULT IAcadPreferencesProfiles::CopyProfile ( _bstr_t oldProfileName, _bstr_t newProfileName );
__declspec(implementation_key(2152)) HRESULT IAcadPreferencesProfiles::GetAllProfileNames ( VARIANT * pNames );
__declspec(implementation_key(2153)) IAcadMenuGroupPtr IAcadMenuGroups::Item ( const _variant_t & Index );
__declspec(implementation_key(2154)) IUnknownPtr IAcadMenuGroups::Get_NewEnum ( );
__declspec(implementation_key(2155)) long IAcadMenuGroups::GetCount ( );
__declspec(implementation_key(2156)) IAcadApplicationPtr IAcadMenuGroups::GetApplication ( );
__declspec(implementation_key(2157)) IAcadApplicationPtr IAcadMenuGroups::GetParent ( );
__declspec(implementation_key(2158)) IAcadMenuGroupPtr IAcadMenuGroups::Load ( _bstr_t MenuFileName, const _variant_t & BaseMenu );
__declspec(implementation_key(2159)) IAcadApplicationPtr IAcadMenuGroup::GetApplication ( );
__declspec(implementation_key(2160)) IAcadMenuGroupsPtr IAcadMenuGroup::GetParent ( );
__declspec(implementation_key(2161)) _bstr_t IAcadMenuGroup::GetName ( );
__declspec(implementation_key(2162)) enum AcMenuGroupType IAcadMenuGroup::GetType ( );
__declspec(implementation_key(2163)) _bstr_t IAcadMenuGroup::GetMenuFileName ( );
__declspec(implementation_key(2164)) IAcadPopupMenusPtr IAcadMenuGroup::GetMenus ( );
__declspec(implementation_key(2165)) IAcadToolbarsPtr IAcadMenuGroup::GetToolbars ( );
__declspec(implementation_key(2166)) HRESULT IAcadMenuGroup::Unload ( );
__declspec(implementation_key(2167)) HRESULT IAcadMenuGroup::Save ( enum AcMenuFileType MenuFileType );
__declspec(implementation_key(2168)) HRESULT IAcadMenuGroup::SaveAs ( _bstr_t MenuFileName, enum AcMenuFileType MenuFileType );
__declspec(implementation_key(2169)) IAcadPopupMenuPtr IAcadPopupMenus::Item ( const _variant_t & Index );
__declspec(implementation_key(2170)) IUnknownPtr IAcadPopupMenus::Get_NewEnum ( );
__declspec(implementation_key(2171)) long IAcadPopupMenus::GetCount ( );
__declspec(implementation_key(2172)) IAcadApplicationPtr IAcadPopupMenus::GetApplication ( );
__declspec(implementation_key(2173)) IAcadMenuGroupPtr IAcadPopupMenus::GetParent ( );
__declspec(implementation_key(2174)) IAcadPopupMenuPtr IAcadPopupMenus::Add ( _bstr_t MenuName );
__declspec(implementation_key(2175)) HRESULT IAcadPopupMenus::InsertMenuInMenuBar ( _bstr_t MenuName, const _variant_t & Index );
__declspec(implementation_key(2176)) HRESULT IAcadPopupMenus::RemoveMenuFromMenuBar ( const _variant_t & Index );
__declspec(implementation_key(2177)) IAcadPopupMenuItemPtr IAcadPopupMenu::Item ( const _variant_t & Index );
__declspec(implementation_key(2178)) IUnknownPtr IAcadPopupMenu::Get_NewEnum ( );
__declspec(implementation_key(2179)) long IAcadPopupMenu::GetCount ( );
__declspec(implementation_key(2180)) IAcadApplicationPtr IAcadPopupMenu::GetApplication ( );
__declspec(implementation_key(2181)) IDispatchPtr IAcadPopupMenu::GetParent ( );
__declspec(implementation_key(2182)) _bstr_t IAcadPopupMenu::GetName ( );
__declspec(implementation_key(2183)) void IAcadPopupMenu::PutName ( _bstr_t bstrName );
__declspec(implementation_key(2184)) _bstr_t IAcadPopupMenu::GetNameNoMnemonic ( );
__declspec(implementation_key(2185)) VARIANT_BOOL IAcadPopupMenu::GetShortcutMenu ( );
__declspec(implementation_key(2186)) VARIANT_BOOL IAcadPopupMenu::GetOnMenuBar ( );
__declspec(implementation_key(2187)) IAcadPopupMenuItemPtr IAcadPopupMenu::AddMenuItem ( const _variant_t & Index, _bstr_t Label, _bstr_t Macro );
__declspec(implementation_key(2188)) IAcadPopupMenuPtr IAcadPopupMenu::AddSubMenu ( const _variant_t & Index, _bstr_t Label );
__declspec(implementation_key(2189)) IAcadPopupMenuItemPtr IAcadPopupMenu::AddSeparator ( const _variant_t & Index );
__declspec(implementation_key(2190)) HRESULT IAcadPopupMenu::InsertInMenuBar ( const _variant_t & Index );
__declspec(implementation_key(2191)) HRESULT IAcadPopupMenu::RemoveFromMenuBar ( );
__declspec(implementation_key(2192)) _bstr_t IAcadPopupMenu::GetTagString ( );
__declspec(implementation_key(2193)) IAcadApplicationPtr IAcadPopupMenuItem::GetApplication ( );
__declspec(implementation_key(2194)) IAcadPopupMenuPtr IAcadPopupMenuItem::GetParent ( );
__declspec(implementation_key(2195)) _bstr_t IAcadPopupMenuItem::GetLabel ( );
__declspec(implementation_key(2196)) void IAcadPopupMenuItem::PutLabel ( _bstr_t bstrLabel );
__declspec(implementation_key(2197)) _bstr_t IAcadPopupMenuItem::GetTagString ( );
__declspec(implementation_key(2198)) void IAcadPopupMenuItem::PutTagString ( _bstr_t bstrTag );
__declspec(implementation_key(2199)) VARIANT_BOOL IAcadPopupMenuItem::GetEnable ( );
__declspec(implementation_key(2200)) void IAcadPopupMenuItem::PutEnable ( VARIANT_BOOL bFlag );
__declspec(implementation_key(2201)) VARIANT_BOOL IAcadPopupMenuItem::GetCheck ( );
__declspec(implementation_key(2202)) void IAcadPopupMenuItem::PutCheck ( VARIANT_BOOL bFlag );
__declspec(implementation_key(2203)) enum AcMenuItemType IAcadPopupMenuItem::GetType ( );
__declspec(implementation_key(2204)) IAcadPopupMenuPtr IAcadPopupMenuItem::GetSubMenu ( );
__declspec(implementation_key(2205)) _bstr_t IAcadPopupMenuItem::GetMacro ( );
__declspec(implementation_key(2206)) void IAcadPopupMenuItem::PutMacro ( _bstr_t bstrMacro );
__declspec(implementation_key(2207)) int IAcadPopupMenuItem::GetIndex ( );
__declspec(implementation_key(2208)) _bstr_t IAcadPopupMenuItem::GetCaption ( );
__declspec(implementation_key(2209)) _bstr_t IAcadPopupMenuItem::GetHelpString ( );
__declspec(implementation_key(2210)) void IAcadPopupMenuItem::PutHelpString ( _bstr_t bstrHelp );
__declspec(implementation_key(2211)) HRESULT IAcadPopupMenuItem::Delete ( );
__declspec(implementation_key(2212)) int IAcadPopupMenuItem::GetEndSubMenuLevel ( );
__declspec(implementation_key(2213)) void IAcadPopupMenuItem::PutEndSubMenuLevel ( int Level );
__declspec(implementation_key(2214)) IAcadToolbarPtr IAcadToolbars::Item ( const _variant_t & Index );
__declspec(implementation_key(2215)) IUnknownPtr IAcadToolbars::Get_NewEnum ( );
__declspec(implementation_key(2216)) long IAcadToolbars::GetCount ( );
__declspec(implementation_key(2217)) IAcadApplicationPtr IAcadToolbars::GetApplication ( );
__declspec(implementation_key(2218)) IAcadMenuGroupPtr IAcadToolbars::GetParent ( );
__declspec(implementation_key(2219)) VARIANT_BOOL IAcadToolbars::GetLargeButtons ( );
__declspec(implementation_key(2220)) void IAcadToolbars::PutLargeButtons ( VARIANT_BOOL bFlag );
__declspec(implementation_key(2221)) IAcadToolbarPtr IAcadToolbars::Add ( _bstr_t ToolbarName );
__declspec(implementation_key(2222)) IAcadToolbarItemPtr IAcadToolbar::Item ( const _variant_t & Index );
__declspec(implementation_key(2223)) IUnknownPtr IAcadToolbar::Get_NewEnum ( );
__declspec(implementation_key(2224)) long IAcadToolbar::GetCount ( );
__declspec(implementation_key(2225)) IAcadApplicationPtr IAcadToolbar::GetApplication ( );
__declspec(implementation_key(2226)) IDispatchPtr IAcadToolbar::GetParent ( );
__declspec(implementation_key(2227)) _bstr_t IAcadToolbar::GetName ( );
__declspec(implementation_key(2228)) void IAcadToolbar::PutName ( _bstr_t bstrName );
__declspec(implementation_key(2229)) VARIANT_BOOL IAcadToolbar::GetVisible ( );
__declspec(implementation_key(2230)) void IAcadToolbar::PutVisible ( VARIANT_BOOL bFlag );
__declspec(implementation_key(2231)) enum AcToolbarDockStatus IAcadToolbar::GetDockStatus ( );
__declspec(implementation_key(2232)) VARIANT_BOOL IAcadToolbar::GetLargeButtons ( );
__declspec(implementation_key(2233)) int IAcadToolbar::Getleft ( );
__declspec(implementation_key(2234)) void IAcadToolbar::Putleft ( int nLeft );
__declspec(implementation_key(2235)) int IAcadToolbar::Gettop ( );
__declspec(implementation_key(2236)) void IAcadToolbar::Puttop ( int nTop );
__declspec(implementation_key(2237)) int IAcadToolbar::GetWidth ( );
__declspec(implementation_key(2238)) int IAcadToolbar::GetHeight ( );
__declspec(implementation_key(2239)) int IAcadToolbar::GetFloatingRows ( );
__declspec(implementation_key(2240)) void IAcadToolbar::PutFloatingRows ( int nRows );
__declspec(implementation_key(2241)) _bstr_t IAcadToolbar::GetHelpString ( );
__declspec(implementation_key(2242)) void IAcadToolbar::PutHelpString ( _bstr_t bstrHelp );
__declspec(implementation_key(2243)) IAcadToolbarItemPtr IAcadToolbar::AddToolbarButton ( const _variant_t & Index, _bstr_t Name, _bstr_t HelpString, _bstr_t Macro, const _variant_t & FlyoutButton );
__declspec(implementation_key(2244)) IAcadToolbarItemPtr IAcadToolbar::AddSeparator ( const _variant_t & Index );
__declspec(implementation_key(2245)) HRESULT IAcadToolbar::Dock ( enum AcToolbarDockStatus Side );
__declspec(implementation_key(2246)) HRESULT IAcadToolbar::Float ( int top, int left, int NumberFloatRows );
__declspec(implementation_key(2247)) HRESULT IAcadToolbar::Delete ( );
__declspec(implementation_key(2248)) _bstr_t IAcadToolbar::GetTagString ( );
__declspec(implementation_key(2249)) IAcadApplicationPtr IAcadToolbarItem::GetApplication ( );
__declspec(implementation_key(2250)) IAcadToolbarPtr IAcadToolbarItem::GetParent ( );
__declspec(implementation_key(2251)) _bstr_t IAcadToolbarItem::GetName ( );
__declspec(implementation_key(2252)) void IAcadToolbarItem::PutName ( _bstr_t bstrName );
__declspec(implementation_key(2253)) _bstr_t IAcadToolbarItem::GetTagString ( );
__declspec(implementation_key(2254)) void IAcadToolbarItem::PutTagString ( _bstr_t bstrTag );
__declspec(implementation_key(2255)) enum AcToolbarItemType IAcadToolbarItem::GetType ( );
__declspec(implementation_key(2256)) IAcadToolbarPtr IAcadToolbarItem::GetFlyout ( );
__declspec(implementation_key(2257)) _bstr_t IAcadToolbarItem::GetMacro ( );
__declspec(implementation_key(2258)) void IAcadToolbarItem::PutMacro ( _bstr_t bstrMacro );
__declspec(implementation_key(2259)) int IAcadToolbarItem::GetIndex ( );
__declspec(implementation_key(2260)) _bstr_t IAcadToolbarItem::GetHelpString ( );
__declspec(implementation_key(2261)) void IAcadToolbarItem::PutHelpString ( _bstr_t bstrHelp );
__declspec(implementation_key(2262)) HRESULT IAcadToolbarItem::GetBitmaps ( BSTR * SmallIconName, BSTR * LargeIconName );
__declspec(implementation_key(2263)) HRESULT IAcadToolbarItem::SetBitmaps ( _bstr_t SmallIconName, _bstr_t LargeIconName );
__declspec(implementation_key(2264)) HRESULT IAcadToolbarItem::AttachToolbarToFlyout ( _bstr_t MenuGroupName, _bstr_t ToolbarName );
__declspec(implementation_key(2265)) HRESULT IAcadToolbarItem::Delete ( );
__declspec(implementation_key(2266)) IAcadPopupMenuPtr IAcadMenuBar::Item ( const _variant_t & Index );
__declspec(implementation_key(2267)) IUnknownPtr IAcadMenuBar::Get_NewEnum ( );
__declspec(implementation_key(2268)) long IAcadMenuBar::GetCount ( );
__declspec(implementation_key(2269)) IAcadApplicationPtr IAcadMenuBar::GetApplication ( );
__declspec(implementation_key(2270)) IAcadApplicationPtr IAcadMenuBar::GetParent ( );
__declspec(implementation_key(2271)) IAcadDocumentPtr IAcadDocuments::Item ( const _variant_t & Index );
__declspec(implementation_key(2272)) IUnknownPtr IAcadDocuments::Get_NewEnum ( );
__declspec(implementation_key(2273)) long IAcadDocuments::GetCount ( );
__declspec(implementation_key(2274)) IAcadApplicationPtr IAcadDocuments::GetApplication ( );
__declspec(implementation_key(2275)) IAcadDocumentPtr IAcadDocuments::Add ( const _variant_t & TemplateName );
__declspec(implementation_key(2276)) IAcadDocumentPtr IAcadDocuments::Open ( _bstr_t Name, const _variant_t & ReadOnly, const _variant_t & Password );
__declspec(implementation_key(2277)) HRESULT IAcadDocuments::Close ( );
__declspec(implementation_key(2278)) IAcadApplicationPtr IAcadState::GetApplication ( );
__declspec(implementation_key(2279)) VARIANT_BOOL IAcadState::GetIsQuiescent ( );
__declspec(implementation_key(2280)) IAcadSelectionSetPtr IAcadSelectionSets::Item ( const _variant_t & Index );
__declspec(implementation_key(2281)) long IAcadSelectionSets::GetCount ( );
__declspec(implementation_key(2282)) IUnknownPtr IAcadSelectionSets::Get_NewEnum ( );
__declspec(implementation_key(2283)) IAcadApplicationPtr IAcadSelectionSets::GetApplication ( );
__declspec(implementation_key(2284)) IAcadSelectionSetPtr IAcadSelectionSets::Add ( _bstr_t Name );
__declspec(implementation_key(2285)) IAcadEntityPtr IAcadSelectionSet::Item ( const _variant_t & Index );
__declspec(implementation_key(2286)) long IAcadSelectionSet::GetCount ( );
__declspec(implementation_key(2287)) IUnknownPtr IAcadSelectionSet::Get_NewEnum ( );
__declspec(implementation_key(2288)) _bstr_t IAcadSelectionSet::GetName ( );
__declspec(implementation_key(2289)) HRESULT IAcadSelectionSet::Highlight ( VARIANT_BOOL bFlag );
__declspec(implementation_key(2290)) HRESULT IAcadSelectionSet::Erase ( );
__declspec(implementation_key(2291)) HRESULT IAcadSelectionSet::Update ( );
__declspec(implementation_key(2292)) IAcadApplicationPtr IAcadSelectionSet::GetApplication ( );
__declspec(implementation_key(2293)) HRESULT IAcadSelectionSet::AddItems ( const _variant_t & pSelSet );
__declspec(implementation_key(2294)) HRESULT IAcadSelectionSet::RemoveItems ( const _variant_t & Objects );
__declspec(implementation_key(2295)) HRESULT IAcadSelectionSet::Clear ( );
__declspec(implementation_key(2296)) HRESULT IAcadSelectionSet::Select ( enum AcSelect Mode, const _variant_t & Point1, const _variant_t & Point2, const _variant_t & FilterType, const _variant_t & FilterData );
__declspec(implementation_key(2297)) HRESULT IAcadSelectionSet::SelectAtPoint ( const _variant_t & Point, const _variant_t & FilterType, const _variant_t & FilterData );
__declspec(implementation_key(2298)) HRESULT IAcadSelectionSet::SelectByPolygon ( enum AcSelect Mode, const _variant_t & PointsList, const _variant_t & FilterType, const _variant_t & FilterData );
__declspec(implementation_key(2299)) HRESULT IAcadSelectionSet::SelectOnScreen ( const _variant_t & FilterType, const _variant_t & FilterData );
__declspec(implementation_key(2300)) HRESULT IAcadSelectionSet::Delete ( );
__declspec(implementation_key(2301)) double IAcadUtility::AngleToReal ( _bstr_t Angle, enum AcAngleUnits Unit );
__declspec(implementation_key(2302)) _bstr_t IAcadUtility::AngleToString ( double Angle, enum AcAngleUnits Unit, int precision );
__declspec(implementation_key(2303)) double IAcadUtility::DistanceToReal ( _bstr_t Distance, enum AcUnits Unit );
__declspec(implementation_key(2304)) _bstr_t IAcadUtility::RealToString ( double Value, enum AcUnits Unit, int precision );
__declspec(implementation_key(2305)) _variant_t IAcadUtility::TranslateCoordinates ( const _variant_t & Point, enum AcCoordinateSystem FromCoordSystem, enum AcCoordinateSystem ToCoordSystem, int Displacement, const _variant_t & OCSNormal );
__declspec(implementation_key(2306)) HRESULT IAcadUtility::InitializeUserInput ( int Bits, const _variant_t & KeyWordList );
__declspec(implementation_key(2307)) int IAcadUtility::GetInteger ( const _variant_t & Prompt );
__declspec(implementation_key(2308)) double IAcadUtility::GetReal ( const _variant_t & Prompt );
__declspec(implementation_key(2309)) _bstr_t IAcadUtility::GetInput ( );
__declspec(implementation_key(2310)) _bstr_t IAcadUtility::GetKeyword ( const _variant_t & Prompt );
__declspec(implementation_key(2311)) _bstr_t IAcadUtility::GetString ( int HasSpaces, const _variant_t & Prompt );
__declspec(implementation_key(2312)) double IAcadUtility::GetAngle ( const _variant_t & Point, const _variant_t & Prompt );
__declspec(implementation_key(2313)) double IAcadUtility::AngleFromXAxis ( const _variant_t & StartPoint, const _variant_t & EndPoint );
__declspec(implementation_key(2314)) _variant_t IAcadUtility::GetCorner ( const _variant_t & Point, const _variant_t & Prompt );
__declspec(implementation_key(2315)) double IAcadUtility::GetDistance ( const _variant_t & Point, const _variant_t & Prompt );
__declspec(implementation_key(2316)) double IAcadUtility::GetOrientation ( const _variant_t & Point, const _variant_t & Prompt );
__declspec(implementation_key(2317)) _variant_t IAcadUtility::GetPoint ( const _variant_t & Point, const _variant_t & Prompt );
__declspec(implementation_key(2318)) _variant_t IAcadUtility::PolarPoint ( const _variant_t & Point, double Angle, double Distance );
__declspec(implementation_key(2319)) HRESULT IAcadUtility::CreateTypedArray ( VARIANT * varArr, int Type, SAFEARRAY * inArgs );
__declspec(implementation_key(2320)) HRESULT IAcadUtility::GetEntity ( IDispatch * * Object, VARIANT * PickedPoint, const _variant_t & Prompt );
__declspec(implementation_key(2321)) HRESULT IAcadUtility::Prompt ( _bstr_t Message );
__declspec(implementation_key(2322)) HRESULT IAcadUtility::GetSubEntity ( IDispatch * * Object, VARIANT * PickedPoint, VARIANT * transMatrix, VARIANT * ContextData, const _variant_t & Prompt );
__declspec(implementation_key(2323)) VARIANT_BOOL IAcadUtility::IsURL ( _bstr_t URL );
__declspec(implementation_key(2324)) HRESULT IAcadUtility::GetRemoteFile ( _bstr_t URL, BSTR * LocalFile, VARIANT_BOOL IgnoreCache );
__declspec(implementation_key(2325)) HRESULT IAcadUtility::PutRemoteFile ( _bstr_t URL, _bstr_t LocalFile );
__declspec(implementation_key(2326)) VARIANT_BOOL IAcadUtility::IsRemoteFile ( _bstr_t LocalFile, BSTR * URL );
__declspec(implementation_key(2327)) VARIANT_BOOL IAcadUtility::LaunchBrowserDialog ( BSTR * SelectedURL, _bstr_t DialogTitle, _bstr_t OpenButtonCaption, _bstr_t StartPageURL, _bstr_t RegistryRootKey, VARIANT_BOOL OpenButtonAlwaysEnabled );
__declspec(implementation_key(2328)) HRESULT _DAcadDocumentEvents::BeginSave ( _bstr_t FileName );
__declspec(implementation_key(2329)) HRESULT _DAcadDocumentEvents::EndSave ( _bstr_t FileName );
__declspec(implementation_key(2330)) HRESULT _DAcadDocumentEvents::BeginCommand ( _bstr_t CommandName );
__declspec(implementation_key(2331)) HRESULT _DAcadDocumentEvents::EndCommand ( _bstr_t CommandName );
__declspec(implementation_key(2332)) HRESULT _DAcadDocumentEvents::BeginLisp ( _bstr_t FirstLine );
__declspec(implementation_key(2333)) HRESULT _DAcadDocumentEvents::EndLisp ( );
__declspec(implementation_key(2334)) HRESULT _DAcadDocumentEvents::LispCancelled ( );
__declspec(implementation_key(2335)) HRESULT _DAcadDocumentEvents::SelectionChanged ( );
__declspec(implementation_key(2336)) HRESULT _DAcadDocumentEvents::Activate ( );
__declspec(implementation_key(2337)) HRESULT _DAcadDocumentEvents::Deactivate ( );
__declspec(implementation_key(2338)) HRESULT _DAcadDocumentEvents::BeginRightClick ( const _variant_t & PickPoint );
__declspec(implementation_key(2339)) HRESULT _DAcadDocumentEvents::BeginShortcutMenuDefault ( struct IAcadPopupMenu * * ShortcutMenu );
__declspec(implementation_key(2340)) HRESULT _DAcadDocumentEvents::BeginShortcutMenuEdit ( struct IAcadPopupMenu * * ShortcutMenu, struct IAcadSelectionSet * * SelectionSet );
__declspec(implementation_key(2341)) HRESULT _DAcadDocumentEvents::BeginShortcutMenuCommand ( struct IAcadPopupMenu * * ShortcutMenu, _bstr_t Command );
__declspec(implementation_key(2342)) HRESULT _DAcadDocumentEvents::BeginShortcutMenuGrip ( struct IAcadPopupMenu * * ShortcutMenu );
__declspec(implementation_key(2343)) HRESULT _DAcadDocumentEvents::BeginShortcutMenuOsnap ( struct IAcadPopupMenu * * ShortcutMenu );
__declspec(implementation_key(2344)) HRESULT _DAcadDocumentEvents::EndShortcutMenu ( struct IAcadPopupMenu * * ShortcutMenu );
__declspec(implementation_key(2345)) HRESULT _DAcadDocumentEvents::BeginDoubleClick ( const _variant_t & PickPoint );
__declspec(implementation_key(2346)) HRESULT _DAcadDocumentEvents::ObjectAdded ( IDispatch * Object );
__declspec(implementation_key(2347)) HRESULT _DAcadDocumentEvents::ObjectErased ( long ObjectID );
__declspec(implementation_key(2348)) HRESULT _DAcadDocumentEvents::ObjectModified ( IDispatch * Object );
__declspec(implementation_key(2349)) HRESULT _DAcadDocumentEvents::BeginPlot ( _bstr_t DrawingName );
__declspec(implementation_key(2350)) HRESULT _DAcadDocumentEvents::EndPlot ( _bstr_t DrawingName );
__declspec(implementation_key(2351)) HRESULT _DAcadDocumentEvents::WindowMovedOrResized ( long HWNDFrame, VARIANT_BOOL bMoved );
__declspec(implementation_key(2352)) HRESULT _DAcadDocumentEvents::LayoutSwitched ( _bstr_t LayoutName );
__declspec(implementation_key(2353)) HRESULT _DAcadDocumentEvents::WindowChanged ( enum AcWindowState WindowState );
__declspec(implementation_key(2354)) HRESULT _DAcadDocumentEvents::BeginClose ( );
#pragma stop_map_region

} // namespace AutoCAD

#pragma pack(pop)
